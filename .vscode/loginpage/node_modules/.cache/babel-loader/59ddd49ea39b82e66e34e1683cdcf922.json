{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HelpPrinter = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nconst errors_list_1 = require(\"../core/errors-list\");\n\nconst ArgumentsParser_1 = require(\"./ArgumentsParser\");\n\nclass HelpPrinter {\n  constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks) {\n    this._programName = _programName;\n    this._executableName = _executableName;\n    this._version = _version;\n    this._hardhatParamDefinitions = _hardhatParamDefinitions;\n    this._tasks = _tasks;\n  }\n\n  printGlobalHelp() {\n    let includeSubtasks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    console.log(`${this._programName} version ${this._version}\\n`);\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`);\n    console.log(\"GLOBAL OPTIONS:\\n\");\n\n    this._printParamDetails(this._hardhatParamDefinitions);\n\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n    const tasksToShow = {};\n\n    for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n      if (includeSubtasks || !taskDefinition.isSubtask) {\n        tasksToShow[taskName] = taskDefinition;\n      }\n    }\n\n    const nameLength = Object.keys(tasksToShow).map(n => n.length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(tasksToShow).sort()) {\n      const {\n        description = \"\"\n      } = this._tasks[name];\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    console.log(\"\");\n    console.log(`To get help for a specific task run: npx ${this._executableName} help [task]\\n`);\n  }\n\n  printTaskHelp(taskName) {\n    const taskDefinition = this._tasks[taskName];\n\n    if (taskDefinition === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n        task: taskName\n      });\n    }\n\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions\n    } = taskDefinition;\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    const paramsList = this._getParamsList(paramDefinitions);\n\n    const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`);\n\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n\n      this._printParamDetails(paramDefinitions);\n\n      console.log(\"\");\n    }\n\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n\n      this._printPositionalParamDetails(positionalParamDefinitions);\n\n      console.log(\"\");\n    }\n\n    console.log(`${name}: ${description}\\n`);\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n\n  _getParamValueDescription(paramDefinition) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n\n  _getParamsList(paramDefinitions) {\n    let paramsList = \"\";\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const {\n        isFlag,\n        isOptional\n      } = definition;\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  _getPositionalParamsList(positionalParamDefinitions) {\n    let paramsList = \"\";\n\n    for (const definition of positionalParamDefinitions) {\n      const {\n        isOptional,\n        isVariadic,\n        name\n      } = definition;\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n\n      paramsList += name;\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  _printParamDetails(paramDefinitions) {\n    const paramsNameLength = Object.keys(paramDefinitions).map(n => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const {\n        description,\n        defaultValue,\n        isOptional,\n        isFlag\n      } = paramDefinitions[name];\n      let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n  _printPositionalParamDetails(positionalParamDefinitions) {\n    const paramsNameLength = positionalParamDefinitions.map(d => d.name.length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const definition of positionalParamDefinitions) {\n      const {\n        name,\n        description,\n        isOptional,\n        defaultValue\n      } = definition;\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n}\n\nexports.HelpPrinter = HelpPrinter;","map":{"version":3,"mappings":"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","names":["HelpPrinter","constructor","_programName","_executableName","_version","_hardhatParamDefinitions","_tasks","printGlobalHelp","includeSubtasks","console","log","_printParamDetails","tasksToShow","taskName","taskDefinition","Object","entries","isSubtask","nameLength","keys","map","n","length","reduce","a","b","Math","max","name","sort","description","padEnd","printTaskHelp","undefined","errors_1","errors_list_1","ARGUMENTS","UNRECOGNIZED_TASK","task","paramDefinitions","positionalParamDefinitions","paramsList","_getParamsList","positionalParamsList","_getPositionalParamsList","_printPositionalParamDetails","_getParamValueDescription","paramDefinition","type","toUpperCase","definition","isFlag","isOptional","ArgumentsParser_1","paramNameToCLA","isVariadic","paramsNameLength","defaultValue","msg","JSON","stringify","d","exports"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\cli\\HelpPrinter.ts"],"sourcesContent":["import {\n  HardhatParamDefinitions,\n  ParamDefinition,\n  ParamDefinitionsMap,\n  TasksMap,\n} from \"../../types\";\nimport { HardhatError } from \"../core/errors\";\nimport { ERRORS } from \"../core/errors-list\";\n\nimport { ArgumentsParser } from \"./ArgumentsParser\";\n\nexport class HelpPrinter {\n  constructor(\n    private readonly _programName: string,\n    private readonly _executableName: string,\n    private readonly _version: string,\n    private readonly _hardhatParamDefinitions: HardhatParamDefinitions,\n    private readonly _tasks: TasksMap\n  ) {}\n\n  public printGlobalHelp(includeSubtasks = false) {\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`\n    );\n\n    console.log(\"GLOBAL OPTIONS:\\n\");\n\n    this._printParamDetails(this._hardhatParamDefinitions);\n\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n\n    const tasksToShow: TasksMap = {};\n    for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n      if (includeSubtasks || !taskDefinition.isSubtask) {\n        tasksToShow[taskName] = taskDefinition;\n      }\n    }\n\n    const nameLength = Object.keys(tasksToShow)\n      .map((n) => n.length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(tasksToShow).sort()) {\n      const { description = \"\" } = this._tasks[name];\n\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    console.log(\"\");\n\n    console.log(\n      `To get help for a specific task run: npx ${this._executableName} help [task]\\n`\n    );\n  }\n\n  public printTaskHelp(taskName: string) {\n    const taskDefinition = this._tasks[taskName];\n\n    if (taskDefinition === undefined) {\n      throw new HardhatError(ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n        task: taskName,\n      });\n    }\n\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions,\n    } = taskDefinition;\n\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    const paramsList = this._getParamsList(paramDefinitions);\n    const positionalParamsList = this._getPositionalParamsList(\n      positionalParamDefinitions\n    );\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`\n    );\n\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n\n      this._printParamDetails(paramDefinitions);\n\n      console.log(\"\");\n    }\n\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n\n      this._printPositionalParamDetails(positionalParamDefinitions);\n\n      console.log(\"\");\n    }\n\n    console.log(`${name}: ${description}\\n`);\n\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n\n  private _getParamValueDescription<T>(paramDefinition: ParamDefinition<T>) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n\n  private _getParamsList(paramDefinitions: ParamDefinitionsMap) {\n    let paramsList = \"\";\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const { isFlag, isOptional } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      paramsList += `${ArgumentsParser.paramNameToCLA(name)}`;\n\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _getPositionalParamsList(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    let paramsList = \"\";\n\n    for (const definition of positionalParamDefinitions) {\n      const { isOptional, isVariadic, name } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n\n      paramsList += name;\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _printParamDetails(paramDefinitions: ParamDefinitionsMap) {\n    const paramsNameLength = Object.keys(paramDefinitions)\n      .map((n) => ArgumentsParser.paramNameToCLA(n).length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const { description, defaultValue, isOptional, isFlag } =\n        paramDefinitions[name];\n\n      let msg = `  ${ArgumentsParser.paramNameToCLA(name).padEnd(\n        paramsNameLength\n      )}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n  private _printPositionalParamDetails(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    const paramsNameLength = positionalParamDefinitions\n      .map((d) => d.name.length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const definition of positionalParamDefinitions) {\n      const { name, description, isOptional, defaultValue } = definition;\n\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}