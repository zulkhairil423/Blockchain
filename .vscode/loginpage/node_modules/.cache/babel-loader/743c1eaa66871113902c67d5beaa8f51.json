{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRunningHardhatCoreTests = exports.isLocalDev = exports.isHardhatInstalledLocallyOrLinked = void 0;\n\nconst packageInfo_1 = require(\"../util/packageInfo\");\n\nconst fs_utils_1 = require(\"../util/fs-utils\");\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\n\n\nfunction isHardhatInstalledLocallyOrLinked(configPath) {\n  try {\n    const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n      paths: [configPath ?? process.cwd()]\n    });\n\n    const thisPackageJson = (0, packageInfo_1.getPackageJsonPath)(); // We need to get the realpaths here, as hardhat may be linked and\n    // running with `node --preserve-symlinks`\n\n    return (0, fs_utils_1.getRealPathSync)(resolvedPackageJson) === (0, fs_utils_1.getRealPathSync)(thisPackageJson);\n  } catch {\n    return false;\n  }\n}\n\nexports.isHardhatInstalledLocallyOrLinked = isHardhatInstalledLocallyOrLinked;\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\n\nfunction isLocalDev() {\n  // TODO: This may give a false positive under yarn PnP\n  return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\n\nexports.isLocalDev = isLocalDev;\n\nfunction isRunningHardhatCoreTests() {\n  return __filename.endsWith(\".ts\");\n}\n\nexports.isRunningHardhatCoreTests = isRunningHardhatCoreTests;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;;;;;AAOA,SAAgBA,iCAAhB,CAAkDC,UAAlD,EAAqE;EACnE,IAAI;IACF,MAAMC,mBAAmB,GAAGC,OAAO,CAACC,OAAR,CAAgB,sBAAhB,EAAwC;MAClEC,KAAK,EAAE,CAACJ,UAAU,IAAIK,OAAO,CAACC,GAAR,EAAf;IAD2D,CAAxC,CAA5B;;IAIA,MAAMC,eAAe,GAAG,uCAAxB,CALE,CAOF;IACA;;IACA,OACE,gCAAgBN,mBAAhB,MAAyC,gCAAgBM,eAAhB,CAD3C;EAGD,CAZD,CAYE,MAAM;IACN,OAAO,KAAP;EACD;AACF;;AAhBDC;AAkBA;;;;AAGA,SAAgBC,UAAhB,GAA0B;EACxB;EACA,OAAOC,yBAAyB,MAAM,CAACC,UAAU,CAACC,QAAX,CAAoB,cAApB,CAAvC;AACD;;AAHDJ;;AAKA,SAAgBE,yBAAhB,GAAyC;EACvC,OAAOC,UAAU,CAACE,QAAX,CAAoB,KAApB,CAAP;AACD;;AAFDL","names":["isHardhatInstalledLocallyOrLinked","configPath","resolvedPackageJson","require","resolve","paths","process","cwd","thisPackageJson","exports","isLocalDev","isRunningHardhatCoreTests","__filename","includes","endsWith"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\core\\execution-mode.ts"],"sourcesContent":["import { getPackageJsonPath } from \"../util/packageInfo\";\nimport { getRealPathSync } from \"../util/fs-utils\";\n\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\nexport function isHardhatInstalledLocallyOrLinked(configPath?: string) {\n  try {\n    const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n      paths: [configPath ?? process.cwd()],\n    });\n\n    const thisPackageJson = getPackageJsonPath();\n\n    // We need to get the realpaths here, as hardhat may be linked and\n    // running with `node --preserve-symlinks`\n    return (\n      getRealPathSync(resolvedPackageJson) === getRealPathSync(thisPackageJson)\n    );\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\nexport function isLocalDev(): boolean {\n  // TODO: This may give a false positive under yarn PnP\n  return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\n\nexport function isRunningHardhatCoreTests(): boolean {\n  return __filename.endsWith(\".ts\");\n}\n"]},"metadata":{},"sourceType":"script"}