{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst semver = __importStar(require(\"semver\"));\n\nconst config_env_1 = require(\"../internal/core/config/config-env\");\n\nconst scripts_runner_1 = require(\"../internal/util/scripts-runner\");\n\nconst task_names_1 = require(\"./task-names\");\n\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:console\");\n(0, config_env_1.task)(task_names_1.TASK_CONSOLE, \"Opens a hardhat console\").addFlag(\"noCompile\", \"Don't compile before running this task\").setAction(async (_ref, _ref2) => {\n  let {\n    noCompile\n  } = _ref;\n  let {\n    config,\n    run,\n    hardhatArguments\n  } = _ref2;\n\n  if (!noCompile) {\n    await run(task_names_1.TASK_COMPILE, {\n      quiet: true\n    });\n  }\n\n  await fs_extra_1.default.ensureDir(config.paths.cache);\n  const historyFile = path.join(config.paths.cache, \"console-history.txt\");\n  const nodeArgs = [];\n\n  if (semver.gte(process.version, \"10.0.0\")) {\n    nodeArgs.push(\"--experimental-repl-await\");\n  }\n\n  log(`Creating a Node REPL subprocess with Hardhat's register so we can set some Node's flags`); // Running the script \"\" is like running `node`, so this starts the repl\n\n  await (0, scripts_runner_1.runScriptWithHardhat)(hardhatArguments, \"\", [], nodeArgs, {\n    NODE_REPL_HISTORY: historyFile\n  });\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AAEA,MAAMA,GAAG,GAAG,qBAAM,4BAAN,CAAZ;AAEA,uBAAKC,yBAAL,EAAmB,yBAAnB,EACGC,OADH,CACW,WADX,EACwB,wCADxB,EAEGC,SAFH,CAGI,uBAGI;EAAA,IAFF;IAAEC;EAAF,CAEE;EAAA,IADF;IAAEC,MAAF;IAAUC,GAAV;IAAeC;EAAf,CACE;;EACF,IAAI,CAACH,SAAL,EAAgB;IACd,MAAME,GAAG,CAACL,yBAAD,EAAe;MAAEO,KAAK,EAAE;IAAT,CAAf,CAAT;EACD;;EAED,MAAMC,mBAAQC,SAAR,CAAkBL,MAAM,CAACM,KAAP,CAAaC,KAA/B,CAAN;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUV,MAAM,CAACM,KAAP,CAAaC,KAAvB,EAA8B,qBAA9B,CAApB;EAEA,MAAMI,QAAQ,GAAG,EAAjB;;EACA,IAAIC,MAAM,CAACC,GAAP,CAAWC,OAAO,CAACC,OAAnB,EAA4B,QAA5B,CAAJ,EAA2C;IACzCJ,QAAQ,CAACK,IAAT,CAAc,2BAAd;EACD;;EAEDrB,GAAG,CACD,yFADC,CAAH,CAbE,CAiBF;;EACA,MAAM,2CAAqBO,gBAArB,EAAuC,EAAvC,EAA2C,EAA3C,EAA+CS,QAA/C,EAAyD;IAC7DM,iBAAiB,EAAET;EAD0C,CAAzD,CAAN;AAGD,CA3BL","names":["log","task_names_1","addFlag","setAction","noCompile","config","run","hardhatArguments","quiet","fs_extra_1","ensureDir","paths","cache","historyFile","path","join","nodeArgs","semver","gte","process","version","push","NODE_REPL_HISTORY"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\builtin-tasks\\console.ts"],"sourcesContent":["import debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport * as path from \"path\";\nimport * as semver from \"semver\";\n\nimport { task } from \"../internal/core/config/config-env\";\nimport { runScriptWithHardhat } from \"../internal/util/scripts-runner\";\n\nimport { TASK_COMPILE, TASK_CONSOLE } from \"./task-names\";\n\nconst log = debug(\"hardhat:core:tasks:console\");\n\ntask(TASK_CONSOLE, \"Opens a hardhat console\")\n  .addFlag(\"noCompile\", \"Don't compile before running this task\")\n  .setAction(\n    async (\n      { noCompile }: { noCompile: boolean },\n      { config, run, hardhatArguments }\n    ) => {\n      if (!noCompile) {\n        await run(TASK_COMPILE, { quiet: true });\n      }\n\n      await fsExtra.ensureDir(config.paths.cache);\n      const historyFile = path.join(config.paths.cache, \"console-history.txt\");\n\n      const nodeArgs = [];\n      if (semver.gte(process.version, \"10.0.0\")) {\n        nodeArgs.push(\"--experimental-repl-await\");\n      }\n\n      log(\n        `Creating a Node REPL subprocess with Hardhat's register so we can set some Node's flags`\n      );\n\n      // Running the script \"\" is like running `node`, so this starts the repl\n      await runScriptWithHardhat(hardhatArguments, \"\", [], nodeArgs, {\n        NODE_REPL_HISTORY: historyFile,\n      });\n    }\n  );\n"]},"metadata":{},"sourceType":"script"}