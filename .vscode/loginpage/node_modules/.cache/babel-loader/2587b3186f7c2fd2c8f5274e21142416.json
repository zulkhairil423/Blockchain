{"ast":null,"code":"/* globals AbortController */\n'use strict';\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody\n} = require('./body');\n\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList\n} = require('./headers');\n\nconst {\n  FinalizationRegistry\n} = require('../compat/dispatcher-weakref')();\n\nconst util = require('../core/util');\n\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util');\n\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache\n} = require('./constants');\n\nconst {\n  kEnumerableProperty\n} = util;\n\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kGuard,\n  kRealm\n} = require('./symbols');\n\nconst {\n  webidl\n} = require('./webidl');\n\nconst {\n  getGlobalOrigin\n} = require('./global');\n\nconst {\n  kHeadersList\n} = require('../core/symbols');\n\nconst assert = require('assert');\n\nlet TransformStream;\nconst kInit = Symbol('init');\nconst requestFinalizer = new FinalizationRegistry(_ref => {\n  let {\n    signal,\n    abort\n  } = _ref;\n  signal.removeEventListener('abort', abort);\n}); // https://fetch.spec.whatwg.org/#request-class\n\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (input === kInit) {\n      return;\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to construct 'Request': 1 argument required, but only ${arguments.length} present.`);\n    }\n\n    input = webidl.converters.RequestInfo(input);\n    init = webidl.converters.RequestInit(init); // TODO\n\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    }; // 1. Let request be null.\n\n    let request = null; // 2. Let fallbackMode be null.\n\n    let fallbackMode = null; // 3. Let baseURL be this’s relevant settings object’s API base URL.\n\n    const baseUrl = this[kRealm].settingsObject.baseUrl; // 4. Let signal be null.\n\n    let signal = null; // 5. If input is a string, then:\n\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      } // 3. If parsedURL includes credentials, then throw a TypeError.\n\n\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      } // 4. Set request to a new request whose URL is parsedURL.\n\n\n      request = makeRequest({\n        urlList: [parsedURL]\n      }); // 5. Set fallbackMode to \"cors\".\n\n      fallbackMode = 'cors';\n    } else {\n      // 6. Otherwise:\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request); // 8. Set request to input’s request.\n\n      request = input[kState]; // 9. Set signal to input’s signal.\n\n      signal = input[kSignal];\n    } // 7. Let origin be this’s relevant settings object’s origin.\n\n\n    const origin = this[kRealm].settingsObject.origin; // 8. Let window be \"client\".\n\n    let window = 'client'; // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    } // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n\n\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    } // 11. If init[\"window\"] exists, then set window to \"no-window\".\n\n\n    if (init.window !== undefined) {\n      window = 'no-window';\n    } // 12. Set request to a new request with the following properties:\n\n\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    }); // 13. If init is not empty, then:\n\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      } // 2. Unset request’s reload-navigation flag.\n\n\n      request.reloadNavigation = false; // 3. Unset request’s history-navigation flag.\n\n      request.historyNavigation = false; // 4. Set request’s origin to \"client\".\n\n      request.origin = 'client'; // 5. Set request’s referrer to \"client\"\n\n      request.referrer = 'client'; // 6. Set request’s referrer policy to the empty string.\n\n      request.referrerPolicy = ''; // 7. Set request’s URL to request’s current URL.\n\n      request.url = request.urlList[request.urlList.length - 1]; // 8. Set request’s URL list to « request’s URL ».\n\n      request.urlList = [request.url];\n    } // 14. If init[\"referrer\"] exists, then:\n\n\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer; // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        } // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n\n\n        request.referrer = parsedReferrer;\n      }\n    } // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n\n\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n\n      if (!referrerPolicy.includes(request.referrerPolicy)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.referrerPolicy}' is not a valid enum value of type ReferrerPolicy.`);\n      }\n    } // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n\n\n    let mode;\n\n    if (init.mode !== undefined) {\n      mode = init.mode;\n\n      if (!requestMode.includes(mode)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.mode}' is not a valid enum value of type RequestMode.`);\n      }\n    } else {\n      mode = fallbackMode;\n    } // 17. If mode is \"navigate\", then throw a TypeError.\n\n\n    if (mode === 'navigate') {\n      webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    } // 18. If mode is non-null, set request’s mode to mode.\n\n\n    if (mode != null) {\n      request.mode = mode;\n    } // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n\n\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n\n      if (!requestCredentials.includes(request.credentials)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.credentials}' is not a valid enum value of type RequestCredentials.`);\n      }\n    } // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n\n\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n\n      if (!requestCache.includes(request.cache)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.cache}' is not a valid enum value of type RequestCache.`);\n      }\n    } // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n\n\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    } // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n\n\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n\n      if (!requestRedirect.includes(request.redirect)) {\n        throw new TypeError(`Failed to construct 'Request': The provided value '${request.redirect}' is not a valid enum value of type RequestRedirect.`);\n      }\n    } // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n\n\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity);\n    } // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n\n\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    } // 25. If init[\"method\"] exists, then:\n\n\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method; // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`);\n      }\n\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`);\n      } // 3. Normalize method.\n\n\n      method = normalizeMethod(init.method); // 4. Set request’s method to method.\n\n      request.method = method;\n    } // 26. If init[\"signal\"] exists, then set signal to it.\n\n\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    } // 27. Set this’s request to request.\n\n\n    this[kState] = request; // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n    this[kSignal][kRealm] = this[kRealm]; // 29. If signal is not null, then make this’s signal follow signal.\n\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        const abort = () => ac.abort(signal.reason);\n\n        signal.addEventListener('abort', abort, {\n          once: true\n        });\n        requestFinalizer.register(this, {\n          signal,\n          abort\n        });\n      }\n    } // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n\n\n    this[kHeaders] = new Headers();\n    this[kHeaders][kHeadersList] = request.headersList;\n    this[kHeaders][kGuard] = 'request';\n    this[kHeaders][kRealm] = this[kRealm]; // 31. If this’s request’s mode is \"no-cors\", then:\n\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      } // 2. Set this’s headers’s guard to \"request-no-cors\".\n\n\n      this[kHeaders][kGuard] = 'request-no-cors';\n    } // 32. If init is not empty, then:\n\n\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders]); // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n\n      if (init.headers !== undefined) {\n        headers = init.headers;\n      } // 3. Empty this’s headers’s header list.\n\n\n      this[kHeaders][kHeadersList].clear(); // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val);\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    } // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n\n\n    const inputBody = input instanceof Request ? input[kState].body : null; // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n\n    if ((init.body !== undefined && init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    } // 35. Let initBody be null.\n\n\n    let initBody = null; // 36. If init[\"body\"] exists and is non-null, then:\n\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody; // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n\n      if (contentType && !this[kHeaders].has('content-type')) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    } // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n\n\n    const inputOrInitBody = initBody ?? inputBody; // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      } // 2. Set this’s request’s use-CORS-preflight flag.\n\n\n      request.useCORSPreflightFlag = true;\n    } // 39. Let finalBody be inputOrInitBody.\n\n\n    let finalBody = inputOrInitBody; // 40. If initBody is null and inputBody is non-null, then:\n\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      } // 2. Set finalBody to the result of creating a proxy for inputBody.\n\n\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream;\n      } // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n\n\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    } // 41. Set this’s request’s body to finalBody.\n\n\n    this[kState].body = finalBody;\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  } // Returns request’s HTTP method, which is \"GET\" by default.\n\n\n  get method() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The method getter steps are to return this’s request’s method.\n\n\n    return this[kState].method;\n  } // Returns the URL of request as a string.\n\n\n  get url() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The url getter steps are to return this’s request’s URL, serialized.\n\n\n    return this[kState].url.toString();\n  } // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n\n\n  get headers() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The headers getter steps are to return this’s headers.\n\n\n    return this[kHeaders];\n  } // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n\n\n  get destination() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The destination getter are to return this’s request’s destination.\n\n\n    return this[kState].destination;\n  } // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n\n\n  get referrer() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n\n\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    } // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n\n\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    } // Return this’s request’s referrer, serialized.\n\n\n    return this[kState].referrer.toString();\n  } // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n\n\n  get referrerPolicy() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n\n\n    return this[kState].referrerPolicy;\n  } // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n\n\n  get mode() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The mode getter steps are to return this’s request’s mode.\n\n\n    return this[kState].mode;\n  } // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n\n\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  } // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n\n\n  get cache() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The cache getter steps are to return this’s request’s cache mode.\n\n\n    return this[kState].cache;\n  } // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n\n\n  get redirect() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The redirect getter steps are to return this’s request’s redirect mode.\n\n\n    return this[kState].redirect;\n  } // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n\n\n  get integrity() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n\n\n    return this[kState].integrity;\n  } // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n\n\n  get keepalive() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The keepalive getter steps are to return this’s request’s keepalive.\n\n\n    return this[kState].keepalive;\n  } // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n\n\n  get isReloadNavigation() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n\n\n    return this[kState].reloadNavigation;\n  } // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n\n\n  get isHistoryNavigation() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n\n\n    return this[kState].historyNavigation;\n  } // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n\n\n  get signal() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // The signal getter steps are to return this’s signal.\n\n\n    return this[kSignal];\n  } // Returns a clone of request.\n\n\n  clone() {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation');\n    } // 1. If this is unusable, then throw a TypeError.\n\n\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable');\n    } // 2. Let clonedRequest be the result of cloning this’s request.\n\n\n    const clonedRequest = cloneRequest(this[kState]); // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n\n    const clonedRequestObject = new Request(kInit);\n    clonedRequestObject[kState] = clonedRequest;\n    clonedRequestObject[kRealm] = this[kRealm];\n    clonedRequestObject[kHeaders] = new Headers();\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]; // 4. Make clonedRequestObject’s signal follow this’s signal.\n\n    const ac = new AbortController();\n\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      this.signal.addEventListener('abort', () => {\n        ac.abort(this.signal.reason);\n      }, {\n        once: true\n      });\n    }\n\n    clonedRequestObject[kSignal] = ac.signal; // 4. Return clonedRequestObject.\n\n    return clonedRequestObject;\n  }\n\n}\n\nmixinBody(Request);\n\nfunction makeRequest(init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n  request.url = request.urlList[0];\n  return request;\n} // https://fetch.spec.whatwg.org/#concept-request-clone\n\n\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request,\n    body: null\n  }); // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body);\n  } // 3. Return newRequest.\n\n\n  return newRequest;\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request); // https://fetch.spec.whatwg.org/#requestinfo\n\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V);\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V);\n  }\n\n  return webidl.converters.USVString(V);\n};\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal); // https://fetch.spec.whatwg.org/#requestinit\n\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: ['', 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: ['same-origin', 'cors', 'no-cors', 'navigate', 'websocket']\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: ['omit', 'same-origin', 'include']\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: ['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached']\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: ['follow', 'error', 'manual']\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  Request,\n  makeRequest\n};","map":{"version":3,"names":["extractBody","mixinBody","cloneBody","require","Headers","fill","fillHeaders","HeadersList","FinalizationRegistry","util","isValidHTTPToken","sameOrigin","normalizeMethod","forbiddenMethods","corsSafeListedMethods","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","kEnumerableProperty","kHeaders","kSignal","kState","kGuard","kRealm","webidl","getGlobalOrigin","kHeadersList","assert","TransformStream","kInit","Symbol","requestFinalizer","signal","abort","removeEventListener","Request","constructor","input","init","arguments","length","TypeError","converters","RequestInfo","RequestInit","settingsObject","baseUrl","request","fallbackMode","parsedURL","URL","err","cause","username","password","makeRequest","urlList","origin","window","name","undefined","method","headersList","unsafeRequest","client","priority","referrer","mode","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","Object","keys","url","parsedReferrer","includes","errors","exception","header","message","String","Boolean","indexOf","toUpperCase","ac","AbortController","aborted","addEventListener","reason","once","register","headers","clear","key","val","append","inputBody","body","initBody","extractedBody","contentType","has","inputOrInitBody","source","useCORSPreflightFlag","finalBody","isDisturbed","stream","locked","identityTransform","pipeThrough","readable","toStringTag","toString","destination","isReloadNavigation","isHistoryNavigation","clone","bodyUsed","clonedRequest","cloneRequest","clonedRequestObject","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","policyContainer","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","newRequest","defineProperties","prototype","interfaceConverter","V","USVString","AbortSignal","dictionaryConverter","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/undici/lib/fetch/request.js"],"sourcesContent":["/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util')\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { kHeadersList } = require('../core/symbols')\nconst assert = require('assert')\n\nlet TransformStream\n\nconst kInit = Symbol('init')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kInit) {\n      return\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to construct 'Request': 1 argument required, but only ${arguments.length} present.`\n      )\n    }\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // TODO\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if (init.window !== undefined) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    // 13. If init is not empty, then:\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n        request.referrer = parsedReferrer\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n      if (!referrerPolicy.includes(request.referrerPolicy)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.referrerPolicy}' is not a valid enum value of type ReferrerPolicy.`\n        )\n      }\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n      if (!requestMode.includes(mode)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.mode}' is not a valid enum value of type RequestMode.`\n        )\n      }\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n      if (!requestCredentials.includes(request.credentials)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.credentials}' is not a valid enum value of type RequestCredentials.`\n        )\n      }\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n      if (!requestCache.includes(request.cache)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.cache}' is not a valid enum value of type RequestCache.`\n        )\n      }\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n      if (!requestRedirect.includes(request.redirect)) {\n        throw new TypeError(\n          `Failed to construct 'Request': The provided value '${request.redirect}' is not a valid enum value of type RequestRedirect.`\n        )\n      }\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethod(init.method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        const abort = () => ac.abort(signal.reason)\n        signal.addEventListener('abort', abort, { once: true })\n        requestFinalizer.register(this, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers()\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders])\n\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      if (init.headers !== undefined) {\n        headers = init.headers\n      }\n\n      // 3. Empty this’s headers’s header list.\n      this[kHeaders][kHeadersList].clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val)\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      ((init.body !== undefined && init.body != null) || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders].has('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 2. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  get [Symbol.toStringTag] () {\n    return this.constructor.name\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return this[kState].url.toString()\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  // Returns a clone of request.\n  clone () {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kInit)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers()\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      this.signal.addEventListener(\n        'abort',\n        () => {\n          ac.abort(this.signal.reason)\n        },\n        { once: true }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: [\n      '', 'no-referrer', 'no-referrer-when-downgrade',\n      'same-origin', 'origin', 'strict-origin',\n      'origin-when-cross-origin', 'strict-origin-when-cross-origin',\n      'unsafe-url'\n    ]\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: [\n      'same-origin', 'cors', 'no-cors', 'navigate', 'websocket'\n    ]\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: [\n      'omit', 'same-origin', 'include'\n    ]\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: [\n      'default', 'no-store', 'reload', 'no-cache', 'force-cache',\n      'only-if-cached'\n    ]\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: [\n      'follow', 'error', 'manual'\n    ]\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}