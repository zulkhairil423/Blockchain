{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc'; // TODO: Implement different loggers for different environments\n\nvar global = getGlobalObject();\n/** Prefix for logging strings */\n\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\n\nvar Logger =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n\n\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n\n  return Logger;\n}(); // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n\n\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":{"version":3,"mappings":"AAAA;AACA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,QAAhD,C,CAEA;;AACA,IAAMC,MAAM,GAAGD,eAAe,EAA9B;AAEA;;AACA,IAAME,MAAM,GAAG,gBAAf;AAEA;;AACA;AAAA;AAAA;EAIE;EACA;IACE,KAAKC,QAAL,GAAgB,KAAhB;EACD;EAED;;;EACOC,2BAAP;IACE,KAAKD,QAAL,GAAgB,KAAhB;EACD,CAFM;EAIP;;;EACOC,0BAAP;IACE,KAAKD,QAAL,GAAgB,IAAhB;EACD,CAFM;EAIP;;;EACOC,uBAAP;IAAW;;SAAA,yCAAc;MAAdC;;;IACT,IAAI,CAAC,KAAKF,QAAV,EAAoB;MAClB;IACD;;IACDJ,cAAc,CAAC;MACbE,MAAM,CAACK,OAAP,CAAeC,GAAf,CAAsBL,MAAM,YAAN,GAAgBG,IAAI,CAACG,IAAL,CAAU,GAAV,CAAtC;IACD,CAFa,CAAd;EAGD,CAPM;EASP;;;EACOJ,wBAAP;IAAY;;SAAA,yCAAc;MAAdC;;;IACV,IAAI,CAAC,KAAKF,QAAV,EAAoB;MAClB;IACD;;IACDJ,cAAc,CAAC;MACbE,MAAM,CAACK,OAAP,CAAeG,IAAf,CAAuBP,MAAM,aAAN,GAAiBG,IAAI,CAACG,IAAL,CAAU,GAAV,CAAxC;IACD,CAFa,CAAd;EAGD,CAPM;EASP;;;EACOJ,yBAAP;IAAa;;SAAA,yCAAc;MAAdC;;;IACX,IAAI,CAAC,KAAKF,QAAV,EAAoB;MAClB;IACD;;IACDJ,cAAc,CAAC;MACbE,MAAM,CAACK,OAAP,CAAeI,KAAf,CAAwBR,MAAM,cAAN,GAAkBG,IAAI,CAACG,IAAL,CAAU,GAAV,CAA1C;IACD,CAFa,CAAd;EAGD,CAPM;;EAQT;AAAC,CAhDD,G,CAkDA;;;AACAP,MAAM,CAACU,UAAP,GAAoBV,MAAM,CAACU,UAAP,IAAqB,EAAzC;AACA,IAAMC,MAAM,GAAIX,MAAM,CAACU,UAAP,CAAkBC,MAAlB,KAAwCX,MAAM,CAACU,UAAP,CAAkBC,MAAlB,GAA2B,IAAIR,MAAJ,EAAnE,CAAhB;AAEA,SAASQ,MAAT","names":["consoleSandbox","getGlobalObject","global","PREFIX","_enabled","Logger","args","console","log","join","warn","error","__SENTRY__","logger"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\utils\\src\\logger.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n"]},"metadata":{},"sourceType":"module"}