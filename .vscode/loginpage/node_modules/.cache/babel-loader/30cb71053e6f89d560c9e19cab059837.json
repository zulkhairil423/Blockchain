{"ast":null,"code":"var debug = require('debug')('eventstore:event'),\n    dotty = require('dotty'),\n    _ = require('lodash');\n/**\n * Event constructor\n * @param {EventStream} eventstream the corresponding event stream object\n * @param {Object}      event       the event object\n * @constructor\n */\n\n\nfunction Event(eventstream, event, eventMappings) {\n  if (!eventstream) {\n    var errStreamMsg = 'eventstream not injected!';\n    debug(errStreamMsg);\n    throw new Error(errStreamMsg);\n  }\n\n  if (!event) {\n    var errEvtMsg = 'event not injected!';\n    debug(errEvtMsg);\n    throw new Error(errEvtMsg);\n  }\n\n  if (!eventstream.aggregateId) {\n    var errAggIdMsg = 'eventstream.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!_.isArray(eventstream.uncommittedEvents)) {\n    var errAggIdMsg = 'eventstream.uncommittedEvents not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  eventMappings = eventMappings || {};\n  this.streamId = eventstream.aggregateId;\n  this.aggregateId = eventstream.aggregateId;\n  this.aggregate = eventstream.aggregate;\n  this.context = eventstream.context;\n  this.streamRevision = null;\n  this.commitId = null;\n  this.commitSequence = null;\n  this.commitStamp = null;\n  this.payload = event || null;\n  this.position = null;\n\n  this.applyMappings = function applyMappings() {\n    _.keys(eventMappings).forEach(function (key) {\n      if (this[key] !== undefined && this[key] !== null) {\n        dotty.put(this.payload, eventMappings[key], this[key]);\n      }\n    }.bind(this));\n  };\n\n  eventstream.uncommittedEvents.push(this);\n}\n\nmodule.exports = Event;","map":{"version":3,"names":["debug","require","dotty","_","Event","eventstream","event","eventMappings","errStreamMsg","Error","errEvtMsg","aggregateId","errAggIdMsg","isArray","uncommittedEvents","streamId","aggregate","context","streamRevision","commitId","commitSequence","commitStamp","payload","position","applyMappings","keys","forEach","key","undefined","put","bind","push","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/eventstore/lib/event.js"],"sourcesContent":["var debug = require('debug')('eventstore:event'),\n  dotty = require('dotty'),\n  _ = require('lodash');\n\n/**\n * Event constructor\n * @param {EventStream} eventstream the corresponding event stream object\n * @param {Object}      event       the event object\n * @constructor\n */\nfunction Event (eventstream, event, eventMappings) {\n  if (!eventstream) {\n    var errStreamMsg = 'eventstream not injected!';\n    debug(errStreamMsg);\n    throw new Error(errStreamMsg);\n  }\n\n  if (!event) {\n    var errEvtMsg = 'event not injected!';\n    debug(errEvtMsg);\n    throw new Error(errEvtMsg);\n  }\n\n  if (!eventstream.aggregateId) {\n    var errAggIdMsg = 'eventstream.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!_.isArray(eventstream.uncommittedEvents)) {\n    var errAggIdMsg = 'eventstream.uncommittedEvents not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  eventMappings = eventMappings || {};\n\n  this.streamId = eventstream.aggregateId;\n  this.aggregateId = eventstream.aggregateId;\n  this.aggregate = eventstream.aggregate;\n  this.context = eventstream.context;\n  this.streamRevision = null;\n  this.commitId = null;\n  this.commitSequence = null;\n  this.commitStamp = null;\n  this.payload = event || null;\n  this.position = null;\n\n  this.applyMappings = function applyMappings() {\n    _.keys(eventMappings).forEach(function (key) {\n      if (this[key] !== undefined && this[key] !== null) {\n        dotty.put(this.payload, eventMappings[key], this[key]);\n      }\n    }.bind(this));\n  };\n\n  eventstream.uncommittedEvents.push(this);\n}\n\nmodule.exports = Event;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;AAAA,IACEC,KAAK,GAAGD,OAAO,CAAC,OAAD,CADjB;AAAA,IAEEE,CAAC,GAAGF,OAAO,CAAC,QAAD,CAFb;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAgBC,WAAhB,EAA6BC,KAA7B,EAAoCC,aAApC,EAAmD;EACjD,IAAI,CAACF,WAAL,EAAkB;IAChB,IAAIG,YAAY,GAAG,2BAAnB;IACAR,KAAK,CAACQ,YAAD,CAAL;IACA,MAAM,IAAIC,KAAJ,CAAUD,YAAV,CAAN;EACD;;EAED,IAAI,CAACF,KAAL,EAAY;IACV,IAAII,SAAS,GAAG,qBAAhB;IACAV,KAAK,CAACU,SAAD,CAAL;IACA,MAAM,IAAID,KAAJ,CAAUC,SAAV,CAAN;EACD;;EAED,IAAI,CAACL,WAAW,CAACM,WAAjB,EAA8B;IAC5B,IAAIC,WAAW,GAAG,uCAAlB;IACAZ,KAAK,CAACY,WAAD,CAAL;IACA,MAAM,IAAIH,KAAJ,CAAUG,WAAV,CAAN;EACD;;EAED,IAAI,CAACT,CAAC,CAACU,OAAF,CAAUR,WAAW,CAACS,iBAAtB,CAAL,EAA+C;IAC7C,IAAIF,WAAW,GAAG,6CAAlB;IACAZ,KAAK,CAACY,WAAD,CAAL;IACA,MAAM,IAAIH,KAAJ,CAAUG,WAAV,CAAN;EACD;;EAEDL,aAAa,GAAGA,aAAa,IAAI,EAAjC;EAEA,KAAKQ,QAAL,GAAgBV,WAAW,CAACM,WAA5B;EACA,KAAKA,WAAL,GAAmBN,WAAW,CAACM,WAA/B;EACA,KAAKK,SAAL,GAAiBX,WAAW,CAACW,SAA7B;EACA,KAAKC,OAAL,GAAeZ,WAAW,CAACY,OAA3B;EACA,KAAKC,cAAL,GAAsB,IAAtB;EACA,KAAKC,QAAL,GAAgB,IAAhB;EACA,KAAKC,cAAL,GAAsB,IAAtB;EACA,KAAKC,WAAL,GAAmB,IAAnB;EACA,KAAKC,OAAL,GAAehB,KAAK,IAAI,IAAxB;EACA,KAAKiB,QAAL,GAAgB,IAAhB;;EAEA,KAAKC,aAAL,GAAqB,SAASA,aAAT,GAAyB;IAC5CrB,CAAC,CAACsB,IAAF,CAAOlB,aAAP,EAAsBmB,OAAtB,CAA8B,UAAUC,GAAV,EAAe;MAC3C,IAAI,KAAKA,GAAL,MAAcC,SAAd,IAA2B,KAAKD,GAAL,MAAc,IAA7C,EAAmD;QACjDzB,KAAK,CAAC2B,GAAN,CAAU,KAAKP,OAAf,EAAwBf,aAAa,CAACoB,GAAD,CAArC,EAA4C,KAAKA,GAAL,CAA5C;MACD;IACF,CAJ6B,CAI5BG,IAJ4B,CAIvB,IAJuB,CAA9B;EAKD,CAND;;EAQAzB,WAAW,CAACS,iBAAZ,CAA8BiB,IAA9B,CAAmC,IAAnC;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB7B,KAAjB"},"metadata":{},"sourceType":"script"}