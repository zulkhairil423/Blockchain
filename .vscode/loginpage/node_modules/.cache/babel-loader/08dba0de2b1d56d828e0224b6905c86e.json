{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flagParallelChildren = exports.createParentTaskProfile = exports.completeTaskProfile = exports.createTaskProfile = void 0;\n\nfunction createTaskProfile(name) {\n  return {\n    name,\n    start: process.hrtime.bigint(),\n    children: []\n  };\n}\n\nexports.createTaskProfile = createTaskProfile;\n\nfunction completeTaskProfile(taskProfile) {\n  taskProfile.end = process.hrtime.bigint();\n}\n\nexports.completeTaskProfile = completeTaskProfile;\n\nfunction createParentTaskProfile(taskProfile) {\n  return createTaskProfile(`super::${taskProfile.name}`);\n}\n\nexports.createParentTaskProfile = createParentTaskProfile;\n/**\n * Sets `parallel` to `true` to any children that was running at the same time\n * of another.\n *\n * We assume `children[]` is in chronological `start` order.\n */\n\nfunction flagParallelChildren(profile) {\n  let isParentParallel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isParentParallel) {\n    profile.parallel = true;\n\n    for (const child of profile.children) {\n      child.parallel = true;\n    }\n  } else {\n    for (const [i, child] of profile.children.entries()) {\n      if (i === 0) {\n        continue;\n      }\n\n      const prevChild = profile.children[i - 1];\n\n      if (child.start < prevChild.end) {\n        prevChild.parallel = true;\n        child.parallel = true;\n      }\n    }\n  }\n\n  for (const child of profile.children) {\n    flagParallelChildren(child, child.parallel);\n  }\n}\n\nexports.flagParallelChildren = flagParallelChildren;","map":{"version":3,"mappings":";;;;;;;AAQA,SAAgBA,iBAAhB,CAAkCC,IAAlC,EAA8C;EAC5C,OAAO;IACLA,IADK;IAELC,KAAK,EAAEC,OAAO,CAACC,MAAR,CAAeC,MAAf,EAFF;IAGLC,QAAQ,EAAE;EAHL,CAAP;AAKD;;AANDC;;AAQA,SAAgBC,mBAAhB,CAAoCC,WAApC,EAA4D;EAC1DA,WAAW,CAACC,GAAZ,GAAkBP,OAAO,CAACC,MAAR,CAAeC,MAAf,EAAlB;AACD;;AAFDE;;AAIA,SAAgBI,uBAAhB,CAAwCF,WAAxC,EAAgE;EAC9D,OAAOT,iBAAiB,CAAC,UAAUS,WAAW,CAACR,IAAI,EAA3B,CAAxB;AACD;;AAFDM;AAIA;;;;;;;AAMA,SAAgBK,oBAAhB,CACEC,OADF,EAE0B;EAAA,IAAxBC,gBAAwB,uEAAL,KAAK;;EAExB,IAAIA,gBAAJ,EAAsB;IACpBD,OAAO,CAACE,QAAR,GAAmB,IAAnB;;IACA,KAAK,MAAMC,KAAX,IAAoBH,OAAO,CAACP,QAA5B,EAAsC;MACpCU,KAAK,CAACD,QAAN,GAAiB,IAAjB;IACD;EACF,CALD,MAKO;IACL,KAAK,MAAM,CAACE,CAAD,EAAID,KAAJ,CAAX,IAAyBH,OAAO,CAACP,QAAR,CAAiBY,OAAjB,EAAzB,EAAqD;MACnD,IAAID,CAAC,KAAK,CAAV,EAAa;QACX;MACD;;MACD,MAAME,SAAS,GAAGN,OAAO,CAACP,QAAR,CAAiBW,CAAC,GAAG,CAArB,CAAlB;;MACA,IAAID,KAAK,CAACd,KAAN,GAAciB,SAAS,CAACT,GAA5B,EAAkC;QAChCS,SAAS,CAACJ,QAAV,GAAqB,IAArB;QACAC,KAAK,CAACD,QAAN,GAAiB,IAAjB;MACD;IACF;EACF;;EAED,KAAK,MAAMC,KAAX,IAAoBH,OAAO,CAACP,QAA5B,EAAsC;IACpCM,oBAAoB,CAACI,KAAD,EAAQA,KAAK,CAACD,QAAd,CAApB;EACD;AACF;;AAzBDR","names":["createTaskProfile","name","start","process","hrtime","bigint","children","exports","completeTaskProfile","taskProfile","end","createParentTaskProfile","flagParallelChildren","profile","isParentParallel","parallel","child","i","entries","prevChild"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\core\\task-profiling.ts"],"sourcesContent":["export interface TaskProfile {\n  name: string;\n  start: bigint;\n  end?: bigint;\n  children: TaskProfile[];\n  parallel?: boolean;\n}\n\nexport function createTaskProfile(name: string): TaskProfile {\n  return {\n    name,\n    start: process.hrtime.bigint(),\n    children: [],\n  };\n}\n\nexport function completeTaskProfile(taskProfile: TaskProfile) {\n  taskProfile.end = process.hrtime.bigint();\n}\n\nexport function createParentTaskProfile(taskProfile: TaskProfile): TaskProfile {\n  return createTaskProfile(`super::${taskProfile.name}`);\n}\n\n/**\n * Sets `parallel` to `true` to any children that was running at the same time\n * of another.\n *\n * We assume `children[]` is in chronological `start` order.\n */\nexport function flagParallelChildren(\n  profile: TaskProfile,\n  isParentParallel = false\n) {\n  if (isParentParallel) {\n    profile.parallel = true;\n    for (const child of profile.children) {\n      child.parallel = true;\n    }\n  } else {\n    for (const [i, child] of profile.children.entries()) {\n      if (i === 0) {\n        continue;\n      }\n      const prevChild = profile.children[i - 1];\n      if (child.start < prevChild.end!) {\n        prevChild.parallel = true;\n        child.parallel = true;\n      }\n    }\n  }\n\n  for (const child of profile.children) {\n    flagParallelChildren(child, child.parallel);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}