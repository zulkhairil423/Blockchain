{"ast":null,"code":"import { getCurrentHub } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nimport { logAndExitProcess } from '../handlers';\n/** Global Promise Rejection handler */\n\nvar OnUnhandledRejection =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function OnUnhandledRejection(_options) {\n    if (_options === void 0) {\n      _options = {\n        mode: 'warn'\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = OnUnhandledRejection.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUnhandledRejection.prototype.setupOnce = function () {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  };\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n\n\n  OnUnhandledRejection.prototype.sendUnhandledPromise = function (reason, promise) {\n    var hub = getCurrentHub();\n\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n\n      return;\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n\n    var context = promise.domain && promise.domain.sentryContext || {};\n    hub.withScope(function (scope) {\n      scope.setExtra('unhandledPromiseRejection', true); // Preserve backwards compatibility with raven-node for now\n\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n\n      hub.captureException(reason, {\n        originalException: promise\n      });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n    this._handleRejection(reason);\n  };\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  OnUnhandledRejection.prototype._handleRejection = function (reason) {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    var rejectionWarning = 'This error originated either by ' + 'throwing inside of an async function without a catch block, ' + 'or by rejecting a promise which was not handled with .catch().' + ' The promise rejected with the reason:';\n    /* eslint-disable no-console */\n\n    if (this._options.mode === 'warn') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUnhandledRejection.id = 'OnUnhandledRejection';\n  return OnUnhandledRejection;\n}();\n\nexport { OnUnhandledRejection };","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAqC,cAArC;AAEA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,iBAAT,QAAkC,aAAlC;AAIA;;AACA;AAAA;AAAA;EAWE;;;EAGA,8BACmBC,QADnB,EAOsB;IANH;MAAAA;QAMXC,IAAI,EAAE;MANK;IAMG;;IANH;IATnB;;;;IAGO,YAAeC,oBAAoB,CAACC,EAApC;EAaH;EAEJ;;;;;EAGOD,2CAAP;IACEE,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkB,oBAAlB,EAAwC,KAAKC,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAAxC;EACD,CAFM;EAIP;;;;;EAKA;;;EACON,sDAAP,UAA4BO,MAA5B,EAAyCC,OAAzC,EAAqD;IACnD,IAAMC,GAAG,GAAGd,aAAa,EAAzB;;IAEA,IAAI,CAACc,GAAG,CAACC,cAAJ,CAAmBV,oBAAnB,CAAL,EAA+C;MAC7C,KAAKW,gBAAL,CAAsBJ,MAAtB;;MACA;IACD;IAED;;;IACA,IAAMK,OAAO,GAAIJ,OAAO,CAACK,MAAR,IAAkBL,OAAO,CAACK,MAAR,CAAeC,aAAlC,IAAoD,EAApE;IAEAL,GAAG,CAACM,SAAJ,CAAc,UAACC,KAAD,EAAa;MACzBA,KAAK,CAACC,QAAN,CAAe,2BAAf,EAA4C,IAA5C,EADyB,CAGzB;;MACA,IAAIL,OAAO,CAACM,IAAZ,EAAkB;QAChBF,KAAK,CAACG,OAAN,CAAcP,OAAO,CAACM,IAAtB;MACD;;MACD,IAAIN,OAAO,CAACQ,IAAZ,EAAkB;QAChBJ,KAAK,CAACK,OAAN,CAAcT,OAAO,CAACQ,IAAtB;MACD;;MACD,IAAIR,OAAO,CAACU,KAAZ,EAAmB;QACjBN,KAAK,CAACO,SAAN,CAAgBX,OAAO,CAACU,KAAxB;MACD;;MAEDb,GAAG,CAACe,gBAAJ,CAAqBjB,MAArB,EAA6B;QAAEkB,iBAAiB,EAAEjB;MAArB,CAA7B;IACD,CAfD;IAgBA;;IAEA,KAAKG,gBAAL,CAAsBJ,MAAtB;EACD,CA9BM;EAgCP;;;EAGA;;;EACQP,kDAAR,UAAyBO,MAAzB,EAAoC;IAClC;IACA,IAAMmB,gBAAgB,GACpB,qCACA,8DADA,GAEA,gEAFA,GAGA,wCAJF;IAMA;;IACA,IAAI,KAAK5B,QAAL,CAAcC,IAAd,KAAuB,MAA3B,EAAmC;MACjCH,cAAc,CAAC;QACb+B,OAAO,CAACC,IAAR,CAAaF,gBAAb,EADa,CAEb;;QACAC,OAAO,CAACE,KAAR,CAActB,MAAM,IAAIA,MAAM,CAACuB,KAAjB,GAAyBvB,MAAM,CAACuB,KAAhC,GAAwCvB,MAAtD;MACD,CAJa,CAAd;IAKD,CAND,MAMO,IAAI,KAAKT,QAAL,CAAcC,IAAd,KAAuB,QAA3B,EAAqC;MAC1CH,cAAc,CAAC;QACb+B,OAAO,CAACC,IAAR,CAAaF,gBAAb;MACD,CAFa,CAAd;MAGA7B,iBAAiB,CAACU,MAAD,CAAjB;IACD;IACD;;EACD,CAtBO;EAxER;;;;;EAGcP,0BAAa,sBAAb;EA4FhB;AAAC,CAhGD;;SAAaA","names":["getCurrentHub","consoleSandbox","logAndExitProcess","_options","mode","OnUnhandledRejection","id","global","process","on","sendUnhandledPromise","bind","reason","promise","hub","getIntegration","_handleRejection","context","domain","sentryContext","withScope","scope","setExtra","user","setUser","tags","setTags","extra","setExtras","captureException","originalException","rejectionWarning","console","warn","error","stack"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\integrations\\onunhandledrejection.ts"],"sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nimport { logAndExitProcess } from '../handlers';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\n/** Global Promise Rejection handler */\nexport class OnUnhandledRejection implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'OnUnhandledRejection';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = OnUnhandledRejection.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      /**\n       * Option deciding what to do after capturing unhandledRejection,\n       * that mimicks behavior of node's --unhandled-rejection flag.\n       */\n      mode: UnhandledRejectionMode;\n    } = { mode: 'warn' },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  }\n\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n  public sendUnhandledPromise(reason: any, promise: any): void {\n    const hub = getCurrentHub();\n\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const context = (promise.domain && promise.domain.sentryContext) || {};\n\n    hub.withScope((scope: Scope) => {\n      scope.setExtra('unhandledPromiseRejection', true);\n\n      // Preserve backwards compatibility with raven-node for now\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n\n      hub.captureException(reason, { originalException: promise });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n    this._handleRejection(reason);\n  }\n\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _handleRejection(reason: any): void {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    const rejectionWarning =\n      'This error originated either by ' +\n      'throwing inside of an async function without a catch block, ' +\n      'or by rejecting a promise which was not handled with .catch().' +\n      ' The promise rejected with the reason:';\n\n    /* eslint-disable no-console */\n    if (this._options.mode === 'warn') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n  }\n}\n"]},"metadata":{},"sourceType":"module"}