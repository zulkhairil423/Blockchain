{"ast":null,"code":"'use strict';\n\nconst {\n  isBlobLike,\n  toUSVString,\n  makeIterator\n} = require('./util');\n\nconst {\n  kState\n} = require('./symbols');\n\nconst {\n  File,\n  FileLike,\n  isFileLike\n} = require('./file');\n\nconst {\n  webidl\n} = require('./webidl');\n\nconst {\n  Blob\n} = require('buffer'); // https://xhr.spec.whatwg.org/#formdata\n\n\nclass FormData {\n  static name = 'FormData';\n\n  constructor(form) {\n    if (arguments.length > 0 && form != null) {\n      webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['null']\n      });\n    }\n\n    this[kState] = [];\n  }\n\n  append(name, value) {\n    let filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n    } // 1. Let value be value if given; otherwise blobValue.\n\n\n    name = webidl.converters.USVString(name);\n    value = isBlobLike(value) ? webidl.converters.Blob(value, {\n      strict: false\n    }) : webidl.converters.USVString(value);\n    filename = arguments.length === 3 ? webidl.converters.USVString(filename) : undefined; // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n\n    const entry = makeEntry(name, value, filename); // 3. Append entry to this’s entry list.\n\n    this[kState].push(entry);\n  }\n\n  delete(name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'delete' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    name = webidl.converters.USVString(name); // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n\n    const next = [];\n\n    for (const entry of this[kState]) {\n      if (entry.name !== name) {\n        next.push(entry);\n      }\n    }\n\n    this[kState] = next;\n  }\n\n  get(name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'get' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    name = webidl.converters.USVString(name); // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n\n    const idx = this[kState].findIndex(entry => entry.name === name);\n\n    if (idx === -1) {\n      return null;\n    } // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n\n\n    return this[kState][idx].value;\n  }\n\n  getAll(name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'getAll' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    name = webidl.converters.USVString(name); // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n\n    return this[kState].filter(entry => entry.name === name).map(entry => entry.value);\n  }\n\n  has(name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'has' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);\n    }\n\n    name = webidl.converters.USVString(name); // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n\n    return this[kState].findIndex(entry => entry.name === name) !== -1;\n  }\n\n  set(name, value) {\n    let filename = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n    } // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n    // 1. Let value be value if given; otherwise blobValue.\n\n\n    name = webidl.converters.USVString(name);\n    value = isBlobLike(value) ? webidl.converters.Blob(value, {\n      strict: false\n    }) : webidl.converters.USVString(value);\n    filename = arguments.length === 3 ? toUSVString(filename) : undefined; // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n\n    const entry = makeEntry(name, value, filename); // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n\n    const idx = this[kState].findIndex(entry => entry.name === name);\n\n    if (idx !== -1) {\n      this[kState] = [...this[kState].slice(0, idx), entry, ...this[kState].slice(idx + 1).filter(entry => entry.name !== name)];\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n  entries() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return makeIterator(makeIterable(this[kState], 'entries'), 'FormData');\n  }\n\n  keys() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return makeIterator(makeIterable(this[kState], 'keys'), 'FormData');\n  }\n\n  values() {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return makeIterator(makeIterable(this[kState], 'values'), 'FormData');\n  }\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n\n\n  forEach(callbackFn) {\n    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis;\n\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(`Failed to execute 'forEach' on 'FormData': 1 argument required, but only ${arguments.length} present.`);\n    }\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\");\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this]);\n    }\n  }\n\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries;\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\n\nfunction makeEntry(name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8'); // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8');\n  } else {\n    // 3. Otherwise:\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob ? new File([value], 'blob', {\n        type: value.type\n      }) : new FileLike(value, 'blob', {\n        type: value.type\n      });\n    } // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n\n\n    if (filename !== undefined) {\n      value = value instanceof File ? new File([value], filename, {\n        type: value.type\n      }) : new FileLike(value, filename, {\n        type: value.type\n      });\n    }\n  } // 4. Return an entry whose name is name and whose value is value.\n\n\n  return {\n    name,\n    value\n  };\n}\n\nfunction* makeIterable(entries, type) {\n  // The value pairs to iterate over are this’s entry list’s entries\n  // with the key being the name and the value being the value.\n  for (const {\n    name,\n    value\n  } of entries) {\n    if (type === 'entries') {\n      yield [name, value];\n    } else if (type === 'values') {\n      yield value;\n    } else {\n      yield name;\n    }\n  }\n}\n\nmodule.exports = {\n  FormData\n};","map":{"version":3,"names":["isBlobLike","toUSVString","makeIterator","require","kState","File","FileLike","isFileLike","webidl","Blob","FormData","name","constructor","form","arguments","length","errors","conversionFailed","prefix","argument","types","append","value","filename","undefined","TypeError","converters","USVString","strict","entry","makeEntry","push","delete","next","get","idx","findIndex","getAll","filter","map","has","set","slice","Symbol","toStringTag","entries","makeIterable","keys","values","forEach","callbackFn","thisArg","globalThis","key","apply","prototype","iterator","Buffer","from","toString","type","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/undici/lib/fetch/formdata.js"],"sourcesContent":["'use strict'\n\nconst { isBlobLike, toUSVString, makeIterator } = require('./util')\nconst { kState } = require('./symbols')\nconst { File, FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { Blob } = require('buffer')\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  static name = 'FormData'\n\n  constructor (form) {\n    if (arguments.length > 0 && form != null) {\n      webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['null']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        `Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'delete' on 'FormData': 1 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    name = webidl.converters.USVString(name)\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    const next = []\n    for (const entry of this[kState]) {\n      if (entry.name !== name) {\n        next.push(entry)\n      }\n    }\n\n    this[kState] = next\n  }\n\n  get (name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'get' on 'FormData': 1 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'getAll' on 'FormData': 1 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'has' on 'FormData': 1 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    name = webidl.converters.USVString(name)\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\n        `Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`\n      )\n    }\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? toUSVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  get [Symbol.toStringTag] () {\n    return this.constructor.name\n  }\n\n  entries () {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return makeIterator(\n      makeIterable(this[kState], 'entries'),\n      'FormData'\n    )\n  }\n\n  keys () {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return makeIterator(\n      makeIterable(this[kState], 'keys'),\n      'FormData'\n    )\n  }\n\n  values () {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return makeIterator(\n      makeIterable(this[kState], 'values'),\n      'FormData'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    if (!(this instanceof FormData)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\n        `Failed to execute 'forEach' on 'FormData': 1 argument required, but only ${arguments.length} present.`\n      )\n    }\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8')\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8')\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      value = value instanceof File\n        ? new File([value], filename, { type: value.type })\n        : new FileLike(value, filename, { type: value.type })\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nfunction * makeIterable (entries, type) {\n  // The value pairs to iterate over are this’s entry list’s entries\n  // with the key being the name and the value being the value.\n  for (const { name, value } of entries) {\n    if (type === 'entries') {\n      yield [name, value]\n    } else if (type === 'values') {\n      yield value\n    } else {\n      yield name\n    }\n  }\n}\n\nmodule.exports = { FormData }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}