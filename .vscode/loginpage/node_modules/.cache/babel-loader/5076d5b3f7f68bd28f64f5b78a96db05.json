{"ast":null,"code":"import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\nvar global = getGlobalObject();\n/**\n * Default function implementing pageload and navigation transactions\n */\n\nexport function defaultRoutingInstrumentation(startTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  var startingUrl = global.location.href;\n  var activeTransaction;\n\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: function (_a) {\n        var to = _a.to,\n            from = _a.from;\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n\n          if (activeTransaction) {\n            logger.log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op); // If there's an open transaction on the scope, we need to finish it before creating an new one.\n\n            activeTransaction.finish();\n          }\n\n          activeTransaction = startTransaction({\n            name: global.location.pathname,\n            op: 'navigation'\n          });\n        }\n      },\n      type: 'history'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,yBAAT,EAAoCC,eAApC,EAAqDC,MAArD,QAAmE,eAAnE;AAEA,IAAMC,MAAM,GAAGF,eAAe,EAA9B;AAEA;;;;AAGA,OAAM,SAAUG,6BAAV,CACJC,gBADI,EAEJC,0BAFI,EAGJC,gCAHI,EAG4C;EADhD;IAAAD;EAA0C;;EAC1C;IAAAC;EAAgD;;EAEhD,IAAI,CAACJ,MAAD,IAAW,CAACA,MAAM,CAACK,QAAvB,EAAiC;IAC/BN,MAAM,CAACO,IAAP,CAAY,sEAAZ;IACA;EACD;;EAED,IAAIC,WAAW,GAAuBP,MAAM,CAACK,QAAP,CAAgBG,IAAtD;EAEA,IAAIC,iBAAJ;;EACA,IAAIN,0BAAJ,EAAgC;IAC9BM,iBAAiB,GAAGP,gBAAgB,CAAC;MAAEQ,IAAI,EAAEV,MAAM,CAACK,QAAP,CAAgBM,QAAxB;MAAkCC,EAAE,EAAE;IAAtC,CAAD,CAApC;EACD;;EAED,IAAIR,gCAAJ,EAAsC;IACpCP,yBAAyB,CAAC;MACxBgB,QAAQ,EAAE,UAACC,EAAD,EAA4C;YAAzCC;YAAIC;QACf;;;;;;;;;;QASA,IAAIA,IAAI,KAAKC,SAAT,IAAsBV,WAAtB,IAAqCA,WAAW,CAACW,OAAZ,CAAoBH,EAApB,MAA4B,CAAC,CAAtE,EAAyE;UACvER,WAAW,GAAGU,SAAd;UACA;QACD;;QAED,IAAID,IAAI,KAAKD,EAAb,EAAiB;UACfR,WAAW,GAAGU,SAAd;;UACA,IAAIR,iBAAJ,EAAuB;YACrBV,MAAM,CAACoB,GAAP,CAAW,sDAAoDV,iBAAiB,CAACG,EAAjF,EADqB,CAErB;;YACAH,iBAAiB,CAACW,MAAlB;UACD;;UACDX,iBAAiB,GAAGP,gBAAgB,CAAC;YAAEQ,IAAI,EAAEV,MAAM,CAACK,QAAP,CAAgBM,QAAxB;YAAkCC,EAAE,EAAE;UAAtC,CAAD,CAApC;QACD;MACF,CAzBuB;MA0BxBS,IAAI,EAAE;IA1BkB,CAAD,CAAzB;EA4BD;AACF","names":["addInstrumentationHandler","getGlobalObject","logger","global","defaultRoutingInstrumentation","startTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","location","warn","startingUrl","href","activeTransaction","name","pathname","op","callback","_a","to","from","undefined","indexOf","log","finish","type"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\browser\\router.ts"],"sourcesContent":["import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function defaultRoutingInstrumentation<T extends Transaction>(\n  startTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: ({ to, from }: { to: string; from?: string }) => {\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n          if (activeTransaction) {\n            logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n            // If there's an open transaction on the scope, we need to finish it before creating an new one.\n            activeTransaction.finish();\n          }\n          activeTransaction = startTransaction({ name: global.location.pathname, op: 'navigation' });\n        }\n      },\n      type: 'history',\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}