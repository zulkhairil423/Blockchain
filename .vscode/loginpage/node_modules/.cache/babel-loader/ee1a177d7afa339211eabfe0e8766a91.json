{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\n\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n\n    const buf = concatBytes(...output);\n    return concatBytes(encodeLength(buf.length, 192), buf);\n  }\n\n  const inputBuf = toBytes(input);\n\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf;\n  }\n\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\n\nfunction safeSlice(input, start, end) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n  }\n\n  return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\n\n\nfunction decodeLength(v) {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseHexByte(bytesToHex(v));\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Uint8Array.from([len + offset]);\n  }\n\n  const hexLength = numberToHex(len);\n  const lLength = hexLength.length / 2;\n  const firstByte = numberToHex(offset + 55 + lLength);\n  return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\n\nfunction decode(input) {\n  let stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (typeof input === 'undefined' || input === null || input.length === 0) {\n    return Uint8Array.from([]);\n  }\n\n  const inputBytes = toBytes(input);\n\n  const decoded = _decode(inputBytes);\n\n  if (stream) {\n    return decoded;\n  }\n\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero');\n  }\n\n  return decoded.data;\n}\n\nexports.decode = decode;\n/** Decode an input with RLP */\n\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([]);\n    } else {\n      data = safeSlice(input, 1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n    }\n\n    return {\n      data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n\n    length = decodeLength(safeSlice(input, 1, llength));\n\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n\n    data = safeSlice(input, llength, length + llength);\n    return {\n      data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = safeSlice(input, 1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = decodeLength(safeSlice(input, 1, llength));\n\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short');\n    }\n\n    const totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data');\n    }\n\n    innerRemainder = safeSlice(input, llength, totalLength);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n\nconst cachedHexes = Array.from({\n  length: 256\n}, (_v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction parseHexByte(hexByte) {\n  const byte = Number.parseInt(hexByte, 16);\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence');\n  return byte;\n} // Caching slows it down 2-3x\n\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    array[i] = parseHexByte(hex.slice(j, j + 2));\n  }\n\n  return array;\n}\n/** Concatenates two Uint8Arrays into one. */\n\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nfunction utf8ToBytes(utf) {\n  return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\n\n\nfunction numberToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n\n  const hex = integer.toString(16);\n  return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\n\n\nfunction padToEven(a) {\n  return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\n\n\nfunction isHexPrefixed(str) {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\n\n\nfunction toBytes(v) {\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)));\n    }\n\n    return utf8ToBytes(v);\n  }\n\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([]);\n    }\n\n    return hexToBytes(numberToHex(v));\n  }\n\n  if (v === null || v === undefined) {\n    return Uint8Array.from([]);\n  }\n\n  throw new Error('toBytes: received unsupported type ' + typeof v);\n}\n\nexports.utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes\n};\nexports.RLP = {\n  encode,\n  decode\n};","map":{"version":3,"mappings":"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","names":["encode","input","Array","isArray","output","i","length","push","buf","concatBytes","encodeLength","inputBuf","toBytes","exports","safeSlice","start","end","Error","slice","decodeLength","v","parseHexByte","bytesToHex","len","offset","Uint8Array","from","hexLength","numberToHex","lLength","firstByte","hexToBytes","decode","stream","inputBytes","decoded","_decode","remainder","data","llength","innerRemainder","d","totalLength","cachedHexes","_v","toString","padStart","uint8a","hex","hexByte","byte","Number","parseInt","isNaN","TypeError","array","j","arrays","reduce","a","arr","result","pad","set","utf8ToBytes","utf","TextEncoder","integer","padToEven","isHexPrefixed","str","stripHexPrefix","undefined"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@nomicfoundation\\ethereumjs-rlp\\src\\index.ts"],"sourcesContent":["export type Input = string | number | bigint | Uint8Array | Array<Input> | null | undefined\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\nexport interface Decoded {\n  data: Uint8Array | NestedUint8Array\n  remainder: Uint8Array\n}\n\n/**\n * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input: Input): Uint8Array {\n  if (Array.isArray(input)) {\n    const output: Uint8Array[] = []\n    for (let i = 0; i < input.length; i++) {\n      output.push(encode(input[i]))\n    }\n    const buf = concatBytes(...output)\n    return concatBytes(encodeLength(buf.length, 192), buf)\n  }\n  const inputBuf = toBytes(input)\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf)\n}\n\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input: Uint8Array, start: number, end: number) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds')\n  }\n  return input.slice(start, end)\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v: Uint8Array): number {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros')\n  }\n  return parseHexByte(bytesToHex(v))\n}\n\nfunction encodeLength(len: number, offset: number): Uint8Array {\n  if (len < 56) {\n    return Uint8Array.from([len + offset])\n  }\n  const hexLength = numberToHex(len)\n  const lLength = hexLength.length / 2\n  const firstByte = numberToHex(offset + 55 + lLength)\n  return Uint8Array.from(hexToBytes(firstByte + hexLength))\n}\n\n/**\n * RLP Decoding based on https://eth.wiki/en/fundamentals/rlp\n * @param input Will be converted to Uint8Array\n * @param stream Is the input a stream (false by default)\n * @returns decoded Array of Uint8Arrays containing the original message\n **/\nexport function decode(input: Input, stream?: false): Uint8Array | NestedUint8Array\nexport function decode(input: Input, stream?: true): Decoded\nexport function decode(input: Input, stream = false): Uint8Array | NestedUint8Array | Decoded {\n  if (typeof input === 'undefined' || input === null || (input as any).length === 0) {\n    return Uint8Array.from([])\n  }\n\n  const inputBytes = toBytes(input)\n  const decoded = _decode(inputBytes)\n\n  if (stream) {\n    return decoded\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero')\n  }\n\n  return decoded.data\n}\n\n/** Decode an input with RLP */\nfunction _decode(input: Uint8Array): Decoded {\n  let length: number, llength: number, data: Uint8Array, innerRemainder: Uint8Array, d: Decoded\n  const decoded = []\n  const firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([])\n    } else {\n      data = safeSlice(input, 1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed')\n    }\n\n    return {\n      data,\n      remainder: input.slice(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length')\n    }\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55')\n    }\n    data = safeSlice(input, llength, length + llength)\n\n    return {\n      data,\n      remainder: input.slice(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = safeSlice(input, 1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length),\n    }\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short')\n    }\n    const totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data')\n    }\n\n    innerRemainder = safeSlice(input, llength, totalLength)\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength),\n    }\n  }\n}\n\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'))\nfunction bytesToHex(uint8a: Uint8Array): string {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = ''\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]]\n  }\n  return hex\n}\n\nfunction parseHexByte(hexByte: string): number {\n  const byte = Number.parseInt(hexByte, 16)\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence')\n  return byte\n}\n\n// Caching slows it down 2-3x\nfunction hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex)\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex')\n  const array = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    array[i] = parseHexByte(hex.slice(j, j + 2))\n  }\n  return array\n}\n\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (arrays.length === 1) return arrays[0]\n  const length = arrays.reduce((a, arr) => a + arr.length, 0)\n  const result = new Uint8Array(length)\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i]\n    result.set(arr, pad)\n    pad += arr.length\n  }\n  return result\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any\ndeclare const TextDecoder: any\n\nfunction utf8ToBytes(utf: string): Uint8Array {\n  return new TextEncoder().encode(utf)\n}\n\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer: number | bigint): string {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!')\n  }\n  const hex = integer.toString(16)\n  return hex.length % 2 ? `0${hex}` : hex\n}\n\n/** Pad a string to be even */\nfunction padToEven(a: string): string {\n  return a.length % 2 ? `0${a}` : a\n}\n\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str: string): boolean {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x'\n}\n\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/** Transform anything into a Uint8Array */\nfunction toBytes(v: Input): Uint8Array {\n  if (v instanceof Uint8Array) {\n    return v\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)))\n    }\n    return utf8ToBytes(v)\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([])\n    }\n    return hexToBytes(numberToHex(v))\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([])\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v)\n}\n\nexport const utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes,\n}\n\nexport const RLP = { encode, decode }\n"]},"metadata":{},"sourceType":"script"}