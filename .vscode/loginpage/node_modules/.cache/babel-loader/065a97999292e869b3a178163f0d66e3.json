{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeCompiler = exports.Compiler = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst errors_1 = require(\"../../core/errors\");\n\nconst errors_list_1 = require(\"../../core/errors-list\");\n\nclass Compiler {\n  constructor(_pathToSolcJs) {\n    this._pathToSolcJs = _pathToSolcJs;\n  }\n\n  async compile(input) {\n    const solc = await this.getSolc();\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n\n  async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n\n    const {\n      default: solcWrapper\n    } = await Promise.resolve().then(() => __importStar(require(\"solc/wrapper\")));\n    this._loadedSolc = solcWrapper(this._loadCompilerSources(this._pathToSolcJs));\n    return this._loadedSolc;\n  }\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n\n\n  _loadCompilerSources(compilerPath) {\n    const Module = module.constructor;\n    const previousHook = Module._extensions[\".js\"];\n\n    Module._extensions[\".js\"] = function (module, filename) {\n      const content = fs.readFileSync(filename, \"utf8\");\n\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n\n    const loadedSolc = require(compilerPath);\n\n    Module._extensions[\".js\"] = previousHook;\n    return loadedSolc;\n  }\n\n}\n\nexports.Compiler = Compiler;\n\nclass NativeCompiler {\n  constructor(_pathToSolc) {\n    this._pathToSolc = _pathToSolc;\n  }\n\n  async compile(input) {\n    const output = await new Promise((resolve, reject) => {\n      try {\n        const process = (0, child_process_1.execFile)(this._pathToSolc, [`--standard-json`], {\n          maxBuffer: 1024 * 1024 * 500\n        }, (err, stdout) => {\n          if (err !== null) {\n            return reject(err);\n          }\n\n          resolve(stdout);\n        });\n        process.stdin.write(JSON.stringify(input));\n        process.stdin.end();\n      } catch (e) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.CANT_RUN_NATIVE_COMPILER, {}, e);\n      }\n    });\n    return JSON.parse(output);\n  }\n\n}\n\nexports.NativeCompiler = NativeCompiler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAMA,MAAaA,QAAb,CAAqB;EAGnBC,YAAoBC,aAApB,EAAyC;IAArB;EAAyB;;EAEzB,MAAPC,OAAO,CAACC,KAAD,EAAqB;IACvC,MAAMC,IAAI,GAAG,MAAM,KAAKC,OAAL,EAAnB;IAEA,MAAMC,UAAU,GAAGF,IAAI,CAACF,OAAL,CAAaK,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAb,CAAnB;IACA,OAAOI,IAAI,CAACE,KAAL,CAAWH,UAAX,CAAP;EACD;;EAEmB,MAAPD,OAAO;IAClB,IAAI,KAAKK,WAAL,KAAqBC,SAAzB,EAAoC;MAClC,OAAO,KAAKD,WAAZ;IACD;;IAED,MAAM;MAAEE,OAAO,EAAEC;IAAX,IAA2B,wDAAa,cAAb,GAAjC;IACA,KAAKH,WAAL,GAAmBG,WAAW,CAC5B,KAAKC,oBAAL,CAA0B,KAAKb,aAA/B,CAD4B,CAA9B;IAIA,OAAO,KAAKS,WAAZ;EACD;EAED;;;;;;;;EAMQI,oBAAoB,CAACC,YAAD,EAAqB;IAC/C,MAAMC,MAAM,GAAGC,MAAM,CAACjB,WAAtB;IACA,MAAMkB,YAAY,GAAGF,MAAM,CAACG,WAAP,CAAmB,KAAnB,CAArB;;IAEAH,MAAM,CAACG,WAAP,CAAmB,KAAnB,IAA4B,UAC1BF,MAD0B,EAE1BG,QAF0B,EAEV;MAEhB,MAAMC,OAAO,GAAGC,EAAE,CAACC,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAAhB;;MACAI,MAAM,CAACC,cAAP,CAAsBR,MAAtB,EAA8BS,QAA9B,CAAuCC,IAAvC,CAA4CV,MAA5C,EAAoDI,OAApD,EAA6DD,QAA7D;IACD,CAND;;IAQA,MAAMQ,UAAU,GAAGC,OAAO,CAACd,YAAD,CAA1B;;IAEAC,MAAM,CAACG,WAAP,CAAmB,KAAnB,IAA4BD,YAA5B;IAEA,OAAOU,UAAP;EACD;;AAhDkB;;AAArBE;;AAmDA,MAAaC,cAAb,CAA2B;EACzB/B,YAAoBgC,WAApB,EAAuC;IAAnB;EAAuB;;EAEvB,MAAP9B,OAAO,CAACC,KAAD,EAAqB;IACvC,MAAM8B,MAAM,GAAW,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAC3D,IAAI;QACF,MAAMC,OAAO,GAAG,8BACd,KAAKL,WADS,EAEd,CAAC,iBAAD,CAFc,EAGd;UACEM,SAAS,EAAE,OAAO,IAAP,GAAc;QAD3B,CAHc,EAMd,CAACC,GAAD,EAAMC,MAAN,KAAgB;UACd,IAAID,GAAG,KAAK,IAAZ,EAAkB;YAChB,OAAOH,MAAM,CAACG,GAAD,CAAb;UACD;;UACDJ,OAAO,CAACK,MAAD,CAAP;QACD,CAXa,CAAhB;QAcAH,OAAO,CAACI,KAAR,CAAeC,KAAf,CAAqBnC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAArB;QACAkC,OAAO,CAACI,KAAR,CAAeE,GAAf;MACD,CAjBD,CAiBE,OAAOC,CAAP,EAAe;QACf,MAAM,IAAIC,qBAAJ,CAAiBC,qBAAOC,IAAP,CAAYC,wBAA7B,EAAuD,EAAvD,EAA2DJ,CAA3D,CAAN;MACD;IACF,CArB4B,CAA7B;IAuBA,OAAOrC,IAAI,CAACE,KAAL,CAAWwB,MAAX,CAAP;EACD;;AA5BwB;;AAA3BH","names":["Compiler","constructor","_pathToSolcJs","compile","input","solc","getSolc","jsonOutput","JSON","stringify","parse","_loadedSolc","undefined","default","solcWrapper","_loadCompilerSources","compilerPath","Module","module","previousHook","_extensions","filename","content","fs","readFileSync","Object","getPrototypeOf","_compile","call","loadedSolc","require","exports","NativeCompiler","_pathToSolc","output","Promise","resolve","reject","process","maxBuffer","err","stdout","stdin","write","end","e","errors_1","errors_list_1","SOLC","CANT_RUN_NATIVE_COMPILER"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\solidity\\compiler\\index.ts"],"sourcesContent":["import { execFile } from \"child_process\";\nimport * as fs from \"fs\";\nimport { CompilerInput, CompilerOutput } from \"../../../types\";\nimport { HardhatError } from \"../../core/errors\";\nimport { ERRORS } from \"../../core/errors-list\";\n\nexport interface ICompiler {\n  compile(input: CompilerInput): Promise<CompilerOutput>;\n}\n\nexport class Compiler implements ICompiler {\n  private _loadedSolc?: any;\n\n  constructor(private _pathToSolcJs: string) {}\n\n  public async compile(input: CompilerInput) {\n    const solc = await this.getSolc();\n\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n\n  public async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n\n    const { default: solcWrapper } = await import(\"solc/wrapper\");\n    this._loadedSolc = solcWrapper(\n      this._loadCompilerSources(this._pathToSolcJs)\n    );\n\n    return this._loadedSolc;\n  }\n\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n  private _loadCompilerSources(compilerPath: string) {\n    const Module = module.constructor as any;\n    const previousHook = Module._extensions[\".js\"];\n\n    Module._extensions[\".js\"] = function (\n      module: NodeJS.Module,\n      filename: string\n    ) {\n      const content = fs.readFileSync(filename, \"utf8\");\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n\n    const loadedSolc = require(compilerPath);\n\n    Module._extensions[\".js\"] = previousHook;\n\n    return loadedSolc;\n  }\n}\n\nexport class NativeCompiler implements ICompiler {\n  constructor(private _pathToSolc: string) {}\n\n  public async compile(input: CompilerInput) {\n    const output: string = await new Promise((resolve, reject) => {\n      try {\n        const process = execFile(\n          this._pathToSolc,\n          [`--standard-json`],\n          {\n            maxBuffer: 1024 * 1024 * 500,\n          },\n          (err, stdout) => {\n            if (err !== null) {\n              return reject(err);\n            }\n            resolve(stdout);\n          }\n        );\n\n        process.stdin!.write(JSON.stringify(input));\n        process.stdin!.end();\n      } catch (e: any) {\n        throw new HardhatError(ERRORS.SOLC.CANT_RUN_NATIVE_COMPILER, {}, e);\n      }\n    });\n\n    return JSON.parse(output);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}