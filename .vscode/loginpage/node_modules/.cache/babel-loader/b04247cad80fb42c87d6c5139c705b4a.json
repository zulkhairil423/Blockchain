{"ast":null,"code":"// Replacement for node's internal 'internal/options' module\nexports.getOptionValue = getOptionValue;\n\nfunction getOptionValue(opt) {\n  parseOptions();\n  return options[opt];\n}\n\nlet options;\n\nfunction parseOptions() {\n  if (!options) {\n    options = {\n      '--preserve-symlinks': false,\n      '--preserve-symlinks-main': false,\n      '--input-type': undefined,\n      '--experimental-specifier-resolution': 'explicit',\n      '--experimental-policy': undefined,\n      '--conditions': [],\n      '--pending-deprecation': false,\n      ...parseArgv(getNodeOptionsEnvArgv()),\n      ...parseArgv(process.execArgv),\n      ...getOptionValuesFromOtherEnvVars()\n    };\n  }\n}\n\nfunction parseArgv(argv) {\n  return require('arg')({\n    '--preserve-symlinks': Boolean,\n    '--preserve-symlinks-main': Boolean,\n    '--input-type': String,\n    '--experimental-specifier-resolution': String,\n    // Legacy alias for node versions prior to 12.16\n    '--es-module-specifier-resolution': '--experimental-specifier-resolution',\n    '--experimental-policy': String,\n    '--conditions': [String],\n    '--pending-deprecation': Boolean,\n    '--experimental-json-modules': Boolean,\n    '--experimental-wasm-modules': Boolean\n  }, {\n    argv,\n    permissive: true\n  });\n}\n\nfunction getNodeOptionsEnvArgv() {\n  const errors = [];\n  const envArgv = ParseNodeOptionsEnvVar(process.env.NODE_OPTIONS || '', errors);\n\n  if (errors.length !== 0) {// TODO: handle errors somehow\n  }\n\n  return envArgv;\n} // Direct JS port of C implementation: https://github.com/nodejs/node/blob/67ba825037b4082d5d16f922fb9ce54516b4a869/src/node_options.cc#L1024-L1063\n\n\nfunction ParseNodeOptionsEnvVar(node_options, errors) {\n  const env_argv = [];\n  let is_in_string = false;\n  let will_start_new_arg = true;\n\n  for (let index = 0; index < node_options.length; ++index) {\n    let c = node_options[index]; // Backslashes escape the following character\n\n    if (c === '\\\\' && is_in_string) {\n      if (index + 1 === node_options.length) {\n        errors.push(\"invalid value for NODE_OPTIONS \" + \"(invalid escape)\\n\");\n        return env_argv;\n      } else {\n        c = node_options[++index];\n      }\n    } else if (c === ' ' && !is_in_string) {\n      will_start_new_arg = true;\n      continue;\n    } else if (c === '\"') {\n      is_in_string = !is_in_string;\n      continue;\n    }\n\n    if (will_start_new_arg) {\n      env_argv.push(c);\n      will_start_new_arg = false;\n    } else {\n      env_argv[env_argv.length - 1] += c;\n    }\n  }\n\n  if (is_in_string) {\n    errors.push(\"invalid value for NODE_OPTIONS \" + \"(unterminated string)\\n\");\n  }\n\n  return env_argv;\n} // Get option values that can be specified via env vars besides NODE_OPTIONS\n\n\nfunction getOptionValuesFromOtherEnvVars() {\n  const options = {};\n\n  if (process.env.NODE_PENDING_DEPRECATION === '1') {\n    options['--pending-deprecation'] = true;\n  }\n\n  return options;\n}","map":{"version":3,"names":["exports","getOptionValue","opt","parseOptions","options","undefined","parseArgv","getNodeOptionsEnvArgv","process","execArgv","getOptionValuesFromOtherEnvVars","argv","require","Boolean","String","permissive","errors","envArgv","ParseNodeOptionsEnvVar","env","NODE_OPTIONS","length","node_options","env_argv","is_in_string","will_start_new_arg","index","c","push","NODE_PENDING_DEPRECATION"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-options.js"],"sourcesContent":["// Replacement for node's internal 'internal/options' module\n\nexports.getOptionValue = getOptionValue;\nfunction getOptionValue(opt) {\n  parseOptions();\n  return options[opt];\n}\n\nlet options;\nfunction parseOptions() {\n  if (!options) {\n    options = {\n      '--preserve-symlinks': false,\n      '--preserve-symlinks-main': false,\n      '--input-type': undefined,\n      '--experimental-specifier-resolution': 'explicit',\n      '--experimental-policy': undefined,\n      '--conditions': [],\n      '--pending-deprecation': false,\n      ...parseArgv(getNodeOptionsEnvArgv()),\n      ...parseArgv(process.execArgv),\n      ...getOptionValuesFromOtherEnvVars()\n    }\n  }\n}\n\nfunction parseArgv(argv) {\n  return require('arg')({\n    '--preserve-symlinks': Boolean,\n    '--preserve-symlinks-main': Boolean,\n    '--input-type': String,\n    '--experimental-specifier-resolution': String,\n    // Legacy alias for node versions prior to 12.16\n    '--es-module-specifier-resolution': '--experimental-specifier-resolution',\n    '--experimental-policy': String,\n    '--conditions': [String],\n    '--pending-deprecation': Boolean,\n    '--experimental-json-modules': Boolean,\n    '--experimental-wasm-modules': Boolean,\n  }, {\n    argv,\n    permissive: true\n  });\n}\n\nfunction getNodeOptionsEnvArgv() {\n  const errors = [];\n  const envArgv = ParseNodeOptionsEnvVar(process.env.NODE_OPTIONS || '', errors);\n  if (errors.length !== 0) {\n    // TODO: handle errors somehow\n  }\n  return envArgv;\n}\n\n// Direct JS port of C implementation: https://github.com/nodejs/node/blob/67ba825037b4082d5d16f922fb9ce54516b4a869/src/node_options.cc#L1024-L1063\nfunction ParseNodeOptionsEnvVar(node_options, errors) {\n  const env_argv = [];\n\n  let is_in_string = false;\n  let will_start_new_arg = true;\n  for (let index = 0; index < node_options.length; ++index) {\n      let c = node_options[index];\n\n      // Backslashes escape the following character\n      if (c === '\\\\' && is_in_string) {\n          if (index + 1 === node_options.length) {\n              errors.push(\"invalid value for NODE_OPTIONS \" +\n                  \"(invalid escape)\\n\");\n              return env_argv;\n          } else {\n              c = node_options[++index];\n          }\n      } else if (c === ' ' && !is_in_string) {\n          will_start_new_arg = true;\n          continue;\n      } else if (c === '\"') {\n          is_in_string = !is_in_string;\n          continue;\n      }\n\n      if (will_start_new_arg) {\n          env_argv.push(c);\n          will_start_new_arg = false;\n      } else {\n          env_argv[env_argv.length - 1] += c;\n      }\n  }\n\n  if (is_in_string) {\n      errors.push(\"invalid value for NODE_OPTIONS \" +\n          \"(unterminated string)\\n\");\n  }\n  return env_argv;\n}\n\n// Get option values that can be specified via env vars besides NODE_OPTIONS\nfunction getOptionValuesFromOtherEnvVars() {\n  const options = {};\n  if(process.env.NODE_PENDING_DEPRECATION === '1') {\n    options['--pending-deprecation'] = true;\n  }\n  return options;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}