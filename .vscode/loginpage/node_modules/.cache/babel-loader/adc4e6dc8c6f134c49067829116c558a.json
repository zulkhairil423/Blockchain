{"ast":null,"code":"'use strict';\n/**\n * @module XUnit\n */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar errors = require('../errors');\n\nvar createUnsupportedError = errors.createUnsupportedError;\n\nvar constants = require('../runner').constants;\n\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\n\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\n\nvar inherits = utils.inherits;\nvar escape = utils.escape;\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n/**\n * Constructs a new `XUnit` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\nfunction XUnit(runner, options) {\n  Base.call(this, runner, options);\n  var stats = this.stats;\n  var tests = [];\n  var self = this; // the name of the test suite, as it will appear in the resulting XML file\n\n  var suiteName; // the default name of the test suite if none is provided\n\n  var DEFAULT_SUITE_NAME = 'Mocha Tests';\n\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.output) {\n      if (!fs.createWriteStream) {\n        throw createUnsupportedError('file output not supported in browser');\n      }\n\n      fs.mkdirSync(path.dirname(options.reporterOptions.output), {\n        recursive: true\n      });\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n    } // get the suite name from the reporter options (if provided)\n\n\n    suiteName = options.reporterOptions.suiteName;\n  } // fall back to the default suite name\n\n\n  suiteName = suiteName || DEFAULT_SUITE_NAME;\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    tests.push(test);\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    tests.push(test);\n  });\n  runner.on(EVENT_TEST_FAIL, function (test) {\n    tests.push(test);\n  });\n  runner.once(EVENT_RUN_END, function () {\n    self.write(tag('testsuite', {\n      name: suiteName,\n      tests: stats.tests,\n      failures: 0,\n      errors: stats.failures,\n      skipped: stats.tests - stats.failures - stats.passes,\n      timestamp: new Date().toUTCString(),\n      time: stats.duration / 1000 || 0\n    }, false));\n    tests.forEach(function (t) {\n      self.test(t);\n    });\n    self.write('</testsuite>');\n  });\n}\n/**\n * Inherit from `Base.prototype`.\n */\n\n\ninherits(XUnit, Base);\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\n\nXUnit.prototype.done = function (failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function () {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\n\n\nXUnit.prototype.write = function (line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    Base.consoleLog(line);\n  }\n};\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\n\n\nXUnit.prototype.test = function (test) {\n  Base.useColors = false;\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: test.duration / 1000 || 0\n  };\n\n  if (test.state === STATE_FAILED) {\n    var err = test.err;\n    var diff = !Base.hideDiff && Base.showDiff(err) ? '\\n' + Base.generateDiff(err.actual, err.expected) : '';\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, escape(err.message) + escape(diff) + '\\n' + escape(err.stack))));\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\n\n\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n\n  return tag;\n}\n\nXUnit.description = 'XUnit-compatible XML output';","map":{"version":3,"names":["Base","require","utils","fs","path","errors","createUnsupportedError","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_RUN_END","EVENT_TEST_PENDING","STATE_FAILED","inherits","escape","Date","global","exports","module","XUnit","runner","options","call","stats","tests","self","suiteName","DEFAULT_SUITE_NAME","reporterOptions","output","createWriteStream","mkdirSync","dirname","recursive","fileStream","on","test","push","once","write","tag","name","failures","skipped","passes","timestamp","toUTCString","time","duration","forEach","t","prototype","done","fn","end","line","process","stdout","consoleLog","useColors","attrs","classname","parent","fullTitle","title","state","err","diff","hideDiff","showDiff","generateDiff","actual","expected","message","stack","isPending","close","content","pairs","key","Object","hasOwnProperty","length","join","description"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/mocha/lib/reporters/xunit.js"],"sourcesContent":["'use strict';\n/**\n * @module XUnit\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar fs = require('fs');\nvar path = require('path');\nvar errors = require('../errors');\nvar createUnsupportedError = errors.createUnsupportedError;\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\nvar inherits = utils.inherits;\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Constructs a new `XUnit` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction XUnit(runner, options) {\n  Base.call(this, runner, options);\n\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  // the name of the test suite, as it will appear in the resulting XML file\n  var suiteName;\n\n  // the default name of the test suite if none is provided\n  var DEFAULT_SUITE_NAME = 'Mocha Tests';\n\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.output) {\n      if (!fs.createWriteStream) {\n        throw createUnsupportedError('file output not supported in browser');\n      }\n\n      fs.mkdirSync(path.dirname(options.reporterOptions.output), {\n        recursive: true\n      });\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n    }\n\n    // get the suite name from the reporter options (if provided)\n    suiteName = options.reporterOptions.suiteName;\n  }\n\n  // fall back to the default suite name\n  suiteName = suiteName || DEFAULT_SUITE_NAME;\n\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test) {\n    tests.push(test);\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    self.write(\n      tag(\n        'testsuite',\n        {\n          name: suiteName,\n          tests: stats.tests,\n          failures: 0,\n          errors: stats.failures,\n          skipped: stats.tests - stats.failures - stats.passes,\n          timestamp: new Date().toUTCString(),\n          time: stats.duration / 1000 || 0\n        },\n        false\n      )\n    );\n\n    tests.forEach(function (t) {\n      self.test(t);\n    });\n\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function (failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function () {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function (line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    Base.consoleLog(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function (test) {\n  Base.useColors = false;\n\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: test.duration / 1000 || 0\n  };\n\n  if (test.state === STATE_FAILED) {\n    var err = test.err;\n    var diff =\n      !Base.hideDiff && Base.showDiff(err)\n        ? '\\n' + Base.generateDiff(err.actual, err.expected)\n        : '';\n    this.write(\n      tag(\n        'testcase',\n        attrs,\n        false,\n        tag(\n          'failure',\n          {},\n          false,\n          escape(err.message) + escape(diff) + '\\n' + escape(err.stack)\n        )\n      )\n    );\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\n\nXUnit.description = 'XUnit-compatible XML output';\n"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIK,sBAAsB,GAAGD,MAAM,CAACC,sBAApC;;AACA,IAAIC,SAAS,GAAGN,OAAO,CAAC,WAAD,CAAP,CAAqBM,SAArC;;AACA,IAAIC,eAAe,GAAGD,SAAS,CAACC,eAAhC;AACA,IAAIC,eAAe,GAAGF,SAAS,CAACE,eAAhC;AACA,IAAIC,aAAa,GAAGH,SAAS,CAACG,aAA9B;AACA,IAAIC,kBAAkB,GAAGJ,SAAS,CAACI,kBAAnC;;AACA,IAAIC,YAAY,GAAGX,OAAO,CAAC,aAAD,CAAP,CAAuBM,SAAvB,CAAiCK,YAApD;;AACA,IAAIC,QAAQ,GAAGX,KAAK,CAACW,QAArB;AACA,IAAIC,MAAM,GAAGZ,KAAK,CAACY,MAAnB;AAEA;AACA;AACA;;AACA,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAlB;AAEA;AACA;AACA;;AAEAE,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,KAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;EAC9BrB,IAAI,CAACsB,IAAL,CAAU,IAAV,EAAgBF,MAAhB,EAAwBC,OAAxB;EAEA,IAAIE,KAAK,GAAG,KAAKA,KAAjB;EACA,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,IAAI,GAAG,IAAX,CAL8B,CAO9B;;EACA,IAAIC,SAAJ,CAR8B,CAU9B;;EACA,IAAIC,kBAAkB,GAAG,aAAzB;;EAEA,IAAIN,OAAO,IAAIA,OAAO,CAACO,eAAvB,EAAwC;IACtC,IAAIP,OAAO,CAACO,eAAR,CAAwBC,MAA5B,EAAoC;MAClC,IAAI,CAAC1B,EAAE,CAAC2B,iBAAR,EAA2B;QACzB,MAAMxB,sBAAsB,CAAC,sCAAD,CAA5B;MACD;;MAEDH,EAAE,CAAC4B,SAAH,CAAa3B,IAAI,CAAC4B,OAAL,CAAaX,OAAO,CAACO,eAAR,CAAwBC,MAArC,CAAb,EAA2D;QACzDI,SAAS,EAAE;MAD8C,CAA3D;MAGAR,IAAI,CAACS,UAAL,GAAkB/B,EAAE,CAAC2B,iBAAH,CAAqBT,OAAO,CAACO,eAAR,CAAwBC,MAA7C,CAAlB;IACD,CAVqC,CAYtC;;;IACAH,SAAS,GAAGL,OAAO,CAACO,eAAR,CAAwBF,SAApC;EACD,CA3B6B,CA6B9B;;;EACAA,SAAS,GAAGA,SAAS,IAAIC,kBAAzB;EAEAP,MAAM,CAACe,EAAP,CAAUxB,kBAAV,EAA8B,UAAUyB,IAAV,EAAgB;IAC5CZ,KAAK,CAACa,IAAN,CAAWD,IAAX;EACD,CAFD;EAIAhB,MAAM,CAACe,EAAP,CAAU3B,eAAV,EAA2B,UAAU4B,IAAV,EAAgB;IACzCZ,KAAK,CAACa,IAAN,CAAWD,IAAX;EACD,CAFD;EAIAhB,MAAM,CAACe,EAAP,CAAU1B,eAAV,EAA2B,UAAU2B,IAAV,EAAgB;IACzCZ,KAAK,CAACa,IAAN,CAAWD,IAAX;EACD,CAFD;EAIAhB,MAAM,CAACkB,IAAP,CAAY5B,aAAZ,EAA2B,YAAY;IACrCe,IAAI,CAACc,KAAL,CACEC,GAAG,CACD,WADC,EAED;MACEC,IAAI,EAAEf,SADR;MAEEF,KAAK,EAAED,KAAK,CAACC,KAFf;MAGEkB,QAAQ,EAAE,CAHZ;MAIErC,MAAM,EAAEkB,KAAK,CAACmB,QAJhB;MAKEC,OAAO,EAAEpB,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACmB,QAApB,GAA+BnB,KAAK,CAACqB,MALhD;MAMEC,SAAS,EAAE,IAAI9B,IAAJ,GAAW+B,WAAX,EANb;MAOEC,IAAI,EAAExB,KAAK,CAACyB,QAAN,GAAiB,IAAjB,IAAyB;IAPjC,CAFC,EAWD,KAXC,CADL;IAgBAxB,KAAK,CAACyB,OAAN,CAAc,UAAUC,CAAV,EAAa;MACzBzB,IAAI,CAACW,IAAL,CAAUc,CAAV;IACD,CAFD;IAIAzB,IAAI,CAACc,KAAL,CAAW,cAAX;EACD,CAtBD;AAuBD;AAED;AACA;AACA;;;AACA1B,QAAQ,CAACM,KAAD,EAAQnB,IAAR,CAAR;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAmB,KAAK,CAACgC,SAAN,CAAgBC,IAAhB,GAAuB,UAAUV,QAAV,EAAoBW,EAApB,EAAwB;EAC7C,IAAI,KAAKnB,UAAT,EAAqB;IACnB,KAAKA,UAAL,CAAgBoB,GAAhB,CAAoB,YAAY;MAC9BD,EAAE,CAACX,QAAD,CAAF;IACD,CAFD;EAGD,CAJD,MAIO;IACLW,EAAE,CAACX,QAAD,CAAF;EACD;AACF,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACAvB,KAAK,CAACgC,SAAN,CAAgBZ,KAAhB,GAAwB,UAAUgB,IAAV,EAAgB;EACtC,IAAI,KAAKrB,UAAT,EAAqB;IACnB,KAAKA,UAAL,CAAgBK,KAAhB,CAAsBgB,IAAI,GAAG,IAA7B;EACD,CAFD,MAEO,IAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACC,MAA3C,EAAmD;IACxDD,OAAO,CAACC,MAAR,CAAelB,KAAf,CAAqBgB,IAAI,GAAG,IAA5B;EACD,CAFM,MAEA;IACLvD,IAAI,CAAC0D,UAAL,CAAgBH,IAAhB;EACD;AACF,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACApC,KAAK,CAACgC,SAAN,CAAgBf,IAAhB,GAAuB,UAAUA,IAAV,EAAgB;EACrCpC,IAAI,CAAC2D,SAAL,GAAiB,KAAjB;EAEA,IAAIC,KAAK,GAAG;IACVC,SAAS,EAAEzB,IAAI,CAAC0B,MAAL,CAAYC,SAAZ,EADD;IAEVtB,IAAI,EAAEL,IAAI,CAAC4B,KAFD;IAGVjB,IAAI,EAAEX,IAAI,CAACY,QAAL,GAAgB,IAAhB,IAAwB;EAHpB,CAAZ;;EAMA,IAAIZ,IAAI,CAAC6B,KAAL,KAAerD,YAAnB,EAAiC;IAC/B,IAAIsD,GAAG,GAAG9B,IAAI,CAAC8B,GAAf;IACA,IAAIC,IAAI,GACN,CAACnE,IAAI,CAACoE,QAAN,IAAkBpE,IAAI,CAACqE,QAAL,CAAcH,GAAd,CAAlB,GACI,OAAOlE,IAAI,CAACsE,YAAL,CAAkBJ,GAAG,CAACK,MAAtB,EAA8BL,GAAG,CAACM,QAAlC,CADX,GAEI,EAHN;IAIA,KAAKjC,KAAL,CACEC,GAAG,CACD,UADC,EAEDoB,KAFC,EAGD,KAHC,EAIDpB,GAAG,CACD,SADC,EAED,EAFC,EAGD,KAHC,EAID1B,MAAM,CAACoD,GAAG,CAACO,OAAL,CAAN,GAAsB3D,MAAM,CAACqD,IAAD,CAA5B,GAAqC,IAArC,GAA4CrD,MAAM,CAACoD,GAAG,CAACQ,KAAL,CAJjD,CAJF,CADL;EAaD,CAnBD,MAmBO,IAAItC,IAAI,CAACuC,SAAL,EAAJ,EAAsB;IAC3B,KAAKpC,KAAL,CAAWC,GAAG,CAAC,UAAD,EAAaoB,KAAb,EAAoB,KAApB,EAA2BpB,GAAG,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,CAA9B,CAAd;EACD,CAFM,MAEA;IACL,KAAKD,KAAL,CAAWC,GAAG,CAAC,UAAD,EAAaoB,KAAb,EAAoB,IAApB,CAAd;EACD;AACF,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASpB,GAAT,CAAaC,IAAb,EAAmBmB,KAAnB,EAA0BgB,KAA1B,EAAiCC,OAAjC,EAA0C;EACxC,IAAIvB,GAAG,GAAGsB,KAAK,GAAG,IAAH,GAAU,GAAzB;EACA,IAAIE,KAAK,GAAG,EAAZ;EACA,IAAItC,GAAJ;;EAEA,KAAK,IAAIuC,GAAT,IAAgBnB,KAAhB,EAAuB;IACrB,IAAIoB,MAAM,CAAC7B,SAAP,CAAiB8B,cAAjB,CAAgC3D,IAAhC,CAAqCsC,KAArC,EAA4CmB,GAA5C,CAAJ,EAAsD;MACpDD,KAAK,CAACzC,IAAN,CAAW0C,GAAG,GAAG,IAAN,GAAajE,MAAM,CAAC8C,KAAK,CAACmB,GAAD,CAAN,CAAnB,GAAkC,GAA7C;IACD;EACF;;EAEDvC,GAAG,GAAG,MAAMC,IAAN,IAAcqC,KAAK,CAACI,MAAN,GAAe,MAAMJ,KAAK,CAACK,IAAN,CAAW,GAAX,CAArB,GAAuC,EAArD,IAA2D7B,GAAjE;;EACA,IAAIuB,OAAJ,EAAa;IACXrC,GAAG,IAAIqC,OAAO,GAAG,IAAV,GAAiBpC,IAAjB,GAAwBa,GAA/B;EACD;;EACD,OAAOd,GAAP;AACD;;AAEDrB,KAAK,CAACiE,WAAN,GAAoB,6BAApB"},"metadata":{},"sourceType":"script"}