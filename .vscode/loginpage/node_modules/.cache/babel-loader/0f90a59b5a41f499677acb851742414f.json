{"ast":null,"code":"// Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js\n'use strict';\n\nconst {\n  RegExpPrototypeExec,\n  StringPrototypeStartsWith\n} = require('./node-primordials');\n\nconst {\n  extname\n} = require('path');\n\nconst {\n  getOptionValue\n} = require('./node-options');\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(s => parseInt(s, 10));\nconst experimentalJsonModules = nodeMajor > 17 || nodeMajor === 17 && nodeMinor >= 5 || nodeMajor === 16 && nodeMinor >= 15 || getOptionValue('--experimental-json-modules');\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\n\nconst {\n  URL,\n  fileURLToPath\n} = require('url');\n\nconst {\n  ERR_UNKNOWN_FILE_EXTENSION\n} = require('./node-internal-errors').codes;\n\nconst extensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'module',\n  '.mjs': 'module'\n};\nconst legacyExtensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'commonjs',\n  '.json': 'commonjs',\n  '.mjs': 'module',\n  '.node': 'commonjs'\n};\nif (experimentalWasmModules) extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\nif (experimentalJsonModules) extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';\n/**\n *\n * @param {'node' | 'explicit'} [tsNodeExperimentalSpecifierResolution]\n * @param {ReturnType<\n *  typeof import('../dist-raw/node-internal-modules-esm-resolve').createResolve\n * >} nodeEsmResolver\n */\n\nfunction createGetFormat(tsNodeExperimentalSpecifierResolution, nodeEsmResolver) {\n  // const experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution ?? getOptionValue('--experimental-specifier-resolution');\n  let experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution != null ? tsNodeExperimentalSpecifierResolution : getOptionValue('--experimental-specifier-resolution');\n  const {\n    getPackageType\n  } = nodeEsmResolver;\n  /**\n   * @param {string} url\n   * @param {{}} context\n   * @param {any} defaultGetFormatUnused\n   * @returns {ReturnType<import('../src/esm').NodeLoaderHooksAPI1.GetFormatHook>}\n   */\n\n  function defaultGetFormat(url, context, defaultGetFormatUnused) {\n    if (StringPrototypeStartsWith(url, 'node:')) {\n      return {\n        format: 'builtin'\n      };\n    }\n\n    const parsed = new URL(url);\n\n    if (parsed.protocol === 'data:') {\n      const [, mime] = RegExpPrototypeExec(/^([^/]+\\/[^;,]+)(?:[^,]*?)(;base64)?,/, parsed.pathname) || [null, null, null];\n      const format = {\n        '__proto__': null,\n        'text/javascript': 'module',\n        'application/json': experimentalJsonModules ? 'json' : null,\n        'application/wasm': experimentalWasmModules ? 'wasm' : null\n      }[mime] || null;\n      return {\n        format\n      };\n    } else if (parsed.protocol === 'file:') {\n      const ext = extname(parsed.pathname);\n      let format;\n\n      if (ext === '.js') {\n        format = getPackageType(parsed.href) === 'module' ? 'module' : 'commonjs';\n      } else {\n        format = extensionFormatMap[ext];\n      }\n\n      if (!format) {\n        if (experimentalSpeciferResolution === 'node') {\n          process.emitWarning('The Node.js specifier resolution in ESM is experimental.', 'ExperimentalWarning');\n          format = legacyExtensionFormatMap[ext];\n        } else {\n          throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url));\n        }\n      }\n\n      return {\n        format: format || null\n      };\n    }\n\n    return {\n      format: null\n    };\n  }\n\n  return {\n    defaultGetFormat\n  };\n}\n\nmodule.exports = {\n  createGetFormat\n};","map":{"version":3,"names":["RegExpPrototypeExec","StringPrototypeStartsWith","require","extname","getOptionValue","nodeMajor","nodeMinor","process","versions","node","split","map","s","parseInt","experimentalJsonModules","experimentalWasmModules","URL","fileURLToPath","ERR_UNKNOWN_FILE_EXTENSION","codes","extensionFormatMap","legacyExtensionFormatMap","createGetFormat","tsNodeExperimentalSpecifierResolution","nodeEsmResolver","experimentalSpeciferResolution","getPackageType","defaultGetFormat","url","context","defaultGetFormatUnused","format","parsed","protocol","mime","pathname","ext","href","emitWarning","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-internal-modules-esm-get_format.js"],"sourcesContent":["// Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js\n\n'use strict';\nconst {\n  RegExpPrototypeExec,\n  StringPrototypeStartsWith,\n} = require('./node-primordials');\nconst { extname } = require('path');\nconst { getOptionValue } = require('./node-options');\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(s => parseInt(s, 10));\nconst experimentalJsonModules =\n  nodeMajor > 17\n  || (nodeMajor === 17 && nodeMinor >= 5)\n  || (nodeMajor === 16 && nodeMinor >= 15)\n  || getOptionValue('--experimental-json-modules');\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\nconst { URL, fileURLToPath } = require('url');\nconst { ERR_UNKNOWN_FILE_EXTENSION } = require('./node-internal-errors').codes;\n\nconst extensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'module',\n  '.mjs': 'module'\n};\n\nconst legacyExtensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'commonjs',\n  '.json': 'commonjs',\n  '.mjs': 'module',\n  '.node': 'commonjs'\n};\n\nif (experimentalWasmModules)\n  extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\n\nif (experimentalJsonModules)\n  extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';\n\n/**\n *\n * @param {'node' | 'explicit'} [tsNodeExperimentalSpecifierResolution]\n * @param {ReturnType<\n *  typeof import('../dist-raw/node-internal-modules-esm-resolve').createResolve\n * >} nodeEsmResolver\n */\nfunction createGetFormat(tsNodeExperimentalSpecifierResolution, nodeEsmResolver) {\n// const experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution ?? getOptionValue('--experimental-specifier-resolution');\nlet experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution != null ? tsNodeExperimentalSpecifierResolution : getOptionValue('--experimental-specifier-resolution');\nconst { getPackageType } = nodeEsmResolver;\n\n/**\n * @param {string} url\n * @param {{}} context\n * @param {any} defaultGetFormatUnused\n * @returns {ReturnType<import('../src/esm').NodeLoaderHooksAPI1.GetFormatHook>}\n */\nfunction defaultGetFormat(url, context, defaultGetFormatUnused) {\n  if (StringPrototypeStartsWith(url, 'node:')) {\n    return { format: 'builtin' };\n  }\n  const parsed = new URL(url);\n  if (parsed.protocol === 'data:') {\n    const [ , mime ] = RegExpPrototypeExec(\n      /^([^/]+\\/[^;,]+)(?:[^,]*?)(;base64)?,/,\n      parsed.pathname,\n    ) || [ null, null, null ];\n    const format = ({\n      '__proto__': null,\n      'text/javascript': 'module',\n      'application/json': experimentalJsonModules ? 'json' : null,\n      'application/wasm': experimentalWasmModules ? 'wasm' : null\n    })[mime] || null;\n    return { format };\n  } else if (parsed.protocol === 'file:') {\n    const ext = extname(parsed.pathname);\n    let format;\n    if (ext === '.js') {\n      format = getPackageType(parsed.href) === 'module' ? 'module' : 'commonjs';\n    } else {\n      format = extensionFormatMap[ext];\n    }\n    if (!format) {\n      if (experimentalSpeciferResolution === 'node') {\n        process.emitWarning(\n          'The Node.js specifier resolution in ESM is experimental.',\n          'ExperimentalWarning');\n        format = legacyExtensionFormatMap[ext];\n      } else {\n        throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url));\n      }\n    }\n    return { format: format || null };\n  }\n  return { format: null };\n}\n\nreturn {defaultGetFormat};\n}\n\nmodule.exports = {\n  createGetFormat\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}