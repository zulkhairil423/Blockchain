{"ast":null,"code":"import { dynamicRequire, fill, logger } from '@sentry/utils';\n/** Tracing integration for node-mysql package */\n\nvar Mysql =\n/** @class */\nfunction () {\n  function Mysql() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Mysql.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Mysql.prototype.setupOnce = function (_, getCurrentHub) {\n    var connection;\n\n    try {\n      // Unfortunatelly mysql is using some custom loading system and `Connection` is not exported directly.\n      connection = dynamicRequire(module, 'mysql/lib/Connection.js');\n    } catch (e) {\n      logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    } // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n\n\n    fill(connection.prototype, 'query', function (orig) {\n      return function (options, values, callback) {\n        var _a, _b;\n\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        var span = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild({\n          description: typeof options === 'string' ? options : options.sql,\n          op: \"db\"\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err, result, fields) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err, result, fields) {\n            var _a;\n\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            values(err, result, fields);\n          });\n        }\n\n        return orig.call(this, options, values, callback);\n      };\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Mysql.id = 'Mysql';\n  return Mysql;\n}();\n\nexport { Mysql };","map":{"version":3,"mappings":"AAEA,SAASA,cAAT,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA6C,eAA7C;AAQA;;AACA;AAAA;AAAA;EAAA;IAME;;;IAGO,YAAeC,KAAK,CAACC,EAArB;EA+CR;EA7CC;;;;;EAGOD,4BAAP,UAAiBE,CAAjB,EAAwDC,aAAxD,EAAgF;IAC9E,IAAIC,UAAJ;;IAEA,IAAI;MACF;MACAA,UAAU,GAAGP,cAAc,CAACQ,MAAD,EAAS,yBAAT,CAA3B;IACD,CAHD,CAGE,OAAOC,CAAP,EAAU;MACVP,MAAM,CAACQ,KAAP,CAAa,0DAAb;MACA;IACD,CAT6E,CAW9E;IACA;IACA;IACA;;;IACAT,IAAI,CAACM,UAAU,CAACI,SAAZ,EAAuB,OAAvB,EAAgC,UAASC,IAAT,EAAyB;MAC3D,OAAO,UAAwBC,OAAxB,EAA0CC,MAA1C,EAA2DC,QAA3D,EAA4E;;;QACjF,IAAMC,KAAK,GAAGV,aAAa,GAAGW,QAAhB,EAAd;QACA,IAAMC,UAAU,SAAGF,KAAH,MAAQ,IAAR,IAAQG,aAAR,GAAQ,MAAR,GAAQA,GAAEC,OAAF,EAAxB;QACA,IAAMC,IAAI,SAAGH,UAAH,MAAa,IAAb,IAAaI,aAAb,GAAa,MAAb,GAAaA,GAAEC,UAAF,CAAa;UAClCC,WAAW,EAAE,OAAOX,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAyCA,OAA2B,CAACY,GADhD;UAElCC,EAAE,EAAE;QAF8B,CAAb,CAAvB;;QAKA,IAAI,OAAOX,QAAP,KAAoB,UAAxB,EAAoC;UAClC,OAAOH,IAAI,CAACe,IAAL,CAAU,IAAV,EAAgBd,OAAhB,EAAyBC,MAAzB,EAAiC,UAASc,GAAT,EAAqBC,MAArB,EAAsCC,MAAtC,EAAqD;;;YAC3F,gBAAI,IAAJ,IAAIX,aAAJ,GAAI,MAAJ,GAAIA,GAAEY,MAAF,EAAJ;YACAhB,QAAQ,CAACa,GAAD,EAAMC,MAAN,EAAcC,MAAd,CAAR;UACD,CAHM,CAAP;QAID;;QAED,IAAI,OAAOhB,MAAP,KAAkB,UAAtB,EAAkC;UAChC,OAAOF,IAAI,CAACe,IAAL,CAAU,IAAV,EAAgBd,OAAhB,EAAyB,UAASe,GAAT,EAAqBC,MAArB,EAAsCC,MAAtC,EAAqD;;;YACnF,gBAAI,IAAJ,IAAIX,aAAJ,GAAI,MAAJ,GAAIA,GAAEY,MAAF,EAAJ;YACAjB,MAAM,CAACc,GAAD,EAAMC,MAAN,EAAcC,MAAd,CAAN;UACD,CAHM,CAAP;QAID;;QAED,OAAOlB,IAAI,CAACe,IAAL,CAAU,IAAV,EAAgBd,OAAhB,EAAyBC,MAAzB,EAAiCC,QAAjC,CAAP;MACD,CAvBD;IAwBD,CAzBG,CAAJ;EA0BD,CAzCM;EAbP;;;;;EAGcZ,WAAa,OAAb;EAoDhB;AAAC,CAxDD;;SAAaA","names":["dynamicRequire","fill","logger","Mysql","id","_","getCurrentHub","connection","module","e","error","prototype","orig","options","values","callback","scope","getScope","parentSpan","_a","getSpan","span","_b","startChild","description","sql","op","call","err","result","fields","finish"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\integrations\\mysql.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration } from '@sentry/types';\nimport { dynamicRequire, fill, logger } from '@sentry/utils';\n\ninterface MysqlConnection {\n  prototype: {\n    query: () => void;\n  };\n}\n\n/** Tracing integration for node-mysql package */\nexport class Mysql implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mysql';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mysql.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    let connection: MysqlConnection;\n\n    try {\n      // Unfortunatelly mysql is using some custom loading system and `Connection` is not exported directly.\n      connection = dynamicRequire(module, 'mysql/lib/Connection.js');\n    } catch (e) {\n      logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    }\n\n    // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n    fill(connection.prototype, 'query', function(orig: () => void) {\n      return function(this: unknown, options: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof options === 'string' ? options : (options as { sql: string }).sql,\n          op: `db`,\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function(err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function(err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            values(err, result, fields);\n          });\n        }\n\n        return orig.call(this, options, values, callback);\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}