{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\n/** Regular expression used to parse a Dsn. */\n\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n/** Error message */\n\nvar ERROR_MESSAGE = 'Invalid Dsn';\n/** The Sentry Dsn, identifying a Sentry instance and project. */\n\nvar Dsn =\n/** @class */\nfunction () {\n  /** Creates a new Dsn component */\n  function Dsn(from) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n\n\n  Dsn.prototype.toString = function (withPassword) {\n    if (withPassword === void 0) {\n      withPassword = false;\n    }\n\n    var _a = this,\n        host = _a.host,\n        path = _a.path,\n        pass = _a.pass,\n        port = _a.port,\n        projectId = _a.projectId,\n        protocol = _a.protocol,\n        user = _a.user;\n\n    return protocol + \"://\" + user + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n  };\n  /** Parses a string into this Dsn. */\n\n\n  Dsn.prototype._fromString = function (str) {\n    var match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    var _a = __read(match.slice(1), 6),\n        protocol = _a[0],\n        user = _a[1],\n        _b = _a[2],\n        pass = _b === void 0 ? '' : _b,\n        host = _a[3],\n        _c = _a[4],\n        port = _c === void 0 ? '' : _c,\n        lastPath = _a[5];\n\n    var path = '';\n    var projectId = lastPath;\n    var split = projectId.split('/');\n\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n\n    if (projectId) {\n      var projectMatch = projectId.match(/^\\d+/);\n\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({\n      host: host,\n      pass: pass,\n      path: path,\n      projectId: projectId,\n      port: port,\n      protocol: protocol,\n      user: user\n    });\n  };\n  /** Maps Dsn components into this instance. */\n\n\n  Dsn.prototype._fromComponents = function (components) {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  };\n  /** Validates this Dsn and throws on error. */\n\n\n  Dsn.prototype._validate = function () {\n    var _this = this;\n\n    ['protocol', 'user', 'host', 'projectId'].forEach(function (component) {\n      if (!_this[component]) {\n        throw new SentryError(ERROR_MESSAGE + \": \" + component + \" missing\");\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid projectId \" + this.projectId);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid protocol \" + this.protocol);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid port \" + this.port);\n    }\n  };\n\n  return Dsn;\n}();\n\nexport { Dsn };","map":{"version":3,"mappings":"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","names":["SentryError","DSN_REGEX","ERROR_MESSAGE","from","_fromString","_fromComponents","_validate","Dsn","withPassword","host","path","pass","port","projectId","protocol","user","str","match","exec","_b","_c","lastPath","split","length","slice","join","pop","projectMatch","components","forEach","_this","component","isNaN","parseInt"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\utils\\src\\dsn.ts"],"sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}