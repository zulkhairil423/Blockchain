{"ast":null,"code":"import { logger, SentryError } from '@sentry/utils';\nimport { NoopTransport } from './transports/noop';\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\n\nvar BaseBackend =\n/** @class */\nfunction () {\n  /** Creates a new backend instance. */\n  function BaseBackend(options) {\n    this._options = options;\n\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n\n    this._transport = this._setupTransport();\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  BaseBackend.prototype.eventFromException = function (_exception, _hint) {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.sendEvent = function (event) {\n    this._transport.sendEvent(event).then(null, function (reason) {\n      logger.error(\"Error while sending event: \" + reason);\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.sendSession = function (session) {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    this._transport.sendSession(session).then(null, function (reason) {\n      logger.error(\"Error while sending session: \" + reason);\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseBackend.prototype.getTransport = function () {\n    return this._transport;\n  };\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n\n\n  BaseBackend.prototype._setupTransport = function () {\n    return new NoopTransport();\n  };\n\n  return BaseBackend;\n}();\n\nexport { BaseBackend };","map":{"version":3,"mappings":"AACA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,eAApC;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AAmDA;;;;;AAIA;AAAA;AAAA;EAOE;EACA,qBAAmBC,OAAnB,EAA6B;IAC3B,KAAKC,QAAL,GAAgBD,OAAhB;;IACA,IAAI,CAAC,KAAKC,QAAL,CAAcC,GAAnB,EAAwB;MACtBL,MAAM,CAACM,IAAP,CAAY,gDAAZ;IACD;;IACD,KAAKC,UAAL,GAAkB,KAAKC,eAAL,EAAlB;EACD;EAED;;;EAGA;;;EACOC,2CAAP,UAA0BC,UAA1B,EAA2CC,KAA3C,EAA4D;IAC1D,MAAM,IAAIV,WAAJ,CAAgB,sDAAhB,CAAN;EACD,CAFM;EAIP;;;;;EAGOQ,yCAAP,UAAwBG,QAAxB,EAA0CC,MAA1C,EAA6DF,KAA7D,EAA8E;IAC5E,MAAM,IAAIV,WAAJ,CAAgB,oDAAhB,CAAN;EACD,CAFM;EAIP;;;;;EAGOQ,kCAAP,UAAiBK,KAAjB,EAA6B;IAC3B,KAAKP,UAAL,CAAgBQ,SAAhB,CAA0BD,KAA1B,EAAiCE,IAAjC,CAAsC,IAAtC,EAA4C,kBAAM;MAChDhB,MAAM,CAACiB,KAAP,CAAa,gCAA8BC,MAA3C;IACD,CAFD;EAGD,CAJM;EAMP;;;;;EAGOT,oCAAP,UAAmBU,OAAnB,EAAmC;IACjC,IAAI,CAAC,KAAKZ,UAAL,CAAgBa,WAArB,EAAkC;MAChCpB,MAAM,CAACM,IAAP,CAAY,yEAAZ;MACA;IACD;;IAED,KAAKC,UAAL,CAAgBa,WAAhB,CAA4BD,OAA5B,EAAqCH,IAArC,CAA0C,IAA1C,EAAgD,kBAAM;MACpDhB,MAAM,CAACiB,KAAP,CAAa,kCAAgCC,MAA7C;IACD,CAFD;EAGD,CATM;EAWP;;;;;EAGOT,qCAAP;IACE,OAAO,KAAKF,UAAZ;EACD,CAFM;EAIP;;;;;EAGUE,wCAAV;IACE,OAAO,IAAIP,aAAJ,EAAP;EACD,CAFS;;EAGZ;AAAC,CAnED","names":["logger","SentryError","NoopTransport","options","_options","dsn","warn","_transport","_setupTransport","BaseBackend","_exception","_hint","_message","_level","event","sendEvent","then","error","reason","session","sendSession"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\core\\src\\basebackend.ts"],"sourcesContent":["import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    this._transport.sendSession(session).then(null, reason => {\n      logger.error(`Error while sending session: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}