{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEvmStep = exports.isDecodedCallTrace = exports.isCallTrace = exports.isDecodedCreateTrace = exports.isCreateTrace = exports.isPrecompileTrace = void 0;\n\nfunction isPrecompileTrace(trace) {\n  return \"precompile\" in trace;\n}\n\nexports.isPrecompileTrace = isPrecompileTrace;\n\nfunction isCreateTrace(trace) {\n  return \"code\" in trace && !isCallTrace(trace);\n}\n\nexports.isCreateTrace = isCreateTrace;\n\nfunction isDecodedCreateTrace(trace) {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\n\nexports.isDecodedCreateTrace = isDecodedCreateTrace;\n\nfunction isCallTrace(trace) {\n  return \"code\" in trace && \"calldata\" in trace;\n}\n\nexports.isCallTrace = isCallTrace;\n\nfunction isDecodedCallTrace(trace) {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\n\nexports.isDecodedCallTrace = isDecodedCallTrace;\n\nfunction isEvmStep(step) {\n  return \"pc\" in step && step.pc !== undefined;\n}\n\nexports.isEvmStep = isEvmStep;","map":{"version":3,"mappings":";;;;;;;AA0DA,SAAgBA,iBAAhB,CACEC,KADF,EACqB;EAEnB,OAAO,gBAAgBA,KAAvB;AACD;;AAJDC;;AAMA,SAAgBC,aAAhB,CACEF,KADF,EACqB;EAEnB,OAAO,UAAUA,KAAV,IAAmB,CAACG,WAAW,CAACH,KAAD,CAAtC;AACD;;AAJDC;;AAMA,SAAgBG,oBAAhB,CACEJ,KADF,EACqB;EAEnB,OAAOE,aAAa,CAACF,KAAD,CAAb,IAAwBA,KAAK,CAACK,QAAN,KAAmBC,SAAlD;AACD;;AAJDL;;AAMA,SAAgBE,WAAhB,CAA4BH,KAA5B,EAA+C;EAC7C,OAAO,UAAUA,KAAV,IAAmB,cAAcA,KAAxC;AACD;;AAFDC;;AAIA,SAAgBM,kBAAhB,CACEP,KADF,EACqB;EAEnB,OAAOG,WAAW,CAACH,KAAD,CAAX,IAAsBA,KAAK,CAACK,QAAN,KAAmBC,SAAhD;AACD;;AAJDL;;AAMA,SAAgBO,SAAhB,CAA0BC,IAA1B,EAAgD;EAC9C,OAAO,QAAQA,IAAR,IAAgBA,IAAI,CAACC,EAAL,KAAYJ,SAAnC;AACD;;AAFDL","names":["isPrecompileTrace","trace","exports","isCreateTrace","isCallTrace","isDecodedCreateTrace","bytecode","undefined","isDecodedCallTrace","isEvmStep","step","pc"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\hardhat-network\\stack-traces\\message-trace.ts"],"sourcesContent":["import type { EvmError } from \"@nomicfoundation/ethereumjs-evm\";\n\nimport type { Bytecode } from \"./model\";\n\nexport type MessageTrace =\n  | CreateMessageTrace\n  | CallMessageTrace\n  | PrecompileMessageTrace;\n\nexport type EvmMessageTrace = CreateMessageTrace | CallMessageTrace;\n\nexport type DecodedEvmMessageTrace =\n  | DecodedCreateMessageTrace\n  | DecodedCallMessageTrace;\n\nexport interface BaseMessageTrace {\n  value: bigint;\n  returnData: Buffer;\n  error?: EvmError;\n  gasUsed: bigint;\n  depth: number;\n}\n\nexport interface PrecompileMessageTrace extends BaseMessageTrace {\n  precompile: number;\n  calldata: Buffer;\n}\n\nexport interface BaseEvmMessageTrace extends BaseMessageTrace {\n  code: Buffer;\n  value: bigint;\n  returnData: Buffer;\n  error?: EvmError;\n  steps: MessageTraceStep[];\n  bytecode?: Bytecode;\n  // The following is just an optimization: When processing this traces it's useful to know ahead of\n  // time how many subtraces there are.\n  numberOfSubtraces: number;\n}\n\nexport interface CreateMessageTrace extends BaseEvmMessageTrace {\n  deployedContract: Buffer | undefined;\n}\n\nexport interface CallMessageTrace extends BaseEvmMessageTrace {\n  calldata: Buffer;\n  address: Buffer;\n  codeAddress: Buffer;\n}\n\nexport interface DecodedCreateMessageTrace extends CreateMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport interface DecodedCallMessageTrace extends CallMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport function isPrecompileTrace(\n  trace: MessageTrace\n): trace is PrecompileMessageTrace {\n  return \"precompile\" in trace;\n}\n\nexport function isCreateTrace(\n  trace: MessageTrace\n): trace is CreateMessageTrace {\n  return \"code\" in trace && !isCallTrace(trace);\n}\n\nexport function isDecodedCreateTrace(\n  trace: MessageTrace\n): trace is DecodedCreateMessageTrace {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isCallTrace(trace: MessageTrace): trace is CallMessageTrace {\n  return \"code\" in trace && \"calldata\" in trace;\n}\n\nexport function isDecodedCallTrace(\n  trace: MessageTrace\n): trace is DecodedCallMessageTrace {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isEvmStep(step: MessageTraceStep): step is EvmStep {\n  return \"pc\" in step && step.pc !== undefined;\n}\n\nexport type MessageTraceStep = MessageTrace | EvmStep;\n\nexport interface EvmStep {\n  pc: number;\n}\n"]},"metadata":{},"sourceType":"script"}