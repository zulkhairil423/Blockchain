{"ast":null,"code":"import { isString } from './is';\nimport { normalize } from './object';\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\nexport function isNodeEnv() {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n/** Default request keys that'll be used to extract data from the request */\n\nvar DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\n\nexport function extractNodeRequestData(req, keys) {\n  if (keys === void 0) {\n    keys = DEFAULT_REQUEST_KEYS;\n  } // make sure we can safely use dynamicRequire below\n\n\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  var requestData = {}; // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n\n  var headers = req.headers || req.header || {}; // method:\n  //   node, express, koa: req.method\n\n  var method = req.method; // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n\n  var host = req.hostname || req.host || headers.host || '<no host>'; // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n\n  var protocol = req.protocol === 'https' || req.secure || (req.socket || {}).encrypted ? 'https' : 'http'; // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n\n  var originalUrl = req.originalUrl || req.url || ''; // absolute url\n\n  var absoluteUrl = protocol + \"://\" + host + originalUrl;\n  keys.forEach(function (key) {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n\n      case 'method':\n        requestData.method = method;\n        break;\n\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        } // body data:\n        //   node, express, koa: req.body\n\n\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n\n        break;\n\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = req[key];\n        }\n\n    }\n  });\n  return requestData;\n}","map":{"version":3,"mappings":"AAGA,SAASA,QAAT,QAAyB,MAAzB;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA;;;;;;AAKA,OAAM,SAAUC,SAAV,GAAmB;EACvB,OAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+B,OAAOC,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C,CAA1E,MAAiF,kBAAxF;AACD;AAED;;;;;AAKA;;AACA,OAAM,SAAUC,cAAV,CAAyBC,GAAzB,EAAmCC,OAAnC,EAAkD;EACtD;EACA,OAAOD,GAAG,CAACE,OAAJ,CAAYD,OAAZ,CAAP;AACD;AAED;;AACA,IAAME,oBAAoB,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,QAA/B,EAAyC,cAAzC,EAAyD,KAAzD,CAA7B;AAEA;;;;;;;;;AAQA,OAAM,SAAUC,sBAAV,CACJC,GADI,EAEJC,IAFI,EAEiC;EAArC;IAAAA;EAAqC,EAErC;;;EACA,IAAI,CAACb,SAAS,EAAd,EAAkB;IAChB,MAAM,IAAIc,KAAJ,CAAU,2DAAV,CAAN;EACD;;EAED,IAAMC,WAAW,GAA2B,EAA5C,CAPqC,CASrC;EACA;EACA;;EACA,IAAMC,OAAO,GAAIJ,GAAG,CAACI,OAAJ,IAAeJ,GAAG,CAACK,MAAnB,IAA6B,EAA9C,CAZqC,CAgBrC;EACA;;EACA,IAAMC,MAAM,GAAGN,GAAG,CAACM,MAAnB,CAlBqC,CAmBrC;EACA;EACA;EACA;;EACA,IAAMC,IAAI,GAAGP,GAAG,CAACQ,QAAJ,IAAgBR,GAAG,CAACO,IAApB,IAA4BH,OAAO,CAACG,IAApC,IAA4C,WAAzD,CAvBqC,CAwBrC;EACA;EACA;;EACA,IAAME,QAAQ,GACZT,GAAG,CAACS,QAAJ,KAAiB,OAAjB,IAA4BT,GAAG,CAACU,MAAhC,IAA2C,CAACV,GAAG,CAACW,MAAJ,IAAc,EAAf,EAA+CC,SAA1F,GACI,OADJ,GAEI,MAHN,CA3BqC,CA+BrC;EACA;EACA;;EACA,IAAMC,WAAW,GAAIb,GAAG,CAACa,WAAJ,IAAmBb,GAAG,CAACc,GAAvB,IAA8B,EAAnD,CAlCqC,CAmCrC;;EACA,IAAMC,WAAW,GAAMN,QAAQ,QAAR,GAAcF,IAAd,GAAqBM,WAA5C;EAEAZ,IAAI,CAACe,OAAL,CAAa,eAAG;IACd,QAAQC,GAAR;MACE,KAAK,SAAL;QACEd,WAAW,CAACC,OAAZ,GAAsBA,OAAtB;QACA;;MACF,KAAK,QAAL;QACED,WAAW,CAACG,MAAZ,GAAqBA,MAArB;QACA;;MACF,KAAK,KAAL;QACEH,WAAW,CAACW,GAAZ,GAAkBC,WAAlB;QACA;;MACF,KAAK,SAAL;QACE;QACA;QACA;QACA;QACAZ,WAAW,CAACe,OAAZ,GAAsBlB,GAAG,CAACkB,OAAJ,IAAexB,cAAc,CAACyB,MAAD,EAAS,QAAT,CAAd,CAAiCC,KAAjC,CAAuChB,OAAO,CAACiB,MAAR,IAAkB,EAAzD,CAArC;QACA;;MACF,KAAK,cAAL;QACE;QACA;QACA;QACA;QACAlB,WAAW,CAACmB,YAAZ,GAA2B5B,cAAc,CAACyB,MAAD,EAAS,KAAT,CAAd,CAA8BC,KAA9B,CAAoCP,WAAW,IAAI,EAAnD,EAAuD,KAAvD,EAA8DU,KAAzF;QACA;;MACF,KAAK,MAAL;QACE,IAAIjB,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,MAAnC,EAA2C;UACzC;QACD,CAHH,CAIE;QACA;;;QACA,IAAIN,GAAG,CAACwB,IAAJ,KAAaC,SAAjB,EAA4B;UAC1BtB,WAAW,CAACuB,IAAZ,GAAmBxC,QAAQ,CAACc,GAAG,CAACwB,IAAL,CAAR,GAAqBxB,GAAG,CAACwB,IAAzB,GAAgCG,IAAI,CAACC,SAAL,CAAezC,SAAS,CAACa,GAAG,CAACwB,IAAL,CAAxB,CAAnD;QACD;;QACD;;MACF;QACE,IAAI,GAAGK,cAAH,CAAkBrC,IAAlB,CAAuBQ,GAAvB,EAA4BiB,GAA5B,CAAJ,EAAsC;UACpCd,WAAW,CAACc,GAAD,CAAX,GAAoBjB,GAA8B,CAACiB,GAAD,CAAlD;QACD;;IArCL;EAuCD,CAxCD;EA0CA,OAAOd,WAAP;AACD","names":["isString","normalize","isNodeEnv","Object","prototype","toString","call","process","dynamicRequire","mod","request","require","DEFAULT_REQUEST_KEYS","extractNodeRequestData","req","keys","Error","requestData","headers","header","method","host","hostname","protocol","secure","socket","encrypted","originalUrl","url","absoluteUrl","forEach","key","cookies","module","parse","cookie","query_string","query","body","undefined","data","JSON","stringify","hasOwnProperty"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\utils\\src\\node.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtractedNodeRequestData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { normalize } from './object';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/** Default request keys that'll be used to extract data from the request */\nconst DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\nexport function extractNodeRequestData(\n  req: { [key: string]: any },\n  keys: string[] = DEFAULT_REQUEST_KEYS,\n): ExtractedNodeRequestData {\n  // make sure we can safely use dynamicRequire below\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  const headers = (req.headers || req.header || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  const protocol =\n    req.protocol === 'https' || req.secure || ((req.socket || {}) as { encrypted?: boolean }).encrypted\n      ? 'https'\n      : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  const originalUrl = (req.originalUrl || req.url || '') as string;\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n\n  keys.forEach(key => {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n      case 'method':\n        requestData.method = method;\n        break;\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   node, express, koa: req.body\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n    }\n  });\n\n  return requestData;\n}\n"]},"metadata":{},"sourceType":"module"}