{"ast":null,"code":"import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n/** A simple queue that holds promises. */\n\nvar PromiseBuffer =\n/** @class */\nfunction () {\n  function PromiseBuffer(_limit) {\n    this._limit = _limit;\n    /** Internal set of queued Promises */\n\n    this._buffer = [];\n  }\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n\n\n  PromiseBuffer.prototype.isReady = function () {\n    return this._limit === undefined || this.length() < this._limit;\n  };\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n\n\n  PromiseBuffer.prototype.add = function (task) {\n    var _this = this;\n\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n\n    task.then(function () {\n      return _this.remove(task);\n    }).then(null, function () {\n      return _this.remove(task).then(null, function () {// We have to add this catch here otherwise we have an unhandledPromiseRejection\n        // because it's a new Promise chain.\n      });\n    });\n    return task;\n  };\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n\n\n  PromiseBuffer.prototype.remove = function (task) {\n    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n\n    return removedTask;\n  };\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n\n\n  PromiseBuffer.prototype.length = function () {\n    return this._buffer.length;\n  };\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n\n\n  PromiseBuffer.prototype.drain = function (timeout) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve) {\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(_this._buffer).then(function () {\n        clearTimeout(capturedSetTimeout);\n        resolve(true);\n      }).then(null, function () {\n        resolve(true);\n      });\n    });\n  };\n\n  return PromiseBuffer;\n}();\n\nexport { PromiseBuffer };","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;AACA;AAAA;AAAA;EAIE,uBAA6BC,MAA7B,EAA4C;IAAf;IAH7B;;IACiB,eAAiC,EAAjC;EAE+B;EAEhD;;;;;EAGOC,kCAAP;IACE,OAAO,KAAKD,MAAL,KAAgBE,SAAhB,IAA6B,KAAKC,MAAL,KAAgB,KAAKH,MAAzD;EACD,CAFM;EAIP;;;;;;;;EAMOC,8BAAP,UAAWG,IAAX,EAA+B;IAA/B;;IACE,IAAI,CAAC,KAAKC,OAAL,EAAL,EAAqB;MACnB,OAAON,WAAW,CAACO,MAAZ,CAAmB,IAAIR,WAAJ,CAAgB,iDAAhB,CAAnB,CAAP;IACD;;IACD,IAAI,KAAKS,OAAL,CAAaC,OAAb,CAAqBJ,IAArB,MAA+B,CAAC,CAApC,EAAuC;MACrC,KAAKG,OAAL,CAAaE,IAAb,CAAkBL,IAAlB;IACD;;IACDA,IAAI,CACDM,IADH,CACQ;MAAM,YAAI,CAACC,MAAL,CAAYP,IAAZ;IAAiB,CAD/B,EAEGM,IAFH,CAEQ,IAFR,EAEc;MACV,YAAI,CAACC,MAAL,CAAYP,IAAZ,EAAkBM,IAAlB,CAAuB,IAAvB,EAA6B,aAC3B;QACA;MACD,CAHD;IAGE,CANN;IAQA,OAAON,IAAP;EACD,CAhBM;EAkBP;;;;;;;;EAMOH,iCAAP,UAAcG,IAAd,EAAkC;IAChC,IAAMQ,WAAW,GAAG,KAAKL,OAAL,CAAaM,MAAb,CAAoB,KAAKN,OAAL,CAAaC,OAAb,CAAqBJ,IAArB,CAApB,EAAgD,CAAhD,EAAmD,CAAnD,CAApB;;IACA,OAAOQ,WAAP;EACD,CAHM;EAKP;;;;;EAGOX,iCAAP;IACE,OAAO,KAAKM,OAAL,CAAaJ,MAApB;EACD,CAFM;EAIP;;;;;;;;EAMOF,gCAAP,UAAaa,OAAb,EAA6B;IAA7B;;IACE,OAAO,IAAIf,WAAJ,CAAyB,mBAAO;MACrC,IAAMgB,kBAAkB,GAAGC,UAAU,CAAC;QACpC,IAAIF,OAAO,IAAIA,OAAO,GAAG,CAAzB,EAA4B;UAC1BG,OAAO,CAAC,KAAD,CAAP;QACD;MACF,CAJoC,EAIlCH,OAJkC,CAArC;MAKAf,WAAW,CAACmB,GAAZ,CAAgBC,KAAI,CAACZ,OAArB,EACGG,IADH,CACQ;QACJU,YAAY,CAACL,kBAAD,CAAZ;QACAE,OAAO,CAAC,IAAD,CAAP;MACD,CAJH,EAKGP,IALH,CAKQ,IALR,EAKc;QACVO,OAAO,CAAC,IAAD,CAAP;MACD,CAPH;IAQD,CAdM,CAAP;EAeD,CAhBM;;EAiBT;AAAC,CA9ED","names":["SentryError","SyncPromise","_limit","PromiseBuffer","undefined","length","task","isReady","reject","_buffer","indexOf","push","then","remove","removedTask","splice","timeout","capturedSetTimeout","setTimeout","resolve","all","_this","clearTimeout"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\utils\\src\\promisebuffer.ts"],"sourcesContent":["import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}