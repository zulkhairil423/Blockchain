{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFileTrueCaseSync = exports.getFileTrueCase = exports.getAllFilesMatchingSync = exports.getAllFilesMatching = exports.getRealPathSync = exports.getRealPath = exports.InvalidDirectoryError = exports.FileNotFoundError = exports.FileSystemAccessError = void 0;\n\nconst promises_1 = __importDefault(require(\"fs/promises\"));\n\nconst fs_1 = __importDefault(require(\"fs\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst errors_1 = require(\"../core/errors\"); // We use this error to encapsulate any other error possibly thrown by node's\n// fs apis, as sometimes their errors don't have stack traces.\n\n\nclass FileSystemAccessError extends errors_1.CustomError {}\n\nexports.FileSystemAccessError = FileSystemAccessError;\n\nclass FileNotFoundError extends errors_1.CustomError {\n  constructor(filePath, parent) {\n    super(`File ${filePath} not found`, parent);\n  }\n\n}\n\nexports.FileNotFoundError = FileNotFoundError;\n\nclass InvalidDirectoryError extends errors_1.CustomError {\n  constructor(filePath, parent) {\n    super(`Invalid directory ${filePath}`, parent);\n  }\n\n}\n\nexports.InvalidDirectoryError = InvalidDirectoryError;\n/**\n * Returns the real path of absolutePath, resolving symlinks.\n *\n * @throws FileNotFoundError if absolutePath doesn't exist.\n */\n\nasync function getRealPath(absolutePath) {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return await promises_1.default.realpath(path_1.default.normalize(absolutePath));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\nexports.getRealPath = getRealPath;\n/**\n * Sync version of getRealPath\n *\n * @see getRealCase\n */\n\nfunction getRealPathSync(absolutePath) {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return fs_1.default.realpathSync.native(path_1.default.normalize(absolutePath));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\nexports.getRealPathSync = getRealPathSync;\n/**\n * Returns an array of files (not dirs) that match a condition.\n *\n * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.\n * @param matches A function to filter files (not directories)\n * @returns An An array of absolute paths. Each file has its true case, except\n *  for the initial absolutePathToDir part, which preserves the given casing.\n *  No order is guaranteed.\n */\n\nasync function getAllFilesMatching(absolutePathToDir, matches) {\n  const dir = await readdir(absolutePathToDir);\n  const results = await Promise.all(dir.map(async file => {\n    const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n    const stats = await promises_1.default.stat(absolutePathToFile);\n\n    if (stats.isDirectory()) {\n      const files = await getAllFilesMatching(absolutePathToFile, matches);\n      return files.flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  }));\n  return results.flat();\n}\n\nexports.getAllFilesMatching = getAllFilesMatching;\n/**\n * Sync version of getAllFilesMatching\n *\n * @see getAllFilesMatching\n */\n\nfunction getAllFilesMatchingSync(absolutePathToDir, matches) {\n  const dir = readdirSync(absolutePathToDir);\n  const results = dir.map(file => {\n    const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n    const stats = fs_1.default.statSync(absolutePathToFile);\n\n    if (stats.isDirectory()) {\n      return getAllFilesMatchingSync(absolutePathToFile, matches).flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  });\n  return results.flat();\n}\n\nexports.getAllFilesMatchingSync = getAllFilesMatchingSync;\n/**\n * Returns the true case relative path of `relativePath` from `from`, without\n * resolving symlinks.\n */\n\nasync function getFileTrueCase(from, relativePath) {\n  const dirEntries = await readdir(from);\n  const parts = relativePath.split(path_1.default.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path_1.default.join(dirEntry, await getFileTrueCase(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n    }\n  } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n  throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\n\nexports.getFileTrueCase = getFileTrueCase;\n/**\n * Sync version of getFileTrueCase\n *\n * @see getFileTrueCase\n */\n\nfunction getFileTrueCaseSync(from, relativePath) {\n  const dirEntries = readdirSync(from);\n  const parts = relativePath.split(path_1.default.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path_1.default.join(dirEntry, getFileTrueCaseSync(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n    }\n  } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n  throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\n\nexports.getFileTrueCaseSync = getFileTrueCaseSync;\n\nasync function readdir(absolutePathToDir) {\n  try {\n    return await promises_1.default.readdir(absolutePathToDir);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\nfunction readdirSync(absolutePathToDir) {\n  try {\n    return fs_1.default.readdirSync(absolutePathToDir);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    } // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n\n    throw new FileSystemAccessError(e.message, e);\n  }\n}","map":{"version":3,"mappings":"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","names":["FileSystemAccessError","errors_1","exports","FileNotFoundError","constructor","filePath","parent","InvalidDirectoryError","getRealPath","absolutePath","promises_1","realpath","path_1","normalize","e","code","message","getRealPathSync","fs_1","realpathSync","native","getAllFilesMatching","absolutePathToDir","matches","dir","readdir","results","Promise","all","map","file","absolutePathToFile","join","stats","stat","isDirectory","files","flat","undefined","getAllFilesMatchingSync","readdirSync","statSync","getFileTrueCase","from","relativePath","dirEntries","parts","split","sep","nextDirLowerCase","toLowerCase","dirEntry","length","relative","getFileTrueCaseSync"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\util\\fs-utils.ts"],"sourcesContent":["import fsPromises from \"fs/promises\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { CustomError } from \"../core/errors\";\n\n// We use this error to encapsulate any other error possibly thrown by node's\n// fs apis, as sometimes their errors don't have stack traces.\nexport class FileSystemAccessError extends CustomError {}\n\nexport class FileNotFoundError extends CustomError {\n  constructor(filePath: string, parent?: Error) {\n    super(`File ${filePath} not found`, parent);\n  }\n}\nexport class InvalidDirectoryError extends CustomError {\n  constructor(filePath: string, parent: Error) {\n    super(`Invalid directory ${filePath}`, parent);\n  }\n}\n\n/**\n * Returns the real path of absolutePath, resolving symlinks.\n *\n * @throws FileNotFoundError if absolutePath doesn't exist.\n */\nexport async function getRealPath(absolutePath: string): Promise<string> {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return await fsPromises.realpath(path.normalize(absolutePath));\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\n/**\n * Sync version of getRealPath\n *\n * @see getRealCase\n */\nexport function getRealPathSync(absolutePath: string): string {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return fs.realpathSync.native(path.normalize(absolutePath));\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\n/**\n * Returns an array of files (not dirs) that match a condition.\n *\n * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.\n * @param matches A function to filter files (not directories)\n * @returns An An array of absolute paths. Each file has its true case, except\n *  for the initial absolutePathToDir part, which preserves the given casing.\n *  No order is guaranteed.\n */\nexport async function getAllFilesMatching(\n  absolutePathToDir: string,\n  matches?: (absolutePathToFile: string) => boolean\n): Promise<string[]> {\n  const dir = await readdir(absolutePathToDir);\n\n  const results = await Promise.all(\n    dir.map(async (file) => {\n      const absolutePathToFile = path.join(absolutePathToDir, file);\n      const stats = await fsPromises.stat(absolutePathToFile);\n      if (stats.isDirectory()) {\n        const files = await getAllFilesMatching(absolutePathToFile, matches);\n        return files.flat();\n      } else if (matches === undefined || matches(absolutePathToFile)) {\n        return absolutePathToFile;\n      } else {\n        return [];\n      }\n    })\n  );\n\n  return results.flat();\n}\n\n/**\n * Sync version of getAllFilesMatching\n *\n * @see getAllFilesMatching\n */\nexport function getAllFilesMatchingSync(\n  absolutePathToDir: string,\n  matches?: (absolutePathToFile: string) => boolean\n): string[] {\n  const dir = readdirSync(absolutePathToDir);\n\n  const results = dir.map((file) => {\n    const absolutePathToFile = path.join(absolutePathToDir, file);\n    const stats = fs.statSync(absolutePathToFile);\n    if (stats.isDirectory()) {\n      return getAllFilesMatchingSync(absolutePathToFile, matches).flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  });\n\n  return results.flat();\n}\n\n/**\n * Returns the true case relative path of `relativePath` from `from`, without\n * resolving symlinks.\n */\nexport async function getFileTrueCase(\n  from: string,\n  relativePath: string\n): Promise<string> {\n  const dirEntries = await readdir(from);\n\n  const parts = relativePath.split(path.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path.join(\n        dirEntry,\n        await getFileTrueCase(\n          path.join(from, dirEntry),\n          path.relative(parts[0], relativePath)\n        )\n      );\n    }\n  }\n\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path.join(from, relativePath));\n}\n\n/**\n * Sync version of getFileTrueCase\n *\n * @see getFileTrueCase\n */\nexport function getFileTrueCaseSync(\n  from: string,\n  relativePath: string\n): string {\n  const dirEntries = readdirSync(from);\n\n  const parts = relativePath.split(path.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path.join(\n        dirEntry,\n        getFileTrueCaseSync(\n          path.join(from, dirEntry),\n          path.relative(parts[0], relativePath)\n        )\n      );\n    }\n  }\n\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path.join(from, relativePath));\n}\n\nasync function readdir(absolutePathToDir: string) {\n  try {\n    return await fsPromises.readdir(absolutePathToDir);\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\nfunction readdirSync(absolutePathToDir: string) {\n  try {\n    return fs.readdirSync(absolutePathToDir);\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}