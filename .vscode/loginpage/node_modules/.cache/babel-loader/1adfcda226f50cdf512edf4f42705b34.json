{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nexports.codes = {\n  ERR_INPUT_TYPE_NOT_ALLOWED: createErrorCtor(joinArgs('ERR_INPUT_TYPE_NOT_ALLOWED')),\n  ERR_INVALID_ARG_VALUE: createErrorCtor(joinArgs('ERR_INVALID_ARG_VALUE')),\n  ERR_INVALID_MODULE_SPECIFIER: createErrorCtor(joinArgs('ERR_INVALID_MODULE_SPECIFIER')),\n  ERR_INVALID_PACKAGE_CONFIG: createErrorCtor(joinArgs('ERR_INVALID_PACKAGE_CONFIG')),\n  ERR_INVALID_PACKAGE_TARGET: createErrorCtor(joinArgs('ERR_INVALID_PACKAGE_TARGET')),\n  ERR_MANIFEST_DEPENDENCY_MISSING: createErrorCtor(joinArgs('ERR_MANIFEST_DEPENDENCY_MISSING')),\n  ERR_MODULE_NOT_FOUND: createErrorCtor(function (path, base) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'package';\n    return `Cannot find ${type} '${path}' imported from ${base}`;\n  }),\n  ERR_PACKAGE_IMPORT_NOT_DEFINED: createErrorCtor(joinArgs('ERR_PACKAGE_IMPORT_NOT_DEFINED')),\n  ERR_PACKAGE_PATH_NOT_EXPORTED: createErrorCtor(joinArgs('ERR_PACKAGE_PATH_NOT_EXPORTED')),\n  ERR_UNSUPPORTED_DIR_IMPORT: createErrorCtor(joinArgs('ERR_UNSUPPORTED_DIR_IMPORT')),\n  ERR_UNSUPPORTED_ESM_URL_SCHEME: createErrorCtor(joinArgs('ERR_UNSUPPORTED_ESM_URL_SCHEME')),\n  ERR_UNKNOWN_FILE_EXTENSION: createErrorCtor(joinArgs('ERR_UNKNOWN_FILE_EXTENSION'))\n};\n\nfunction joinArgs(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return [name, ...args].join(' ');\n  };\n}\n\nfunction createErrorCtor(errorMessageCreator) {\n  return class CustomError extends Error {\n    constructor() {\n      super(errorMessageCreator(...arguments));\n    }\n\n  };\n}\n\nexports.createErrRequireEsm = createErrRequireEsm; // Native ERR_REQUIRE_ESM Error is declared here:\n//   https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L1294-L1313\n// Error class factory is implemented here:\n//   function E: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L323-L341\n//   function makeNodeErrorWithCode: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L251-L278\n// The code below should create an error that matches the native error as closely as possible.\n// Third-party libraries which attempt to catch the native ERR_REQUIRE_ESM should recognize our imitation error.\n\nfunction createErrRequireEsm(filename, parentPath, packageJsonPath) {\n  const code = 'ERR_REQUIRE_ESM';\n  const err = new Error(getErrRequireEsmMessage(filename, parentPath, packageJsonPath)); // Set `name` to be used in stack trace, generate stack trace with that name baked in, then re-declare the `name` field.\n  // This trick is copied from node's source.\n\n  err.name = `Error [${code}]`;\n  err.stack;\n  Object.defineProperty(err, 'name', {\n    value: 'Error',\n    enumerable: false,\n    writable: true,\n    configurable: true\n  });\n  err.code = code;\n  return err;\n} // Copy-pasted from https://github.com/nodejs/node/blob/b533fb3508009e5f567cc776daba8fbf665386a6/lib/internal/errors.js#L1293-L1311\n// so that our error message is identical to the native message.\n\n\nfunction getErrRequireEsmMessage(filename) {\n  let parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let packageJsonPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const ext = path.extname(filename);\n  let msg = `Must use import to load ES Module: ${filename}`;\n\n  if (parentPath && packageJsonPath) {\n    const path = require('path');\n\n    const basename = path.basename(filename) === path.basename(parentPath) ? filename : path.basename(filename);\n    msg += '\\nrequire() of ES modules is not supported.\\nrequire() of ' + `${filename} ${parentPath ? `from ${parentPath} ` : ''}` + `is an ES module file as it is a ${ext} file whose nearest parent ` + `package.json contains \"type\": \"module\" which defines all ${ext} ` + 'files in that package scope as ES modules.\\nInstead ' + 'change the requiring code to use ' + 'import(), or remove \"type\": \"module\" from ' + `${packageJsonPath}.\\n`;\n    return msg;\n  }\n\n  return msg;\n}","map":{"version":3,"names":["path","require","exports","codes","ERR_INPUT_TYPE_NOT_ALLOWED","createErrorCtor","joinArgs","ERR_INVALID_ARG_VALUE","ERR_INVALID_MODULE_SPECIFIER","ERR_INVALID_PACKAGE_CONFIG","ERR_INVALID_PACKAGE_TARGET","ERR_MANIFEST_DEPENDENCY_MISSING","ERR_MODULE_NOT_FOUND","base","type","ERR_PACKAGE_IMPORT_NOT_DEFINED","ERR_PACKAGE_PATH_NOT_EXPORTED","ERR_UNSUPPORTED_DIR_IMPORT","ERR_UNSUPPORTED_ESM_URL_SCHEME","ERR_UNKNOWN_FILE_EXTENSION","name","args","join","errorMessageCreator","CustomError","Error","constructor","createErrRequireEsm","filename","parentPath","packageJsonPath","code","err","getErrRequireEsmMessage","stack","Object","defineProperty","value","enumerable","writable","configurable","ext","extname","msg","basename"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-internal-errors.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\n\nexports.codes = {\n  ERR_INPUT_TYPE_NOT_ALLOWED: createErrorCtor(joinArgs('ERR_INPUT_TYPE_NOT_ALLOWED')),\n  ERR_INVALID_ARG_VALUE: createErrorCtor(joinArgs('ERR_INVALID_ARG_VALUE')),\n  ERR_INVALID_MODULE_SPECIFIER: createErrorCtor(joinArgs('ERR_INVALID_MODULE_SPECIFIER')),\n  ERR_INVALID_PACKAGE_CONFIG: createErrorCtor(joinArgs('ERR_INVALID_PACKAGE_CONFIG')),\n  ERR_INVALID_PACKAGE_TARGET: createErrorCtor(joinArgs('ERR_INVALID_PACKAGE_TARGET')),\n  ERR_MANIFEST_DEPENDENCY_MISSING: createErrorCtor(joinArgs('ERR_MANIFEST_DEPENDENCY_MISSING')),\n  ERR_MODULE_NOT_FOUND: createErrorCtor((path, base, type = 'package') => {\n    return `Cannot find ${type} '${path}' imported from ${base}`\n  }),\n  ERR_PACKAGE_IMPORT_NOT_DEFINED: createErrorCtor(joinArgs('ERR_PACKAGE_IMPORT_NOT_DEFINED')),\n  ERR_PACKAGE_PATH_NOT_EXPORTED: createErrorCtor(joinArgs('ERR_PACKAGE_PATH_NOT_EXPORTED')),\n  ERR_UNSUPPORTED_DIR_IMPORT: createErrorCtor(joinArgs('ERR_UNSUPPORTED_DIR_IMPORT')),\n  ERR_UNSUPPORTED_ESM_URL_SCHEME: createErrorCtor(joinArgs('ERR_UNSUPPORTED_ESM_URL_SCHEME')),\n  ERR_UNKNOWN_FILE_EXTENSION: createErrorCtor(joinArgs('ERR_UNKNOWN_FILE_EXTENSION')),\n}\n\nfunction joinArgs(name) {\n  return (...args) => {\n    return [name, ...args].join(' ')\n  }\n}\n\nfunction createErrorCtor(errorMessageCreator) {\n  return class CustomError extends Error {\n    constructor(...args) {\n      super(errorMessageCreator(...args))\n    }\n  }\n}\nexports.createErrRequireEsm = createErrRequireEsm;\n\n// Native ERR_REQUIRE_ESM Error is declared here:\n//   https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L1294-L1313\n// Error class factory is implemented here:\n//   function E: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L323-L341\n//   function makeNodeErrorWithCode: https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/errors.js#L251-L278\n// The code below should create an error that matches the native error as closely as possible.\n// Third-party libraries which attempt to catch the native ERR_REQUIRE_ESM should recognize our imitation error.\nfunction createErrRequireEsm(filename, parentPath, packageJsonPath) {\n  const code = 'ERR_REQUIRE_ESM'\n  const err = new Error(getErrRequireEsmMessage(filename, parentPath, packageJsonPath))\n  // Set `name` to be used in stack trace, generate stack trace with that name baked in, then re-declare the `name` field.\n  // This trick is copied from node's source.\n  err.name = `Error [${ code }]`\n  err.stack\n  Object.defineProperty(err, 'name', {\n    value: 'Error',\n    enumerable: false,\n    writable: true,\n    configurable: true\n  })\n  err.code = code\n  return err\n}\n\n// Copy-pasted from https://github.com/nodejs/node/blob/b533fb3508009e5f567cc776daba8fbf665386a6/lib/internal/errors.js#L1293-L1311\n// so that our error message is identical to the native message.\nfunction getErrRequireEsmMessage(filename, parentPath = null, packageJsonPath = null) {\n  const ext = path.extname(filename)\n  let msg = `Must use import to load ES Module: ${filename}`;\n  if (parentPath && packageJsonPath) {\n    const path = require('path');\n    const basename = path.basename(filename) === path.basename(parentPath) ?\n      filename : path.basename(filename);\n    msg +=\n      '\\nrequire() of ES modules is not supported.\\nrequire() of ' +\n      `${filename} ${parentPath ? `from ${parentPath} ` : ''}` +\n      `is an ES module file as it is a ${ext} file whose nearest parent ` +\n      `package.json contains \"type\": \"module\" which defines all ${ext} ` +\n      'files in that package scope as ES modules.\\nInstead ' +\n      'change the requiring code to use ' +\n      'import(), or remove \"type\": \"module\" from ' +\n      `${packageJsonPath}.\\n`;\n    return msg;\n  }\n  return msg;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}