{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSubprocessTransport = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst path = __importStar(require(\"path\")); // This class is wrapped in a function to avoid having to\n// import @sentry/node just for the BaseTransport base class\n\n\nfunction getSubprocessTransport() {\n  const {\n    Status,\n    Transports\n  } = require(\"@sentry/node\");\n\n  class SubprocessTransport extends Transports.BaseTransport {\n    async sendEvent(event) {\n      const extra = event.extra ?? {};\n      const {\n        verbose = false,\n        configPath\n      } = extra; // don't send user's full config path for privacy reasons\n\n      delete event.extra?.configPath; // we don't care about the verbose setting\n\n      delete event.extra?.verbose;\n      const serializedEvent = JSON.stringify(event);\n      const env = {\n        HARDHAT_SENTRY_EVENT: serializedEvent,\n        HARDHAT_SENTRY_VERBOSE: verbose.toString()\n      };\n\n      if (configPath !== undefined) {\n        env.HARDHAT_SENTRY_CONFIG_PATH = configPath;\n      }\n\n      const subprocessPath = path.join(__dirname, \"subprocess\");\n      const subprocess = (0, child_process_1.spawn)(process.execPath, [subprocessPath], {\n        detached: true,\n        env,\n        stdio: verbose ? \"inherit\" : \"ignore\"\n      });\n      subprocess.unref();\n      return {\n        status: Status.Success\n      };\n    }\n\n  }\n\n  return SubprocessTransport;\n}\n\nexports.getSubprocessTransport = getSubprocessTransport;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA,2C,CAEA;AACA;;;AACA,SAAgBA,sBAAhB,GAAsC;EACpC,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAyBC,OAAO,CAAC,cAAD,CAAtC;;EAEA,MAAMC,mBAAN,SAAkCF,UAAU,CAACG,aAA7C,CAA0D;IAClC,MAATC,SAAS,CAACC,KAAD,EAAa;MACjC,MAAMC,KAAK,GACTD,KAAK,CAACC,KAAN,IAAe,EADjB;MAEA,MAAM;QAAEC,OAAO,GAAG,KAAZ;QAAmBC;MAAnB,IAAkCF,KAAxC,CAHiC,CAKjC;;MACA,OAAOD,KAAK,CAACC,KAAN,EAAaE,UAApB,CANiC,CAQjC;;MACA,OAAOH,KAAK,CAACC,KAAN,EAAaC,OAApB;MAEA,MAAME,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAxB;MAEA,MAAMO,GAAG,GAA2B;QAClCC,oBAAoB,EAAEJ,eADY;QAElCK,sBAAsB,EAAEP,OAAO,CAACQ,QAAR;MAFU,CAApC;;MAKA,IAAIP,UAAU,KAAKQ,SAAnB,EAA8B;QAC5BJ,GAAG,CAACK,0BAAJ,GAAiCT,UAAjC;MACD;;MAED,MAAMU,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAvB;MAEA,MAAMC,UAAU,GAAG,2BAAMC,OAAO,CAACC,QAAd,EAAwB,CAACN,cAAD,CAAxB,EAA0C;QAC3DO,QAAQ,EAAE,IADiD;QAE3Db,GAF2D;QAG3Dc,KAAK,EAAGnB,OAAO,GAAG,SAAH,GAAe;MAH6B,CAA1C,CAAnB;MAMAe,UAAU,CAACK,KAAX;MAEA,OAAO;QACLC,MAAM,EAAE7B,MAAM,CAAC8B;MADV,CAAP;IAGD;;EApCuD;;EAuC1D,OAAO3B,mBAAP;AACD;;AA3CD4B","names":["getSubprocessTransport","Status","Transports","require","SubprocessTransport","BaseTransport","sendEvent","event","extra","verbose","configPath","serializedEvent","JSON","stringify","env","HARDHAT_SENTRY_EVENT","HARDHAT_SENTRY_VERBOSE","toString","undefined","HARDHAT_SENTRY_CONFIG_PATH","subprocessPath","path","join","__dirname","subprocess","process","execPath","detached","stdio","unref","status","Success","exports"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\sentry\\transport.ts"],"sourcesContent":["import { Event, Response } from \"@sentry/node\";\nimport { spawn } from \"child_process\";\nimport * as path from \"path\";\n\n// This class is wrapped in a function to avoid having to\n// import @sentry/node just for the BaseTransport base class\nexport function getSubprocessTransport(): any {\n  const { Status, Transports } = require(\"@sentry/node\");\n\n  class SubprocessTransport extends Transports.BaseTransport {\n    public async sendEvent(event: Event): Promise<Response> {\n      const extra: { verbose?: boolean; configPath?: string } =\n        event.extra ?? {};\n      const { verbose = false, configPath } = extra;\n\n      // don't send user's full config path for privacy reasons\n      delete event.extra?.configPath;\n\n      // we don't care about the verbose setting\n      delete event.extra?.verbose;\n\n      const serializedEvent = JSON.stringify(event);\n\n      const env: Record<string, string> = {\n        HARDHAT_SENTRY_EVENT: serializedEvent,\n        HARDHAT_SENTRY_VERBOSE: verbose.toString(),\n      };\n\n      if (configPath !== undefined) {\n        env.HARDHAT_SENTRY_CONFIG_PATH = configPath;\n      }\n\n      const subprocessPath = path.join(__dirname, \"subprocess\");\n\n      const subprocess = spawn(process.execPath, [subprocessPath], {\n        detached: true,\n        env,\n        stdio: (verbose ? \"inherit\" : \"ignore\") as any,\n      });\n\n      subprocess.unref();\n\n      return {\n        status: Status.Success,\n      };\n    }\n  }\n\n  return SubprocessTransport;\n}\n"]},"metadata":{},"sourceType":"script"}