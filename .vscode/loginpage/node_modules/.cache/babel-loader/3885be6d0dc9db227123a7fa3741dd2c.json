{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSuccessfulJsonResponse = exports.isValidJsonResponse = exports.isValidJsonRequest = exports.parseJsonResponse = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nconst errors_list_1 = require(\"../core/errors-list\");\n\nfunction parseJsonResponse(text) {\n  try {\n    const json = JSON.parse(text);\n    const responses = Array.isArray(json) ? json : [json];\n\n    for (const response of responses) {\n      if (!isValidJsonResponse(response)) {\n        // We are sending the proper error inside the catch part of the statement.\n        // We just need to raise anything here.\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw new Error();\n      }\n    }\n\n    return json;\n  } catch {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.INVALID_JSON_RESPONSE, {\n      response: text\n    });\n  }\n}\n\nexports.parseJsonResponse = parseJsonResponse;\n\nfunction isValidJsonRequest(payload) {\n  if (payload.jsonrpc !== \"2.0\") {\n    return false;\n  }\n\n  if (typeof payload.id !== \"number\" && typeof payload.id !== \"string\") {\n    return false;\n  }\n\n  if (typeof payload.method !== \"string\") {\n    return false;\n  }\n\n  if (payload.params !== undefined && !Array.isArray(payload.params)) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isValidJsonRequest = isValidJsonRequest;\n\nfunction isValidJsonResponse(payload) {\n  if (payload.jsonrpc !== \"2.0\") {\n    return false;\n  }\n\n  if (typeof payload.id !== \"number\" && typeof payload.id !== \"string\" && payload.id !== null) {\n    return false;\n  }\n\n  if (payload.id === null && payload.error === undefined) {\n    return false;\n  }\n\n  if (payload.result === undefined && payload.error === undefined) {\n    return false;\n  }\n\n  if (payload.error !== undefined) {\n    if (typeof payload.error.code !== \"number\") {\n      return false;\n    }\n\n    if (typeof payload.error.message !== \"string\") {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isValidJsonResponse = isValidJsonResponse;\n\nfunction isSuccessfulJsonResponse(payload) {\n  return \"result\" in payload;\n}\n\nexports.isSuccessfulJsonResponse = isSuccessfulJsonResponse;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AA2BA,SAAgBA,iBAAhB,CACEC,IADF,EACc;EAEZ,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;IAEA,MAAMI,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA/C;;IACA,KAAK,MAAMM,QAAX,IAAuBH,SAAvB,EAAkC;MAChC,IAAI,CAACI,mBAAmB,CAACD,QAAD,CAAxB,EAAoC;QAClC;QACA;QACA;QACA,MAAM,IAAIE,KAAJ,EAAN;MACD;IACF;;IAED,OAAOR,IAAP;EACD,CAdD,CAcE,MAAM;IACN,MAAM,IAAIS,qBAAJ,CAAiBC,qBAAOC,OAAP,CAAeC,qBAAhC,EAAuD;MAC3DN,QAAQ,EAAEP;IADiD,CAAvD,CAAN;EAGD;AACF;;AAtBDc;;AAwBA,SAAgBC,kBAAhB,CAAmCC,OAAnC,EAA+C;EAC7C,IAAIA,OAAO,CAACC,OAAR,KAAoB,KAAxB,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,IAAI,OAAOD,OAAO,CAACE,EAAf,KAAsB,QAAtB,IAAkC,OAAOF,OAAO,CAACE,EAAf,KAAsB,QAA5D,EAAsE;IACpE,OAAO,KAAP;EACD;;EAED,IAAI,OAAOF,OAAO,CAACG,MAAf,KAA0B,QAA9B,EAAwC;IACtC,OAAO,KAAP;EACD;;EAED,IAAIH,OAAO,CAACI,MAAR,KAAmBC,SAAnB,IAAgC,CAAChB,KAAK,CAACC,OAAN,CAAcU,OAAO,CAACI,MAAtB,CAArC,EAAoE;IAClE,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD;;AAlBDN;;AAoBA,SAAgBN,mBAAhB,CAAoCQ,OAApC,EAAgD;EAC9C,IAAIA,OAAO,CAACC,OAAR,KAAoB,KAAxB,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,IACE,OAAOD,OAAO,CAACE,EAAf,KAAsB,QAAtB,IACA,OAAOF,OAAO,CAACE,EAAf,KAAsB,QADtB,IAEAF,OAAO,CAACE,EAAR,KAAe,IAHjB,EAIE;IACA,OAAO,KAAP;EACD;;EAED,IAAIF,OAAO,CAACE,EAAR,KAAe,IAAf,IAAuBF,OAAO,CAACM,KAAR,KAAkBD,SAA7C,EAAwD;IACtD,OAAO,KAAP;EACD;;EAED,IAAIL,OAAO,CAACO,MAAR,KAAmBF,SAAnB,IAAgCL,OAAO,CAACM,KAAR,KAAkBD,SAAtD,EAAiE;IAC/D,OAAO,KAAP;EACD;;EAED,IAAIL,OAAO,CAACM,KAAR,KAAkBD,SAAtB,EAAiC;IAC/B,IAAI,OAAOL,OAAO,CAACM,KAAR,CAAcE,IAArB,KAA8B,QAAlC,EAA4C;MAC1C,OAAO,KAAP;IACD;;IAED,IAAI,OAAOR,OAAO,CAACM,KAAR,CAAcG,OAArB,KAAiC,QAArC,EAA+C;MAC7C,OAAO,KAAP;IACD;EACF;;EAED,OAAO,IAAP;AACD;;AAhCDX;;AAkCA,SAAgBY,wBAAhB,CACEV,OADF,EAC0B;EAExB,OAAO,YAAYA,OAAnB;AACD;;AAJDF","names":["parseJsonResponse","text","json","JSON","parse","responses","Array","isArray","response","isValidJsonResponse","Error","errors_1","errors_list_1","NETWORK","INVALID_JSON_RESPONSE","exports","isValidJsonRequest","payload","jsonrpc","id","method","params","undefined","error","result","code","message","isSuccessfulJsonResponse"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\util\\jsonrpc.ts"],"sourcesContent":["import { HardhatError } from \"../core/errors\";\nimport { ERRORS } from \"../core/errors-list\";\n\nexport interface JsonRpcRequest {\n  jsonrpc: string;\n  method: string;\n  params: any[];\n  id: number | string;\n}\n\nexport interface SuccessfulJsonRpcResponse {\n  jsonrpc: string;\n  id: number | string;\n  result: any;\n}\n\nexport interface FailedJsonRpcResponse {\n  jsonrpc: string;\n  id: number | string | null;\n  error: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\nexport type JsonRpcResponse = SuccessfulJsonRpcResponse | FailedJsonRpcResponse;\n\nexport function parseJsonResponse(\n  text: string\n): JsonRpcResponse | JsonRpcResponse[] {\n  try {\n    const json = JSON.parse(text);\n\n    const responses = Array.isArray(json) ? json : [json];\n    for (const response of responses) {\n      if (!isValidJsonResponse(response)) {\n        // We are sending the proper error inside the catch part of the statement.\n        // We just need to raise anything here.\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw new Error();\n      }\n    }\n\n    return json;\n  } catch {\n    throw new HardhatError(ERRORS.NETWORK.INVALID_JSON_RESPONSE, {\n      response: text,\n    });\n  }\n}\n\nexport function isValidJsonRequest(payload: any): boolean {\n  if (payload.jsonrpc !== \"2.0\") {\n    return false;\n  }\n\n  if (typeof payload.id !== \"number\" && typeof payload.id !== \"string\") {\n    return false;\n  }\n\n  if (typeof payload.method !== \"string\") {\n    return false;\n  }\n\n  if (payload.params !== undefined && !Array.isArray(payload.params)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isValidJsonResponse(payload: any) {\n  if (payload.jsonrpc !== \"2.0\") {\n    return false;\n  }\n\n  if (\n    typeof payload.id !== \"number\" &&\n    typeof payload.id !== \"string\" &&\n    payload.id !== null\n  ) {\n    return false;\n  }\n\n  if (payload.id === null && payload.error === undefined) {\n    return false;\n  }\n\n  if (payload.result === undefined && payload.error === undefined) {\n    return false;\n  }\n\n  if (payload.error !== undefined) {\n    if (typeof payload.error.code !== \"number\") {\n      return false;\n    }\n\n    if (typeof payload.error.message !== \"string\") {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function isSuccessfulJsonResponse(\n  payload: JsonRpcResponse\n): payload is SuccessfulJsonRpcResponse {\n  return \"result\" in payload;\n}\n"]},"metadata":{},"sourceType":"script"}