{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable max-lines */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData } from '@sentry/tracing';\nimport { extractNodeRequestData, forget, isPlainObject, isString, logger, stripUrlQueryAndFragment } from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as os from 'os';\nimport { flush } from './sdk';\nvar DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\n\nexport function tracingHandler() {\n  return function sentryTracingMiddleware(req, res, next) {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    var traceparentData;\n\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace']);\n    }\n\n    var transaction = startTransaction(__assign({\n      name: extractExpressTransactionName(req, {\n        path: true,\n        method: true\n      }),\n      op: 'http.server'\n    }, traceparentData)); // We put the transaction on the scope so users can attach children to it\n\n    getCurrentHub().configureScope(function (scope) {\n      scope.setSpan(transaction);\n    }); // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    res.__sentry_transaction = transaction;\n    res.once('finish', function () {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(function () {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n    next();\n  };\n}\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\n\nfunction addExpressReqToTransaction(transaction, req) {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, {\n    path: true,\n    method: true\n  });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\n\n\nfunction extractExpressTransactionName(req, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a;\n\n  var method = (_a = req.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n  var path = '';\n\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = \"\" + req.baseUrl + req.route.path;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  var info = '';\n\n  if (options.method && method) {\n    info += method;\n  }\n\n  if (options.method && options.path) {\n    info += \" \";\n  }\n\n  if (options.path && path) {\n    info += path;\n  }\n\n  return info;\n}\n/** JSDoc */\n\n\nfunction extractTransaction(req, type) {\n  var _a;\n\n  switch (type) {\n    case 'path':\n      {\n        return extractExpressTransactionName(req, {\n          path: true\n        });\n      }\n\n    case 'handler':\n      {\n        return ((_a = req.route) === null || _a === void 0 ? void 0 : _a.stack[0].name) || '<anonymous>';\n      }\n\n    case 'methodPath':\n    default:\n      {\n        return extractExpressTransactionName(req, {\n          path: true,\n          method: true\n        });\n      }\n  }\n}\n/** Default user keys that'll be used to extract data from the request */\n\n\nvar DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n/** JSDoc */\n\nfunction extractUserData(user, keys) {\n  var extractedUser = {};\n  var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n  attributes.forEach(function (key) {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\n\n\nexport function parseRequest(event, req, options) {\n  // eslint-disable-next-line no-param-reassign\n  options = __assign({\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true\n  }, options);\n\n  if (options.version) {\n    event.contexts = __assign(__assign({}, event.contexts), {\n      runtime: {\n        name: 'node',\n        version: global.process.version\n      }\n    });\n  }\n\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    var extractedRequestData = Array.isArray(options.request) ? extractNodeRequestData(req, options.request) : extractNodeRequestData(req);\n    event.request = __assign(__assign({}, event.request), extractedRequestData);\n  }\n\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user) {\n    var extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n\n    if (Object.keys(extractedUser)) {\n      event.user = __assign(__assign({}, event.user), extractedUser);\n    }\n  } // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n\n\n  if (options.ip) {\n    var ip = req.ip || req.connection && req.connection.remoteAddress;\n\n    if (ip) {\n      event.user = __assign(__assign({}, event.user), {\n        ip_address: ip\n      });\n    }\n  }\n\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n\n  return event;\n}\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\n\nexport function requestHandler(options) {\n  return function sentryRequestMiddleware(req, res, next) {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      var _end_1 = res.end;\n\n      res.end = function (chunk, encoding, cb) {\n        var _this = this;\n\n        flush(options.flushTimeout).then(function () {\n          _end_1.call(_this, chunk, encoding, cb);\n        }).then(null, function (e) {\n          logger.error(e);\n        });\n      };\n    }\n\n    var local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(function () {\n      getCurrentHub().configureScope(function (scope) {\n        return scope.addEventProcessor(function (event) {\n          return parseRequest(event, req, options);\n        });\n      });\n      next();\n    });\n  };\n}\n/** JSDoc */\n\nfunction getStatusCodeFromResponse(error) {\n  var statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;\n  return statusCode ? parseInt(statusCode, 10) : 500;\n}\n/** Returns true if response code is internal server error */\n\n\nfunction defaultShouldHandleError(error) {\n  var status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\n\n\nexport function errorHandler(options) {\n  return function sentryErrorMiddleware(error, _req, res, next) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var shouldHandleError = options && options.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(function (_scope) {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        var transaction = res.__sentry_transaction;\n\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n\n        var eventId = captureException(error); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        res.sentry = eventId;\n        next(error);\n      });\n      return;\n    }\n\n    next(error);\n  };\n}\n/**\n * @hidden\n */\n\nexport function logAndExitProcess(error) {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n  var client = getCurrentHub().getClient();\n\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  var options = client.getOptions();\n  var timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(client.close(timeout).then(function (result) {\n    if (!result) {\n      logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n    }\n\n    global.process.exit(1);\n  }));\n}","map":{"version":3,"mappings":"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","names":["captureException","getCurrentHub","startTransaction","withScope","extractTraceparentData","extractNodeRequestData","forget","isPlainObject","isString","logger","stripUrlQueryAndFragment","domain","os","flush","DEFAULT_SHUTDOWN_TIMEOUT","tracingHandler","sentryTracingMiddleware","req","res","next","traceparentData","headers","transaction","name","extractExpressTransactionName","path","method","op","configureScope","scope","setSpan","__sentry_transaction","once","setImmediate","addExpressReqToTransaction","setHttpStatus","statusCode","finish","setData","originalUrl","baseUrl","query","options","_a","toUpperCase","route","url","info","extractTransaction","type","stack","DEFAULT_USER_KEYS","extractUserData","user","keys","extractedUser","attributes","Array","isArray","forEach","key","parseRequest","event","ip","request","serverName","version","contexts","__assign","runtime","global","process","extractedRequestData","server_name","env","SENTRY_NAME","hostname","Object","connection","remoteAddress","ip_address","requestHandler","sentryRequestMiddleware","flushTimeout","_end_1","end","chunk","encoding","cb","then","call","_this","error","e","local","create","add","on","run","addEventProcessor","getStatusCodeFromResponse","status","status_code","output","parseInt","defaultShouldHandleError","errorHandler","sentryErrorMiddleware","_req","shouldHandleError","_scope","getSpan","undefined","eventId","sentry","logAndExitProcess","console","client","getClient","warn","exit","getOptions","timeout","shutdownTimeout","close","result"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\handlers.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData, Span } from '@sentry/tracing';\nimport { Event, Transaction } from '@sentry/types';\nimport {\n  extractNodeRequestData,\n  forget,\n  isPlainObject,\n  isString,\n  logger,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as http from 'http';\nimport * as os from 'os';\n\nimport { NodeClient } from './client';\nimport { flush } from './sdk';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\nexport interface ExpressRequest extends http.IncomingMessage {\n  [key: string]: any;\n  baseUrl?: string;\n  ip?: string;\n  originalUrl?: string;\n  route?: {\n    path: string;\n    stack: [\n      {\n        name: string;\n      },\n    ];\n  };\n  user?: {\n    [key: string]: any;\n  };\n}\n\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nexport function tracingHandler(): (\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error?: any) => void,\n) => void {\n  return function sentryTracingMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    let traceparentData;\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace'] as string);\n    }\n\n    const transaction = startTransaction({\n      name: extractExpressTransactionName(req, { path: true, method: true }),\n      op: 'http.server',\n      ...traceparentData,\n    });\n\n    // We put the transaction on the scope so users can attach children to it\n    getCurrentHub().configureScope(scope => {\n      scope.setSpan(transaction);\n    });\n\n    // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (res as any).__sentry_transaction = transaction;\n\n    res.once('finish', () => {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(() => {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n\n    next();\n  };\n}\n\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction: Transaction | undefined, req: ExpressRequest): void {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, { path: true, method: true });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\nfunction extractExpressTransactionName(\n  req: ExpressRequest,\n  options: { path?: boolean; method?: boolean } = {},\n): string {\n  const method = req.method?.toUpperCase();\n\n  let path = '';\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = `${req.baseUrl}${req.route.path}`;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let info = '';\n  if (options.method && method) {\n    info += method;\n  }\n  if (options.method && options.path) {\n    info += ` `;\n  }\n  if (options.path && path) {\n    info += path;\n  }\n\n  return info;\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: ExpressRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractExpressTransactionName(req, { path: true });\n    }\n    case 'handler': {\n      return req.route?.stack[0].name || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractExpressTransactionName(req, { path: true, method: true });\n    }\n  }\n}\n\n/** Default user keys that'll be used to extract data from the request */\nconst DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface ParseRequestOptions {\n  ip?: boolean;\n  request?: boolean | string[];\n  serverName?: boolean;\n  transaction?: boolean | TransactionNamingScheme;\n  user?: boolean | string[];\n  version?: boolean;\n}\n\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nexport function parseRequest(event: Event, req: ExpressRequest, options?: ParseRequestOptions): Event {\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true,\n    ...options,\n  };\n\n  if (options.version) {\n    event.contexts = {\n      ...event.contexts,\n      runtime: {\n        name: 'node',\n        version: global.process.version,\n      },\n    };\n  }\n\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    const extractedRequestData = Array.isArray(options.request)\n      ? extractNodeRequestData(req, options.request)\n      : extractNodeRequestData(req);\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n\n    if (Object.keys(extractedUser)) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n  if (options.ip) {\n    const ip = req.ip || (req.connection && req.connection.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n\n  return event;\n}\n\nexport type RequestHandlerOptions = ParseRequestOptions & {\n  flushTimeout?: number;\n};\n\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nexport function requestHandler(\n  options?: RequestHandlerOptions,\n): (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: any) => void) => void {\n  return function sentryRequestMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _end = res.end;\n      res.end = function(chunk?: any | (() => void), encoding?: string | (() => void), cb?: () => void): void {\n        flush(options.flushTimeout)\n          .then(() => {\n            _end.call(this, chunk, encoding, cb);\n          })\n          .then(null, e => {\n            logger.error(e);\n          });\n      };\n    }\n    const local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(() => {\n      getCurrentHub().configureScope(scope =>\n        scope.addEventProcessor((event: Event) => parseRequest(event, req, options)),\n      );\n      next();\n    });\n  };\n}\n\n/** JSDoc */\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\n/** JSDoc */\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error: MiddlewareError): boolean {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nexport function errorHandler(options?: {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   * @param error Captured middleware error\n   */\n  shouldHandleError?(error: MiddlewareError): boolean;\n}): (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const shouldHandleError = (options && options.shouldHandleError) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(_scope => {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const transaction = (res as any).__sentry_transaction as Span;\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n        const eventId = captureException(error);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (res as any).sentry = eventId;\n        next(error);\n      });\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * @hidden\n */\nexport function logAndExitProcess(error: Error): void {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n\n  const client = getCurrentHub().getClient<NodeClient>();\n\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(\n    client.close(timeout).then((result: boolean) => {\n      if (!result) {\n        logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    }),\n  );\n}\n"]},"metadata":{},"sourceType":"module"}