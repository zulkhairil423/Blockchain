{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { logger } from '@sentry/utils';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, registerRequestInstrumentation } from './request';\nimport { defaultRoutingInstrumentation } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\n\n\nvar BrowserTracing =\n/** @class */\nfunction () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    this._metrics = new MetricsInstrumentation();\n    this._emitOptionsWarning = false;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins; // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n\n    if (_options && _options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        routingInstrumentation = _a.routingInstrumentation,\n        startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n        markBackgroundTransactions = _a.markBackgroundTransactions,\n        traceFetch = _a.traceFetch,\n        traceXHR = _a.traceXHR,\n        tracingOrigins = _a.tracingOrigins,\n        shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    routingInstrumentation(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n\n\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n\n    if (!this._getCurrentHub) {\n      logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var _a = this.options,\n        beforeNavigate = _a.beforeNavigate,\n        idleTimeout = _a.idleTimeout,\n        maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext; // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n\n    var hub = this._getCurrentHub();\n\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\n\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\n\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n/** Returns the value of a meta tag */\n\nexport function getMetaContent(metaName) {\n  var el = document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\n\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":{"version":3,"mappings":"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","names":["logger","startIdleTransaction","DEFAULT_IDLE_TIMEOUT","SpanStatus","extractTraceparentData","secToMs","registerBackgroundTabDetection","MetricsInstrumentation","defaultRequestInstrumentationOptions","registerRequestInstrumentation","defaultRoutingInstrumentation","DEFAULT_MAX_TRANSACTION_DURATION_SECONDS","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","startTransactionOnLocationChange","startTransactionOnPageLoad","_options","BrowserTracing","id","tracingOrigins","Array","isArray","length","_emitOptionsWarning","options","__assign","_","getCurrentHub","_getCurrentHub","warn","traceFetch","traceXHR","shouldCreateSpanForRequest","context","_createRouteTransaction","op","undefined","beforeNavigate","parentContextFromHeader","getHeaderContext","expandedContext","trimEnd","modifiedContext","finalContext","sampled","log","hub","idleTransaction","registerBeforeFinishCallback","transaction","endTimestamp","_this","_metrics","addPerformanceEntries","adjustTransactionDuration","header","getMetaContent","metaName","el","document","querySelector","getAttribute","maxDuration","diff","startTimestamp","isOutdatedTransaction","setStatus","DeadlineExceeded","setTag"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\browser\\browsertracing.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n} from './request';\nimport { defaultRoutingInstrumentation } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    startTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation = new MetricsInstrumentation();\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (\n      _options &&\n      _options.tracingOrigins &&\n      Array.isArray(_options.tracingOrigins) &&\n      _options.tracingOrigins.length !== 0\n    ) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(\n        `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    routingInstrumentation(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}