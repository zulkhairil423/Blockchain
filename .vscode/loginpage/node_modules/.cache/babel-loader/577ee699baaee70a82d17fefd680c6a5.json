{"ast":null,"code":"'use strict';\n/**\n * @module Base\n */\n\n/**\n * Module dependencies.\n */\n\nvar diff = require('diff');\n\nvar milliseconds = require('ms');\n\nvar utils = require('../utils');\n\nvar supportsColor = require('supports-color');\n\nvar symbols = require('log-symbols');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nconst isBrowser = utils.isBrowser();\n\nfunction getBrowserWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  } // In a Web Worker, the DOM Window is not available.\n\n\n  return [640, 480];\n}\n/**\n * Expose `Base`.\n */\n\n\nexports = module.exports = Base;\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = isBrowser || process.stdout.isTTY && process.stderr.isTTY;\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\n\nvar consoleLog = console.log;\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !isBrowser && (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n/**\n * Truncate diffs longer than this value to avoid slow performance\n */\n\nexports.maxDiffSize = 8192;\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31,\n  'diff added inline': '30;42',\n  'diff removed inline': '30;41'\n};\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: symbols.success,\n  err: symbols.error,\n  dot: '.',\n  comma: ',',\n  bang: '!'\n};\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\n\nvar color = exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  if (isBrowser) {\n    exports.window.width = getBrowserWindowSize()[1];\n  } else {\n    exports.window.width = process.stdout.getWindowSize(1)[0];\n  }\n}\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nvar showDiff = exports.showDiff = function (err) {\n  return err && err.showDiff !== false && sameType(err.actual, err.expected) && err.expected !== undefined;\n};\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\n\n\nvar generateDiff = exports.generateDiff = function (actual, expected) {\n  try {\n    var maxLen = exports.maxDiffSize;\n    var skipped = 0;\n\n    if (maxLen > 0) {\n      skipped = Math.max(actual.length - maxLen, expected.length - maxLen);\n      actual = actual.slice(0, maxLen);\n      expected = expected.slice(0, maxLen);\n    }\n\n    let result = exports.inlineDiffs ? inlineDiff(actual, expected) : unifiedDiff(actual, expected);\n\n    if (skipped > 0) {\n      result = `${result}\\n      [mocha] output truncated to ${maxLen} characters, see \"maxDiffSize\" reporter-option\\n`;\n    }\n\n    return result;\n  } catch (err) {\n    var msg = '\\n      ' + color('diff added', '+ expected') + ' ' + color('diff removed', '- actual:  failed to generate Mocha diff') + '\\n';\n    return msg;\n  }\n};\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\n\n\nexports.list = function (failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n'); // msg\n\n    var msg;\n    var err;\n\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n\n    var message;\n\n    if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else {\n      message = '';\n    }\n\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index); // remove msg from stack\n\n      stack = stack.slice(index + 1);\n    } // uncaught\n\n\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    } // explicitly show diff\n\n\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n      msg += generateDiff(err.actual, err.expected);\n    } // indent stack trace\n\n\n    stack = stack.replace(/^/gm, '  '); // indented test title\n\n    var testTitle = '';\n    test.titlePath().forEach(function (str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n\n      testTitle += str;\n    });\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\n\nfunction Base(runner, options) {\n  var failures = this.failures = [];\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  var maxDiffSizeOpt = this.options.reporterOption && this.options.reporterOption.maxDiffSize;\n\n  if (maxDiffSizeOpt !== undefined && !isNaN(Number(maxDiffSizeOpt))) {\n    exports.maxDiffSize = Number(maxDiffSizeOpt);\n  }\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    } // more than one error per test\n\n\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n\n    failures.push(test);\n  });\n}\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\n\n\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n  Base.consoleLog(); // passes\n\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration)); // pending\n\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n    Base.consoleLog(fmt, stats.pending);\n  } // failures\n\n\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n    Base.consoleLog(fmt, stats.failures);\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n\n  Base.consoleLog();\n};\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\n\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\n\n\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected); // linenos\n\n  var lines = msg.split('\\n');\n\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function (str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  } // legend\n\n\n  msg = '\\n' + color('diff removed inline', 'actual') + ' ' + color('diff added inline', 'expected') + '\\n\\n' + msg + '\\n'; // indent\n\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\n\n\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n\n    if (line.match(/@@/)) {\n      return '--';\n    }\n\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n\n    return indent + line;\n  }\n\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\n\n\nfunction errorDiff(actual, expected) {\n  return diff.diffWordsWithSpace(actual, expected).map(function (str) {\n    if (str.added) {\n      return colorLines('diff added inline', str.value);\n    }\n\n    if (str.removed) {\n      return colorLines('diff removed inline', str.value);\n    }\n\n    return str.value;\n  }).join('');\n}\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\n\n\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function (str) {\n    return color(name, str);\n  }).join('\\n');\n}\n/**\n * Object#toString reference.\n */\n\n\nvar objToString = Object.prototype.toString;\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\n\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.consoleLog = consoleLog;\nBase.abstract = true;","map":{"version":3,"names":["diff","require","milliseconds","utils","supportsColor","symbols","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","isBrowser","getBrowserWindowSize","global","innerHeight","innerWidth","exports","module","Base","isatty","process","stdout","isTTY","stderr","consoleLog","console","log","useColors","env","MOCHA_COLORS","undefined","inlineDiffs","maxDiffSize","colors","pass","fail","pending","suite","checkmark","fast","medium","slow","green","light","ok","success","err","error","dot","comma","bang","color","type","str","String","window","width","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","showDiff","sameType","actual","expected","stringifyDiffObjs","isString","stringify","generateDiff","maxLen","skipped","Math","max","length","slice","result","inlineDiff","unifiedDiff","msg","list","failures","multipleErr","multipleTest","forEach","test","i","fmt","multiple","concat","shift","message","inspect","toString","stack","index","indexOf","uncaught","hideDiff","match","replace","testTitle","titlePath","runner","options","TypeError","stats","maxDiffSizeOpt","reporterOption","isNaN","Number","on","duration","speed","Error","push","prototype","epilogue","passes","pad","len","Array","join","errorDiff","lines","split","map","indent","cleanUp","line","colorLines","notBlank","createPatch","splice","filter","diffWordsWithSpace","added","value","removed","name","objToString","Object","a","b","call","abstract"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/mocha/lib/reporters/base.js"],"sourcesContent":["'use strict';\n/**\n * @module Base\n */\n/**\n * Module dependencies.\n */\n\nvar diff = require('diff');\nvar milliseconds = require('ms');\nvar utils = require('../utils');\nvar supportsColor = require('supports-color');\nvar symbols = require('log-symbols');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n\nconst isBrowser = utils.isBrowser();\n\nfunction getBrowserWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n}\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = isBrowser || (process.stdout.isTTY && process.stderr.isTTY);\n\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\nvar consoleLog = console.log;\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors =\n  !isBrowser &&\n  (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Truncate diffs longer than this value to avoid slow performance\n */\nexports.maxDiffSize = 8192;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31,\n  'diff added inline': '30;42',\n  'diff removed inline': '30;41'\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: symbols.success,\n  err: symbols.error,\n  dot: '.',\n  comma: ',',\n  bang: '!'\n};\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\nvar color = (exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n});\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  if (isBrowser) {\n    exports.window.width = getBrowserWindowSize()[1];\n  } else {\n    exports.window.width = process.stdout.getWindowSize(1)[0];\n  }\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nvar showDiff = (exports.showDiff = function (err) {\n  return (\n    err &&\n    err.showDiff !== false &&\n    sameType(err.actual, err.expected) &&\n    err.expected !== undefined\n  );\n});\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\n\nvar generateDiff = (exports.generateDiff = function (actual, expected) {\n  try {\n    var maxLen = exports.maxDiffSize;\n    var skipped = 0;\n    if (maxLen > 0) {\n      skipped = Math.max(actual.length - maxLen, expected.length - maxLen);\n      actual = actual.slice(0, maxLen);\n      expected = expected.slice(0, maxLen);\n    }\n    let result = exports.inlineDiffs\n      ? inlineDiff(actual, expected)\n      : unifiedDiff(actual, expected);\n    if (skipped > 0) {\n      result = `${result}\\n      [mocha] output truncated to ${maxLen} characters, see \"maxDiffSize\" reporter-option\\n`;\n    }\n    return result;\n  } catch (err) {\n    var msg =\n      '\\n      ' +\n      color('diff added', '+ expected') +\n      ' ' +\n      color('diff removed', '- actual:  failed to generate Mocha diff') +\n      '\\n';\n    return msg;\n  }\n});\n\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\nexports.list = function (failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt =\n      color('error title', '  %s) %s:\\n') +\n      color('error message', '     %s') +\n      color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err;\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n    var message;\n    if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt =\n        color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      msg += generateDiff(err.actual, err.expected);\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    // indented test title\n    var testTitle = '';\n    test.titlePath().forEach(function (str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n      testTitle += str;\n    });\n\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Base(runner, options) {\n  var failures = (this.failures = []);\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  var maxDiffSizeOpt =\n    this.options.reporterOption && this.options.reporterOption.maxDiffSize;\n  if (maxDiffSizeOpt !== undefined && !isNaN(Number(maxDiffSizeOpt))) {\n    exports.maxDiffSize = Number(maxDiffSizeOpt);\n  }\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    }\n    // more than one error per test\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n    failures.push(test);\n  });\n}\n\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n\n  Base.consoleLog();\n\n  // passes\n  fmt =\n    color('bright pass', ' ') +\n    color('green', ' %d passing') +\n    color('light', ' (%s)');\n\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n\n    Base.consoleLog(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    Base.consoleLog(fmt, stats.failures);\n\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n\n  Base.consoleLog();\n};\n\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines\n      .map(function (str, i) {\n        return pad(++i, width) + ' |' + ' ' + str;\n      })\n      .join('\\n');\n  }\n\n  // legend\n  msg =\n    '\\n' +\n    color('diff removed inline', 'actual') +\n    ' ' +\n    color('diff added inline', 'expected') +\n    '\\n\\n' +\n    msg +\n    '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return '--';\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return (\n    '\\n      ' +\n    colorLines('diff added', '+ expected') +\n    ' ' +\n    colorLines('diff removed', '- actual') +\n    '\\n\\n' +\n    lines.map(cleanUp).filter(notBlank).join('\\n')\n  );\n}\n\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\nfunction errorDiff(actual, expected) {\n  return diff\n    .diffWordsWithSpace(actual, expected)\n    .map(function (str) {\n      if (str.added) {\n        return colorLines('diff added inline', str.value);\n      }\n      if (str.removed) {\n        return colorLines('diff removed inline', str.value);\n      }\n      return str.value;\n    })\n    .join('');\n}\n\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str\n    .split('\\n')\n    .map(function (str) {\n      return color(name, str);\n    })\n    .join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.consoleLog = consoleLog;\n\nBase.abstract = true;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}