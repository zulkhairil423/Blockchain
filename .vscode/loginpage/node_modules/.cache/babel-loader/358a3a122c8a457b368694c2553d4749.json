{"ast":null,"code":"/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n/**\n * Active `debug` instances.\n */\n\nexports.instances = [];\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0,\n      i;\n\n  for (i in namespace) {\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\n\nfunction createDebug(namespace) {\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n    var self = debug; // set `diff` timestamp\n\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr; // turn the `arguments` into a proper Array\n\n    var args = new Array(arguments.length);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    } // apply any `formatters` transformations\n\n\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`\n\n        args.splice(index, 1);\n        index--;\n      }\n\n      return match;\n    }); // apply env-specific formatting (colors, etc.)\n\n    exports.formatArgs.call(self, args);\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy; // env-specific initialization logic for debug instances\n\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n  return debug;\n}\n\nfunction destroy() {\n  var index = exports.instances.indexOf(this);\n\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n  exports.names = [];\n  exports.skips = [];\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n\n    namespaces = split[i].replace(/\\*/g, '.*?');\n\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n/**\n * Disable debug output.\n *\n * @api public\n */\n\n\nfunction disable() {\n  exports.enable('');\n}\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n\n  var i, len;\n\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}","map":{"version":3,"names":["exports","module","createDebug","debug","coerce","disable","enable","enabled","humanize","require","instances","names","skips","formatters","selectColor","namespace","hash","i","charCodeAt","colors","Math","abs","length","prevTime","self","curr","Date","ms","diff","prev","args","Array","arguments","unshift","index","replace","match","format","formatter","val","call","splice","formatArgs","logFn","log","console","bind","apply","useColors","color","destroy","init","push","indexOf","namespaces","save","split","len","RegExp","substr","instance","name","test","Error","stack","message"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/eventstore/node_modules/debug/src/debug.js"],"sourcesContent":["\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * Active `debug` instances.\n */\nexports.instances = [];\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  var prevTime;\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n  debug.destroy = destroy;\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  exports.instances.push(debug);\n\n  return debug;\n}\n\nfunction destroy () {\n  var index = exports.instances.indexOf(this);\n  if (index !== -1) {\n    exports.instances.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var i;\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n\n  for (i = 0; i < exports.instances.length; i++) {\n    var instance = exports.instances[i];\n    instance.enabled = exports.enabled(instance.namespace);\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  if (name[name.length - 1] === '*') {\n    return true;\n  }\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}