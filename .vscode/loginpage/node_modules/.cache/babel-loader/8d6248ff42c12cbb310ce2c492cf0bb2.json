{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\n\n\nconst assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\n\nconst assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\n\nconst assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\n\nconst assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsString = assertIsString;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;AAIO,MAAMA,iBAAiB,GAAG,UAAUC,KAAV,EAAuB;EACtD,IAAI,CAAC,4BAAYA,KAAZ,CAAL,EAAyB;IACvB,MAAMC,GAAG,GAAG,oEAAoED,KAAK,EAArF;IACA,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;EACD;AACF,CALM;;AAAME,4BAAiBJ,iBAAjB;AAOb;;;;;AAIO,MAAMK,cAAc,GAAG,UAAUJ,KAAV,EAAuB;EACnD,IAAI,CAACK,MAAM,CAACC,QAAP,CAAgBN,KAAhB,CAAL,EAA6B;IAC3B,MAAMC,GAAG,GAAG,mDAAmDD,KAAK,EAApE;IACA,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;EACD;AACF,CALM;;AAAME,yBAAcC,cAAd;AAOb;;;;;AAIO,MAAMG,aAAa,GAAG,UAAUP,KAAV,EAAyB;EACpD,IAAI,CAACQ,KAAK,CAACC,OAAN,CAAcT,KAAd,CAAL,EAA2B;IACzB,MAAMC,GAAG,GAAG,0DAA0DD,KAAK,EAA3E;IACA,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;EACD;AACF,CALM;;AAAME,wBAAaI,aAAb;AAOb;;;;;AAIO,MAAMG,cAAc,GAAG,UAAUV,KAAV,EAAuB;EACnD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAMC,GAAG,GAAG,oDAAoDD,KAAK,EAArE;IACA,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;EACD;AACF,CALM;;AAAME,yBAAcO,cAAd","names":["assertIsHexString","input","msg","Error","exports","assertIsBuffer","Buffer","isBuffer","assertIsArray","Array","isArray","assertIsString"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@nomicfoundation\\ethereumjs-util\\src\\helpers.ts"],"sourcesContent":["import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}