{"ast":null,"code":"var assert = require('assert');\n\nvar translate = require('./translate.js');\n\nvar requireFromString = require('require-from-string');\n\nvar https = require('follow-redirects').https;\n\nvar MemoryStream = require('memorystream');\n\nvar semver = require('semver');\n\nfunction setupMethods(soljson) {\n  var version;\n\n  if ('_solidity_version' in soljson) {\n    version = soljson.cwrap('solidity_version', 'string', []);\n  } else {\n    version = soljson.cwrap('version', 'string', []);\n  }\n\n  var versionToSemver = function () {\n    return translate.versionToSemver(version());\n  };\n\n  var isVersion6 = semver.gt(versionToSemver(), '0.5.99');\n  var license;\n\n  if ('_solidity_license' in soljson) {\n    license = soljson.cwrap('solidity_license', 'string', []);\n  } else if ('_license' in soljson) {\n    license = soljson.cwrap('license', 'string', []);\n  } else {\n    // pre 0.4.14\n    license = function () {// return undefined\n    };\n  }\n\n  var alloc;\n\n  if ('_solidity_alloc' in soljson) {\n    alloc = soljson.cwrap('solidity_alloc', 'number', ['number']);\n  } else {\n    alloc = soljson._malloc;\n    assert(alloc, 'Expected malloc to be present.');\n  }\n\n  var reset;\n\n  if ('_solidity_reset' in soljson) {\n    reset = soljson.cwrap('solidity_reset', null, []);\n  }\n\n  var copyToCString = function (str, ptr) {\n    var length = soljson.lengthBytesUTF8(str); // This is allocating memory using solc's allocator.\n    //\n    // Before 0.6.0:\n    //   Assuming copyToCString is only used in the context of wrapCallback, solc will free these pointers.\n    //   See https://github.com/ethereum/solidity/blob/v0.5.13/libsolc/libsolc.h#L37-L40\n    //\n    // After 0.6.0:\n    //   The duty is on solc-js to free these pointers. We accomplish that by calling `reset` at the end.\n\n    var buffer = alloc(length + 1);\n    soljson.stringToUTF8(str, buffer, length + 1);\n    soljson.setValue(ptr, buffer, '*');\n  }; // This is to support multiple versions of Emscripten.\n  // Take a single `ptr` and returns a `str`.\n\n\n  var copyFromCString = soljson.UTF8ToString || soljson.Pointer_stringify;\n\n  var wrapCallback = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (data, contents, error) {\n      var result = callback(copyFromCString(data));\n\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  var wrapCallbackWithKind = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (context, kind, data, contents, error) {\n      // Must be a null pointer.\n      assert(context === 0, 'Callback context must be null.');\n      var result = callback(copyFromCString(kind), copyFromCString(data));\n\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  }; // This calls compile() with args || cb\n\n\n  var runWithCallbacks = function (callbacks, compile, args) {\n    if (callbacks) {\n      assert(typeof callbacks === 'object', 'Invalid callback object specified.');\n    } else {\n      callbacks = {};\n    }\n\n    var readCallback = callbacks.import;\n\n    if (readCallback === undefined) {\n      readCallback = function (data) {\n        return {\n          error: 'File import callback not supported'\n        };\n      };\n    }\n\n    var singleCallback;\n\n    if (isVersion6) {\n      // After 0.6.x multiple kind of callbacks are supported.\n      var smtSolverCallback = callbacks.smtSolver;\n\n      if (smtSolverCallback === undefined) {\n        smtSolverCallback = function (data) {\n          return {\n            error: 'SMT solver callback not supported'\n          };\n        };\n      }\n\n      singleCallback = function (kind, data) {\n        if (kind === 'source') {\n          return readCallback(data);\n        } else if (kind === 'smt-query') {\n          return smtSolverCallback(data);\n        } else {\n          assert(false, 'Invalid callback kind specified.');\n        }\n      };\n\n      singleCallback = wrapCallbackWithKind(singleCallback);\n    } else {\n      // Old Solidity version only supported imports.\n      singleCallback = wrapCallback(readCallback);\n    } // This is to support multiple versions of Emscripten.\n\n\n    var addFunction = soljson.addFunction || soljson.Runtime.addFunction;\n    var removeFunction = soljson.removeFunction || soljson.Runtime.removeFunction;\n    var cb = addFunction(singleCallback, 'viiiii');\n    var output;\n\n    try {\n      args.push(cb);\n\n      if (isVersion6) {\n        // Callback context.\n        args.push(null);\n      }\n\n      output = compile.apply(undefined, args);\n    } catch (e) {\n      removeFunction(cb);\n      throw e;\n    }\n\n    removeFunction(cb);\n\n    if (reset) {\n      // Explicitly free memory.\n      //\n      // NOTE: cwrap() of \"compile\" will copy the returned pointer into a\n      //       Javascript string and it is not possible to call free() on it.\n      //       reset() however will clear up all allocations.\n      reset();\n    }\n\n    return output;\n  };\n\n  var compileJSON = null;\n\n  if ('_compileJSON' in soljson) {\n    // input (text), optimize (bool) -> output (jsontext)\n    compileJSON = soljson.cwrap('compileJSON', 'string', ['string', 'number']);\n  }\n\n  var compileJSONMulti = null;\n\n  if ('_compileJSONMulti' in soljson) {\n    // input (jsontext), optimize (bool) -> output (jsontext)\n    compileJSONMulti = soljson.cwrap('compileJSONMulti', 'string', ['string', 'number']);\n  }\n\n  var compileJSONCallback = null;\n\n  if ('_compileJSONCallback' in soljson) {\n    // input (jsontext), optimize (bool), callback (ptr) -> output (jsontext)\n    var compileInternal = soljson.cwrap('compileJSONCallback', 'string', ['string', 'number', 'number']);\n\n    compileJSONCallback = function (input, optimize, readCallback) {\n      return runWithCallbacks(readCallback, compileInternal, [input, optimize]);\n    };\n  }\n\n  var compileStandard = null;\n\n  if ('_compileStandard' in soljson) {\n    // input (jsontext), callback (ptr) -> output (jsontext)\n    var compileStandardInternal = soljson.cwrap('compileStandard', 'string', ['string', 'number']);\n\n    compileStandard = function (input, readCallback) {\n      return runWithCallbacks(readCallback, compileStandardInternal, [input]);\n    };\n  }\n\n  if ('_solidity_compile' in soljson) {\n    var solidityCompile;\n\n    if (isVersion6) {\n      // input (jsontext), callback (ptr), callback_context (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number', 'number']);\n    } else {\n      // input (jsontext), callback (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number']);\n    }\n\n    compileStandard = function (input, callbacks) {\n      return runWithCallbacks(callbacks, solidityCompile, [input]);\n    };\n  } // Expects a Standard JSON I/O but supports old compilers\n\n\n  var compileStandardWrapper = function (input, readCallback) {\n    if (compileStandard !== null) {\n      return compileStandard(input, readCallback);\n    }\n\n    function formatFatalError(message) {\n      return JSON.stringify({\n        errors: [{\n          'type': 'JSONError',\n          'component': 'solcjs',\n          'severity': 'error',\n          'message': message,\n          'formattedMessage': 'Error: ' + message\n        }]\n      });\n    }\n\n    try {\n      input = JSON.parse(input);\n    } catch (e) {\n      return formatFatalError('Invalid JSON supplied: ' + e.message);\n    }\n\n    if (input['language'] !== 'Solidity') {\n      return formatFatalError('Only \"Solidity\" is supported as a language.');\n    } // NOTE: this is deliberately `== null`\n\n\n    if (input['sources'] == null || input['sources'].length === 0) {\n      return formatFatalError('No input sources specified.');\n    }\n\n    function isOptimizerEnabled(input) {\n      return input['settings'] && input['settings']['optimizer'] && input['settings']['optimizer']['enabled'];\n    }\n\n    function translateSources(input) {\n      var sources = {};\n\n      for (var source in input['sources']) {\n        if (input['sources'][source]['content'] !== null) {\n          sources[source] = input['sources'][source]['content'];\n        } else {\n          // force failure\n          return null;\n        }\n      }\n\n      return sources;\n    }\n\n    function librariesSupplied(input) {\n      if (input['settings']) {\n        return input['settings']['libraries'];\n      }\n    }\n\n    function translateOutput(output, libraries) {\n      try {\n        output = JSON.parse(output);\n      } catch (e) {\n        return formatFatalError('Compiler returned invalid JSON: ' + e.message);\n      }\n\n      output = translate.translateJsonCompilerOutput(output, libraries);\n\n      if (output == null) {\n        return formatFatalError('Failed to process output.');\n      }\n\n      return JSON.stringify(output);\n    }\n\n    var sources = translateSources(input);\n\n    if (sources === null || Object.keys(sources).length === 0) {\n      return formatFatalError('Failed to process sources.');\n    } // Try linking if libraries were supplied\n\n\n    var libraries = librariesSupplied(input); // Try to wrap around old versions\n\n    if (compileJSONCallback !== null) {\n      return translateOutput(compileJSONCallback(JSON.stringify({\n        'sources': sources\n      }), isOptimizerEnabled(input), readCallback), libraries);\n    }\n\n    if (compileJSONMulti !== null) {\n      return translateOutput(compileJSONMulti(JSON.stringify({\n        'sources': sources\n      }), isOptimizerEnabled(input)), libraries);\n    } // Try our luck with an ancient compiler\n\n\n    if (compileJSON !== null) {\n      if (Object.keys(sources).length !== 1) {\n        return formatFatalError('Multiple sources provided, but compiler only supports single input.');\n      }\n\n      return translateOutput(compileJSON(sources[Object.keys(sources)[0]], isOptimizerEnabled(input)), libraries);\n    }\n\n    return formatFatalError('Compiler does not support any known interface.');\n  };\n\n  return {\n    version: version,\n    semver: versionToSemver,\n    license: license,\n    lowlevel: {\n      compileSingle: compileJSON,\n      compileMulti: compileJSONMulti,\n      compileCallback: compileJSONCallback,\n      compileStandard: compileStandard\n    },\n    features: {\n      legacySingleInput: compileJSON !== null,\n      multipleInputs: compileJSONMulti !== null || compileStandard !== null,\n      importCallback: compileJSONCallback !== null || compileStandard !== null,\n      nativeStandardJSON: compileStandard !== null\n    },\n    compile: compileStandardWrapper,\n    // Loads the compiler of the given version from the github repository\n    // instead of from the local filesystem.\n    loadRemoteVersion: function (versionString, cb) {\n      var mem = new MemoryStream(null, {\n        readable: false\n      });\n      var url = 'https://solc-bin.ethereum.org/bin/soljson-' + versionString + '.js';\n      https.get(url, function (response) {\n        if (response.statusCode !== 200) {\n          cb(new Error('Error retrieving binary: ' + response.statusMessage));\n        } else {\n          response.pipe(mem);\n          response.on('end', function () {\n            cb(null, setupMethods(requireFromString(mem.toString(), 'soljson-' + versionString + '.js')));\n          });\n        }\n      }).on('error', function (error) {\n        cb(error);\n      });\n    },\n    // Use this if you want to add wrapper functions around the pure module.\n    setupMethods: setupMethods\n  };\n}\n\nmodule.exports = setupMethods;","map":{"version":3,"names":["assert","require","translate","requireFromString","https","MemoryStream","semver","setupMethods","soljson","version","cwrap","versionToSemver","isVersion6","gt","license","alloc","_malloc","reset","copyToCString","str","ptr","length","lengthBytesUTF8","buffer","stringToUTF8","setValue","copyFromCString","UTF8ToString","Pointer_stringify","wrapCallback","callback","data","contents","error","result","wrapCallbackWithKind","context","kind","runWithCallbacks","callbacks","compile","args","readCallback","import","undefined","singleCallback","smtSolverCallback","smtSolver","addFunction","Runtime","removeFunction","cb","output","push","apply","e","compileJSON","compileJSONMulti","compileJSONCallback","compileInternal","input","optimize","compileStandard","compileStandardInternal","solidityCompile","compileStandardWrapper","formatFatalError","message","JSON","stringify","errors","parse","isOptimizerEnabled","translateSources","sources","source","librariesSupplied","translateOutput","libraries","translateJsonCompilerOutput","Object","keys","lowlevel","compileSingle","compileMulti","compileCallback","features","legacySingleInput","multipleInputs","importCallback","nativeStandardJSON","loadRemoteVersion","versionString","mem","readable","url","get","response","statusCode","Error","statusMessage","pipe","on","toString","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/solc/wrapper.js"],"sourcesContent":["var assert = require('assert');\nvar translate = require('./translate.js');\nvar requireFromString = require('require-from-string');\nvar https = require('follow-redirects').https;\nvar MemoryStream = require('memorystream');\nvar semver = require('semver');\n\nfunction setupMethods (soljson) {\n  var version;\n  if ('_solidity_version' in soljson) {\n    version = soljson.cwrap('solidity_version', 'string', []);\n  } else {\n    version = soljson.cwrap('version', 'string', []);\n  }\n\n  var versionToSemver = function () {\n    return translate.versionToSemver(version());\n  };\n\n  var isVersion6 = semver.gt(versionToSemver(), '0.5.99');\n\n  var license;\n  if ('_solidity_license' in soljson) {\n    license = soljson.cwrap('solidity_license', 'string', []);\n  } else if ('_license' in soljson) {\n    license = soljson.cwrap('license', 'string', []);\n  } else {\n    // pre 0.4.14\n    license = function () {\n      // return undefined\n    };\n  }\n\n  var alloc;\n  if ('_solidity_alloc' in soljson) {\n    alloc = soljson.cwrap('solidity_alloc', 'number', [ 'number' ]);\n  } else {\n    alloc = soljson._malloc;\n    assert(alloc, 'Expected malloc to be present.');\n  }\n\n  var reset;\n  if ('_solidity_reset' in soljson) {\n    reset = soljson.cwrap('solidity_reset', null, []);\n  }\n\n  var copyToCString = function (str, ptr) {\n    var length = soljson.lengthBytesUTF8(str);\n    // This is allocating memory using solc's allocator.\n    //\n    // Before 0.6.0:\n    //   Assuming copyToCString is only used in the context of wrapCallback, solc will free these pointers.\n    //   See https://github.com/ethereum/solidity/blob/v0.5.13/libsolc/libsolc.h#L37-L40\n    //\n    // After 0.6.0:\n    //   The duty is on solc-js to free these pointers. We accomplish that by calling `reset` at the end.\n    var buffer = alloc(length + 1);\n    soljson.stringToUTF8(str, buffer, length + 1);\n    soljson.setValue(ptr, buffer, '*');\n  };\n\n  // This is to support multiple versions of Emscripten.\n  // Take a single `ptr` and returns a `str`.\n  var copyFromCString = soljson.UTF8ToString || soljson.Pointer_stringify;\n\n  var wrapCallback = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (data, contents, error) {\n      var result = callback(copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  var wrapCallbackWithKind = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (context, kind, data, contents, error) {\n      // Must be a null pointer.\n      assert(context === 0, 'Callback context must be null.');\n      var result = callback(copyFromCString(kind), copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  // This calls compile() with args || cb\n  var runWithCallbacks = function (callbacks, compile, args) {\n    if (callbacks) {\n      assert(typeof callbacks === 'object', 'Invalid callback object specified.');\n    } else {\n      callbacks = {};\n    }\n\n    var readCallback = callbacks.import;\n    if (readCallback === undefined) {\n      readCallback = function (data) {\n        return {\n          error: 'File import callback not supported'\n        };\n      };\n    }\n\n    var singleCallback;\n    if (isVersion6) {\n      // After 0.6.x multiple kind of callbacks are supported.\n      var smtSolverCallback = callbacks.smtSolver;\n      if (smtSolverCallback === undefined) {\n        smtSolverCallback = function (data) {\n          return {\n            error: 'SMT solver callback not supported'\n          };\n        };\n      }\n\n      singleCallback = function (kind, data) {\n        if (kind === 'source') {\n          return readCallback(data);\n        } else if (kind === 'smt-query') {\n          return smtSolverCallback(data);\n        } else {\n          assert(false, 'Invalid callback kind specified.');\n        }\n      };\n\n      singleCallback = wrapCallbackWithKind(singleCallback);\n    } else {\n      // Old Solidity version only supported imports.\n      singleCallback = wrapCallback(readCallback);\n    }\n\n    // This is to support multiple versions of Emscripten.\n    var addFunction = soljson.addFunction || soljson.Runtime.addFunction;\n    var removeFunction = soljson.removeFunction || soljson.Runtime.removeFunction;\n\n    var cb = addFunction(singleCallback, 'viiiii');\n    var output;\n    try {\n      args.push(cb);\n      if (isVersion6) {\n        // Callback context.\n        args.push(null);\n      }\n      output = compile.apply(undefined, args);\n    } catch (e) {\n      removeFunction(cb);\n      throw e;\n    }\n    removeFunction(cb);\n    if (reset) {\n      // Explicitly free memory.\n      //\n      // NOTE: cwrap() of \"compile\" will copy the returned pointer into a\n      //       Javascript string and it is not possible to call free() on it.\n      //       reset() however will clear up all allocations.\n      reset();\n    }\n    return output;\n  };\n\n  var compileJSON = null;\n  if ('_compileJSON' in soljson) {\n    // input (text), optimize (bool) -> output (jsontext)\n    compileJSON = soljson.cwrap('compileJSON', 'string', ['string', 'number']);\n  }\n\n  var compileJSONMulti = null;\n  if ('_compileJSONMulti' in soljson) {\n    // input (jsontext), optimize (bool) -> output (jsontext)\n    compileJSONMulti = soljson.cwrap('compileJSONMulti', 'string', ['string', 'number']);\n  }\n\n  var compileJSONCallback = null;\n  if ('_compileJSONCallback' in soljson) {\n    // input (jsontext), optimize (bool), callback (ptr) -> output (jsontext)\n    var compileInternal = soljson.cwrap('compileJSONCallback', 'string', ['string', 'number', 'number']);\n    compileJSONCallback = function (input, optimize, readCallback) {\n      return runWithCallbacks(readCallback, compileInternal, [ input, optimize ]);\n    };\n  }\n\n  var compileStandard = null;\n  if ('_compileStandard' in soljson) {\n    // input (jsontext), callback (ptr) -> output (jsontext)\n    var compileStandardInternal = soljson.cwrap('compileStandard', 'string', ['string', 'number']);\n    compileStandard = function (input, readCallback) {\n      return runWithCallbacks(readCallback, compileStandardInternal, [ input ]);\n    };\n  }\n  if ('_solidity_compile' in soljson) {\n    var solidityCompile;\n    if (isVersion6) {\n      // input (jsontext), callback (ptr), callback_context (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number', 'number']);\n    } else {\n      // input (jsontext), callback (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number']);\n    }\n    compileStandard = function (input, callbacks) {\n      return runWithCallbacks(callbacks, solidityCompile, [ input ]);\n    };\n  }\n\n  // Expects a Standard JSON I/O but supports old compilers\n  var compileStandardWrapper = function (input, readCallback) {\n    if (compileStandard !== null) {\n      return compileStandard(input, readCallback);\n    }\n\n    function formatFatalError (message) {\n      return JSON.stringify({\n        errors: [\n          {\n            'type': 'JSONError',\n            'component': 'solcjs',\n            'severity': 'error',\n            'message': message,\n            'formattedMessage': 'Error: ' + message\n          }\n        ]\n      });\n    }\n\n    try {\n      input = JSON.parse(input);\n    } catch (e) {\n      return formatFatalError('Invalid JSON supplied: ' + e.message);\n    }\n\n    if (input['language'] !== 'Solidity') {\n      return formatFatalError('Only \"Solidity\" is supported as a language.');\n    }\n\n    // NOTE: this is deliberately `== null`\n    if (input['sources'] == null || input['sources'].length === 0) {\n      return formatFatalError('No input sources specified.');\n    }\n\n    function isOptimizerEnabled (input) {\n      return input['settings'] && input['settings']['optimizer'] && input['settings']['optimizer']['enabled'];\n    }\n\n    function translateSources (input) {\n      var sources = {};\n      for (var source in input['sources']) {\n        if (input['sources'][source]['content'] !== null) {\n          sources[source] = input['sources'][source]['content'];\n        } else {\n          // force failure\n          return null;\n        }\n      }\n      return sources;\n    }\n\n    function librariesSupplied (input) {\n      if (input['settings']) {\n        return input['settings']['libraries'];\n      }\n    }\n\n    function translateOutput (output, libraries) {\n      try {\n        output = JSON.parse(output);\n      } catch (e) {\n        return formatFatalError('Compiler returned invalid JSON: ' + e.message);\n      }\n      output = translate.translateJsonCompilerOutput(output, libraries);\n      if (output == null) {\n        return formatFatalError('Failed to process output.');\n      }\n      return JSON.stringify(output);\n    }\n\n    var sources = translateSources(input);\n    if (sources === null || Object.keys(sources).length === 0) {\n      return formatFatalError('Failed to process sources.');\n    }\n\n    // Try linking if libraries were supplied\n    var libraries = librariesSupplied(input);\n\n    // Try to wrap around old versions\n    if (compileJSONCallback !== null) {\n      return translateOutput(compileJSONCallback(JSON.stringify({ 'sources': sources }), isOptimizerEnabled(input), readCallback), libraries);\n    }\n\n    if (compileJSONMulti !== null) {\n      return translateOutput(compileJSONMulti(JSON.stringify({ 'sources': sources }), isOptimizerEnabled(input)), libraries);\n    }\n\n    // Try our luck with an ancient compiler\n    if (compileJSON !== null) {\n      if (Object.keys(sources).length !== 1) {\n        return formatFatalError('Multiple sources provided, but compiler only supports single input.');\n      }\n      return translateOutput(compileJSON(sources[Object.keys(sources)[0]], isOptimizerEnabled(input)), libraries);\n    }\n\n    return formatFatalError('Compiler does not support any known interface.');\n  };\n\n  return {\n    version: version,\n    semver: versionToSemver,\n    license: license,\n    lowlevel: {\n      compileSingle: compileJSON,\n      compileMulti: compileJSONMulti,\n      compileCallback: compileJSONCallback,\n      compileStandard: compileStandard\n    },\n    features: {\n      legacySingleInput: compileJSON !== null,\n      multipleInputs: compileJSONMulti !== null || compileStandard !== null,\n      importCallback: compileJSONCallback !== null || compileStandard !== null,\n      nativeStandardJSON: compileStandard !== null\n    },\n    compile: compileStandardWrapper,\n    // Loads the compiler of the given version from the github repository\n    // instead of from the local filesystem.\n    loadRemoteVersion: function (versionString, cb) {\n      var mem = new MemoryStream(null, {readable: false});\n      var url = 'https://solc-bin.ethereum.org/bin/soljson-' + versionString + '.js';\n      https.get(url, function (response) {\n        if (response.statusCode !== 200) {\n          cb(new Error('Error retrieving binary: ' + response.statusMessage));\n        } else {\n          response.pipe(mem);\n          response.on('end', function () {\n            cb(null, setupMethods(requireFromString(mem.toString(), 'soljson-' + versionString + '.js')));\n          });\n        }\n      }).on('error', function (error) {\n        cb(error);\n      });\n    },\n    // Use this if you want to add wrapper functions around the pure module.\n    setupMethods: setupMethods\n  };\n}\n\nmodule.exports = setupMethods;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}