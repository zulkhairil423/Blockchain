{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInputFromCompilationJob = void 0;\n\nfunction getInputFromCompilationJob(compilationJob) {\n  const sources = {}; // we sort the files so that we always get the same compilation input\n\n  const resolvedFiles = compilationJob.getResolvedFiles().sort((a, b) => a.sourceName.localeCompare(b.sourceName));\n\n  for (const file of resolvedFiles) {\n    sources[file.sourceName] = {\n      content: file.content.rawContent\n    };\n  }\n\n  const {\n    settings\n  } = compilationJob.getSolcConfig();\n  return {\n    language: \"Solidity\",\n    sources,\n    settings\n  };\n}\n\nexports.getInputFromCompilationJob = getInputFromCompilationJob;","map":{"version":3,"mappings":";;;;;;;AAEA,SAAgBA,0BAAhB,CACEC,cADF,EACgC;EAE9B,MAAMC,OAAO,GAAkD,EAA/D,CAF8B,CAI9B;;EACA,MAAMC,aAAa,GAAGF,cAAc,CACjCG,gBADmB,GAEnBC,IAFmB,CAEd,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,UAAF,CAAaC,aAAb,CAA2BF,CAAC,CAACC,UAA7B,CAFI,CAAtB;;EAIA,KAAK,MAAME,IAAX,IAAmBP,aAAnB,EAAkC;IAChCD,OAAO,CAACQ,IAAI,CAACF,UAAN,CAAP,GAA2B;MACzBG,OAAO,EAAED,IAAI,CAACC,OAAL,CAAaC;IADG,CAA3B;EAGD;;EAED,MAAM;IAAEC;EAAF,IAAeZ,cAAc,CAACa,aAAf,EAArB;EAEA,OAAO;IACLC,QAAQ,EAAE,UADL;IAELb,OAFK;IAGLW;EAHK,CAAP;AAKD;;AAvBDG","names":["getInputFromCompilationJob","compilationJob","sources","resolvedFiles","getResolvedFiles","sort","a","b","sourceName","localeCompare","file","content","rawContent","settings","getSolcConfig","language","exports"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\solidity\\compiler\\compiler-input.ts"],"sourcesContent":["import { CompilationJob, CompilerInput } from \"../../../types\";\n\nexport function getInputFromCompilationJob(\n  compilationJob: CompilationJob\n): CompilerInput {\n  const sources: { [sourceName: string]: { content: string } } = {};\n\n  // we sort the files so that we always get the same compilation input\n  const resolvedFiles = compilationJob\n    .getResolvedFiles()\n    .sort((a, b) => a.sourceName.localeCompare(b.sourceName));\n\n  for (const file of resolvedFiles) {\n    sources[file.sourceName] = {\n      content: file.content.rawContent,\n    };\n  }\n\n  const { settings } = compilationJob.getSolcConfig();\n\n  return {\n    language: \"Solidity\",\n    sources,\n    settings,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}