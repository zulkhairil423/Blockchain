{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\n\nconst helpers_1 = require(\"./helpers\");\n\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n\n  return `0x${i.toString(16)}`;\n};\n\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\n\nconst intToBuffer = function (i) {\n  const hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\n\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\nconst zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nconst setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\nconst setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\n\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\nconst stripZeros = function (a) {\n  let first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nconst unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\n\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\nconst unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\n\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\nconst unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\n\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\nconst toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n    }\n\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\nconst bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\n\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\n\nfunction bufferToBigInt(buf) {\n  const hex = (0, exports.bufferToHex)(buf);\n\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n\n  return BigInt(hex);\n}\n\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\n\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\n\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\nconst bufferToInt = function (buf) {\n  const res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\n\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\nconst fromSigned = function (num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\n\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\nconst toUnsigned = function (num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\n\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\nconst addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\n\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\n\nfunction short(buffer) {\n  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n\n  return bufferStr.slice(0, maxLength) + '…';\n}\n\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\n\nconst toUtf8 = function (hex) {\n  const zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\n\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\nconst baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`;\n  } else if (ba instanceof Array) {\n    const array = [];\n\n    for (let i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n\n    return array;\n  }\n};\n\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\n\nconst validateNoLeadingZeroes = function (values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n    }\n  }\n};\n\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\n\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n\n  return arr.map(a => arrToBufArr(a));\n}\n\nexports.arrToBufArr = arrToBufArr;\n\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? []);\n  }\n\n  return arr.map(a => bufArrToArr(a));\n}\n\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\n\nconst bigIntToHex = num => {\n  return '0x' + num.toString(16);\n};\n\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\n\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;","map":{"version":3,"mappings":"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","names":["intToHex","i","Number","isSafeInteger","Error","toString","exports","intToBuffer","hex","Buffer","from","slice","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","unpadHexString","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","BigInt","n","toArray","bufferToHex","bufferToBigInt","bigIntToBuffer","num","bufferToInt","res","fromSigned","asIntN","toUnsigned","asUintN","addHexPrefix","str","short","buffer","maxLength","bufferStr","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","array","push","validateNoLeadingZeroes","values","k","Object","entries","arrToBufArr","arr","map","bufArrToArr","bigIntToHex","bigIntToUnpaddedBuffer","value"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@nomicfoundation\\ethereumjs-util\\src\\bytes.ts"],"sourcesContent":["import { assertIsArray, assertIsBuffer, assertIsHexString } from './helpers'\nimport { isHexPrefixed, isHexString, padToEven, stripHexPrefix } from './internal'\n\nimport type {\n  NestedBufferArray,\n  NestedUint8Array,\n  PrefixedHexString,\n  TransformableToArray,\n  TransformableToBuffer,\n} from './types'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return ('0x' + stripZeros(a)) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | bigint\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`)\n    }\n    let n = v.toString(16)\n    if (n.length % 2) n = '0' + n\n    return Buffer.from(n, 'hex')\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nexport function bufferToBigInt(buf: Buffer) {\n  const hex = bufferToHex(buf)\n  if (hex === '0x') {\n    return BigInt(0)\n  }\n  return BigInt(hex)\n}\n\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nexport function bigIntToBuffer(num: bigint) {\n  return toBuffer('0x' + num.toString(16))\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  const res = Number(bufferToBigInt(buf))\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits')\n  return res\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): bigint {\n  return BigInt.asIntN(256, bufferToBigInt(num))\n}\n\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: bigint): Buffer {\n  return bigIntToBuffer(BigInt.asUintN(256, num))\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nexport function short(buffer: Buffer | string, maxLength: number = 50): string {\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer\n  if (bufferStr.length <= maxLength) {\n    return bufferStr\n  }\n  return bufferStr.slice(0, maxLength) + '…'\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: { [key: string]: Buffer | undefined }) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link Uint8Array} or {@link NestedUint8Array} to {@link Buffer} or {@link NestedBufferArray}\n */\nexport function arrToBufArr(arr: Uint8Array): Buffer\nexport function arrToBufArr(arr: NestedUint8Array): NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr)\n  }\n  return arr.map((a) => arrToBufArr(a))\n}\n\n/**\n * Converts a {@link Buffer} or {@link NestedBufferArray} to {@link Uint8Array} or {@link NestedUint8Array}\n */\nexport function bufArrToArr(arr: Buffer): Uint8Array\nexport function bufArrToArr(arr: NestedBufferArray): NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? [])\n  }\n  return arr.map((a) => bufArrToArr(a))\n}\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => {\n  return '0x' + num.toString(16)\n}\n\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedBuffer(value: bigint): Buffer {\n  return unpadBuffer(bigIntToBuffer(value))\n}\n"]},"metadata":{},"sourceType":"script"}