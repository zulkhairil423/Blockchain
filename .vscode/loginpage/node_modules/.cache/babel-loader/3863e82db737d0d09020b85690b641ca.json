{"ast":null,"code":"'use strict';\n\nconst {\n  Transform\n} = require('stream');\n\nconst {\n  Console\n} = require('console');\n/**\n * Gets the output of `console.table(…)` as a string.\n */\n\n\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor() {\n    let {\n      disableColors\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.transform = new Transform({\n      transform(chunk, _enc, cb) {\n        cb(null, chunk);\n      }\n\n    });\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    });\n  }\n\n  format(pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(_ref => {\n      let {\n        method,\n        path,\n        data: {\n          statusCode\n        },\n        persist,\n        times,\n        timesInvoked,\n        origin\n      } = _ref;\n      return {\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '✅' : '❌',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      };\n    });\n    this.logger.table(withPrettyHeaders);\n    return this.transform.read().toString();\n  }\n\n};","map":{"version":3,"names":["Transform","require","Console","module","exports","PendingInterceptorsFormatter","constructor","disableColors","transform","chunk","_enc","cb","logger","stdout","inspectOptions","colors","process","env","CI","format","pendingInterceptors","withPrettyHeaders","map","method","path","data","statusCode","persist","times","timesInvoked","origin","Method","Origin","Path","Persistent","Invocations","Remaining","Infinity","table","read","toString"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/undici/lib/mock/pending-interceptors-formatter.js"],"sourcesContent":["'use strict'\n\nconst { Transform } = require('stream')\nconst { Console } = require('console')\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '✅' : '❌',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,QAAD,CAA7B;;AACA,MAAM;EAAEC;AAAF,IAAcD,OAAO,CAAC,SAAD,CAA3B;AAEA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,4BAAN,CAAmC;EAClDC,WAAW,GAA0B;IAAA,IAAxB;MAAEC;IAAF,CAAwB,uEAAJ,EAAI;IACnC,KAAKC,SAAL,GAAiB,IAAIR,SAAJ,CAAc;MAC7BQ,SAAS,CAAEC,KAAF,EAASC,IAAT,EAAeC,EAAf,EAAmB;QAC1BA,EAAE,CAAC,IAAD,EAAOF,KAAP,CAAF;MACD;;IAH4B,CAAd,CAAjB;IAMA,KAAKG,MAAL,GAAc,IAAIV,OAAJ,CAAY;MACxBW,MAAM,EAAE,KAAKL,SADW;MAExBM,cAAc,EAAE;QACdC,MAAM,EAAE,CAACR,aAAD,IAAkB,CAACS,OAAO,CAACC,GAAR,CAAYC;MADzB;IAFQ,CAAZ,CAAd;EAMD;;EAEDC,MAAM,CAAEC,mBAAF,EAAuB;IAC3B,MAAMC,iBAAiB,GAAGD,mBAAmB,CAACE,GAApB,CACxB;MAAA,IAAC;QAAEC,MAAF;QAAUC,IAAV;QAAgBC,IAAI,EAAE;UAAEC;QAAF,CAAtB;QAAsCC,OAAtC;QAA+CC,KAA/C;QAAsDC,YAAtD;QAAoEC;MAApE,CAAD;MAAA,OAAmF;QACjFC,MAAM,EAAER,MADyE;QAEjFS,MAAM,EAAEF,MAFyE;QAGjFG,IAAI,EAAET,IAH2E;QAIjF,eAAeE,UAJkE;QAKjFQ,UAAU,EAAEP,OAAO,GAAG,GAAH,GAAS,GALqD;QAMjFQ,WAAW,EAAEN,YANoE;QAOjFO,SAAS,EAAET,OAAO,GAAGU,QAAH,GAAcT,KAAK,GAAGC;MAPyC,CAAnF;IAAA,CADwB,CAA1B;IAWA,KAAKjB,MAAL,CAAY0B,KAAZ,CAAkBjB,iBAAlB;IACA,OAAO,KAAKb,SAAL,CAAe+B,IAAf,GAAsBC,QAAtB,EAAP;EACD;;AA9BiD,CAApD"},"metadata":{},"sourceType":"script"}