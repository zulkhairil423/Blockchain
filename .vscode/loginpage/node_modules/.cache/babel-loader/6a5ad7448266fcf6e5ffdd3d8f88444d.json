{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\nexport var defaultIntegrations = [// Common\nnew CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), // Native Wrappers\nnew Console(), new Http(), // Global Handlers\nnew OnUncaughtException(), new OnUnhandledRejection(), // Misc\nnew LinkedErrors()];\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\n\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    var tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    var global_1 = getGlobalObject(); // Prefer env var over global\n\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    } // This supports the variable that sentry-webpack-plugin injects\n    else if (global_1.SENTRY_RELEASE && global_1.SENTRY_RELEASE.id) {\n      options.release = global_1.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n\n\n  if (domain.active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function flush(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n\n      if (client) {\n        return [2\n        /*return*/\n        , client.flush(timeout)];\n      }\n\n      return [2\n      /*return*/\n      , Promise.reject(false)];\n    });\n  });\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function close(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n\n      if (client) {\n        return [2\n        /*return*/\n        , client.close(timeout)];\n      }\n\n      return [2\n      /*return*/\n      , Promise.reject(false)];\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,YAAY,IAAIC,gBAArD,QAA6E,cAA7E;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAGA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,YAAxB,EAAsCC,mBAAtC,EAA2DC,oBAA3D,QAAuF,gBAAvF;AAEA,OAAO,IAAMC,mBAAmB,GAAG,CACjC;AACA,IAAIX,gBAAgB,CAACY,cAArB,EAFiC,EAGjC,IAAIZ,gBAAgB,CAACa,gBAArB,EAHiC,EAIjC;AACA,IAAIP,OAAJ,EALiC,EAMjC,IAAIC,IAAJ,EANiC,EAOjC;AACA,IAAIE,mBAAJ,EARiC,EASjC,IAAIC,oBAAJ,EATiC,EAUjC;AACA,IAAIF,YAAJ,EAXiC,CAA5B;AAcP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,OAAM,SAAUM,IAAV,CAAeC,OAAf,EAAwC;EAAzB;IAAAA;EAAyB;;EAC5C,IAAIA,OAAO,CAACJ,mBAAR,KAAgCK,SAApC,EAA+C;IAC7CD,OAAO,CAACJ,mBAAR,GAA8BA,mBAA9B;EACD;;EAED,IAAII,OAAO,CAACE,GAAR,KAAgBD,SAAhB,IAA6BE,OAAO,CAACC,GAAR,CAAYC,UAA7C,EAAyD;IACvDL,OAAO,CAACE,GAAR,GAAcC,OAAO,CAACC,GAAR,CAAYC,UAA1B;EACD;;EAED,IAAIL,OAAO,CAACM,gBAAR,KAA6BL,SAA7B,IAA0CE,OAAO,CAACC,GAAR,CAAYG,yBAA1D,EAAqF;IACnF,IAAMD,gBAAgB,GAAGE,UAAU,CAACL,OAAO,CAACC,GAAR,CAAYG,yBAAb,CAAnC;;IACA,IAAIE,QAAQ,CAACH,gBAAD,CAAZ,EAAgC;MAC9BN,OAAO,CAACM,gBAAR,GAA2BA,gBAA3B;IACD;EACF;;EAED,IAAIN,OAAO,CAACU,OAAR,KAAoBT,SAAxB,EAAmC;IACjC,IAAMU,QAAM,GAAGvB,eAAe,EAA9B,CADiC,CAEjC;;IACA,IAAIe,OAAO,CAACC,GAAR,CAAYQ,cAAhB,EAAgC;MAC9BZ,OAAO,CAACU,OAAR,GAAkBP,OAAO,CAACC,GAAR,CAAYQ,cAA9B;IACD,CAFD,CAGA;IAHA,KAIK,IAAID,QAAM,CAACC,cAAP,IAAyBD,QAAM,CAACC,cAAP,CAAsBC,EAAnD,EAAuD;MAC1Db,OAAO,CAACU,OAAR,GAAkBC,QAAM,CAACC,cAAP,CAAsBC,EAAxC;IACD;EACF;;EAED,IAAIb,OAAO,CAACc,WAAR,KAAwBb,SAAxB,IAAqCE,OAAO,CAACC,GAAR,CAAYW,kBAArD,EAAyE;IACvEf,OAAO,CAACc,WAAR,GAAsBX,OAAO,CAACC,GAAR,CAAYW,kBAAlC;EACD,CA9B2C,CAgC5C;;;EACA,IAAK1B,MAAc,CAAC2B,MAApB,EAA4B;IAC1B7B,eAAe,CAACD,cAAc,EAAf,EAAmBJ,aAAa,EAAhC,CAAf;EACD;;EAEDC,WAAW,CAACO,UAAD,EAAaU,OAAb,CAAX;AACD;AAED;;;;;;AAKA,OAAM,SAAUiB,WAAV,GAAqB;EACzB,OAAOnC,aAAa,GAAGmC,WAAhB,EAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAgBC,KAAhB,CAAsBC,OAAtB,EAAsC;;;;MACpCC,MAAM,GAAGtC,aAAa,GAAGuC,SAAhB,EAAT;;MACN,IAAID,MAAJ,EAAY;QACV;QAAA;QAAA,EAAOA,MAAM,CAACF,KAAP,CAAaC,OAAb,CAAP;MACD;;MACD;MAAA;MAAA,EAAOG,OAAO,CAACC,MAAR,CAAe,KAAf,CAAP;;;AACD;AAED;;;;;;;AAMA,OAAM,SAAgBC,KAAhB,CAAsBL,OAAtB,EAAsC;;;;MACpCC,MAAM,GAAGtC,aAAa,GAAGuC,SAAhB,EAAT;;MACN,IAAID,MAAJ,EAAY;QACV;QAAA;QAAA,EAAOA,MAAM,CAACI,KAAP,CAAaL,OAAb,CAAP;MACD;;MACD;MAAA;MAAA,EAAOG,OAAO,CAACC,MAAR,CAAe,KAAf,CAAP;;;AACD","names":["getCurrentHub","initAndBind","Integrations","CoreIntegrations","getMainCarrier","setHubOnCarrier","getGlobalObject","domain","NodeClient","Console","Http","LinkedErrors","OnUncaughtException","OnUnhandledRejection","defaultIntegrations","InboundFilters","FunctionToString","init","options","undefined","dsn","process","env","SENTRY_DSN","tracesSampleRate","SENTRY_TRACES_SAMPLE_RATE","parseFloat","isFinite","release","global_1","SENTRY_RELEASE","id","environment","SENTRY_ENVIRONMENT","active","lastEventId","flush","timeout","client","getClient","Promise","reject","close"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\sdk.ts"],"sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\n\nimport { NodeOptions } from './backend';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\n\nexport const defaultIntegrations = [\n  // Common\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  // Native Wrappers\n  new Console(),\n  new Http(),\n  // Global Handlers\n  new OnUncaughtException(),\n  new OnUnhandledRejection(),\n  // Misc\n  new LinkedErrors(),\n];\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\nexport function init(options: NodeOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const global = getGlobalObject<Window>();\n    // Prefer env var over global\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    }\n    // This supports the variable that sentry-webpack-plugin injects\n    else if (global.SENTRY_RELEASE && global.SENTRY_RELEASE.id) {\n      options.release = global.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  if ((domain as any).active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return Promise.reject(false);\n}\n"]},"metadata":{},"sourceType":"module"}