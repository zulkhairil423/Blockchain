{"ast":null,"code":"'use strict';\n\nconst {\n  getResponseData,\n  buildKey,\n  addMockDispatch\n} = require('./mock-utils');\n\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols');\n\nconst {\n  InvalidArgumentError\n} = require('../core/errors');\n\nconst {\n  buildURL\n} = require('../core/util');\n/**\n * Defines the scope API for an interceptor reply\n */\n\n\nclass MockScope {\n  constructor(mockDispatch) {\n    this[kMockDispatch] = mockDispatch;\n  }\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n\n\n  delay(waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0');\n    }\n\n    this[kMockDispatch].delay = waitInMs;\n    return this;\n  }\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n\n\n  persist() {\n    this[kMockDispatch].persist = true;\n    return this;\n  }\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n\n\n  times(repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0');\n    }\n\n    this[kMockDispatch].times = repeatTimes;\n    return this;\n  }\n\n}\n/**\n * Defines an interceptor for a Mock\n */\n\n\nclass MockInterceptor {\n  constructor(opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object');\n    }\n\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined');\n    }\n\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET';\n    } // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n\n\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query);\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://');\n        opts.path = parsedURL.pathname + parsedURL.search;\n      }\n    }\n\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase();\n    }\n\n    this[kDispatchKey] = buildKey(opts);\n    this[kDispatches] = mockDispatches;\n    this[kDefaultHeaders] = {};\n    this[kDefaultTrailers] = {};\n    this[kContentLength] = false;\n  }\n\n  createMockScopeDispatchData(statusCode, data) {\n    let responseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const responseData = getResponseData(data);\n    const contentLength = this[kContentLength] ? {\n      'content-length': responseData.length\n    } : {};\n    const headers = { ...this[kDefaultHeaders],\n      ...contentLength,\n      ...responseOptions.headers\n    };\n    const trailers = { ...this[kDefaultTrailers],\n      ...responseOptions.trailers\n    };\n    return {\n      statusCode,\n      data,\n      headers,\n      trailers\n    };\n  }\n\n  validateReplyParameters(statusCode, data, responseOptions) {\n    if (typeof statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined');\n    }\n\n    if (typeof data === 'undefined') {\n      throw new InvalidArgumentError('data must be defined');\n    }\n\n    if (typeof responseOptions !== 'object') {\n      throw new InvalidArgumentError('responseOptions must be an object');\n    }\n  }\n  /**\n   * Mock an undici request with a defined reply.\n   */\n\n\n  reply(replyData) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyData === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = opts => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyData(opts); // Check if it is in the right format\n\n        if (typeof resolvedData !== 'object') {\n          throw new InvalidArgumentError('reply options callback must return an object');\n        }\n\n        const {\n          statusCode,\n          data = '',\n          responseOptions = {}\n        } = resolvedData;\n        this.validateReplyParameters(statusCode, data, responseOptions); // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n\n        return { ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n        };\n      }; // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n\n\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n      return new MockScope(newMockDispatch);\n    } // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n\n\n    const [statusCode, data = '', responseOptions = {}] = [...arguments];\n    this.validateReplyParameters(statusCode, data, responseOptions); // Send in-already provided data like usual\n\n    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n    return new MockScope(newMockDispatch);\n  }\n  /**\n   * Mock an undici request with a defined error.\n   */\n\n\n  replyWithError(error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined');\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {\n      error\n    });\n    return new MockScope(newMockDispatch);\n  }\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n\n\n  defaultReplyHeaders(headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined');\n    }\n\n    this[kDefaultHeaders] = headers;\n    return this;\n  }\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n\n\n  defaultReplyTrailers(trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined');\n    }\n\n    this[kDefaultTrailers] = trailers;\n    return this;\n  }\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n\n\n  replyContentLength() {\n    this[kContentLength] = true;\n    return this;\n  }\n\n}\n\nmodule.exports.MockInterceptor = MockInterceptor;\nmodule.exports.MockScope = MockScope;","map":{"version":3,"names":["getResponseData","buildKey","addMockDispatch","require","kDispatches","kDispatchKey","kDefaultHeaders","kDefaultTrailers","kContentLength","kMockDispatch","InvalidArgumentError","buildURL","MockScope","constructor","mockDispatch","delay","waitInMs","Number","isInteger","persist","times","repeatTimes","MockInterceptor","opts","mockDispatches","path","method","query","parsedURL","URL","pathname","search","toUpperCase","createMockScopeDispatchData","statusCode","data","responseOptions","responseData","contentLength","length","headers","trailers","validateReplyParameters","reply","replyData","wrappedDefaultsCallback","resolvedData","newMockDispatch","arguments","dispatchData","replyWithError","error","defaultReplyHeaders","defaultReplyTrailers","replyContentLength","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/undici/lib/mock/mock-interceptor.js"],"sourcesContent":["'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (statusCode, data, responseOptions) {\n    if (typeof statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof data === 'undefined') {\n      throw new InvalidArgumentError('data must be defined')\n    }\n    if (typeof responseOptions !== 'object') {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyData) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyData === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyData(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object') {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const { statusCode, data = '', responseOptions = {} } = resolvedData\n        this.validateReplyParameters(statusCode, data, responseOptions)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const [statusCode, data = '', responseOptions = {}] = [...arguments]\n    this.validateReplyParameters(statusCode, data, responseOptions)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}