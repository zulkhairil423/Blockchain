{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getActiveDomain, getMainCarrier } from '@sentry/hub';\nimport { TransactionSamplingMethod } from '@sentry/types';\nimport { dynamicRequire, extractNodeRequestData, getGlobalObject, isInstanceOf, isNodeEnv, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\n\nfunction traceHeaders() {\n  var scope = this.getScope();\n\n  if (scope) {\n    var span = scope.getSpan();\n\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\n\n\nfunction sample(hub, transaction, samplingContext) {\n  var _a;\n\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {}; // nothing to do if there's no client or if tracing is disabled\n\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  } // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n\n\n  if (transaction.sampled !== undefined) {\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Explicit\n    });\n    return transaction;\n  } // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n\n\n  var sampleRate;\n\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext); // cast the rate to a number first in case it's a boolean\n\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Sampler,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate))\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Inheritance\n    });\n  } else {\n    sampleRate = options.tracesSampleRate; // cast the rate to a number first in case it's a boolean\n\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Rate,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate))\n    });\n  } // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n\n\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n    transaction.sampled = false;\n    return transaction;\n  } // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n\n\n  if (!sampleRate) {\n    logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  } // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n\n\n  transaction.sampled = Math.random() < sampleRate; // if we're not going to keep it, we're done\n\n  if (!transaction.sampled) {\n    logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  } // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n\n\n  transaction.initSpanRecorder((_a = options._experiments) === null || _a === void 0 ? void 0 : _a.maxSpans);\n  logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\n\n\nfunction getDefaultSamplingContext(transactionContext) {\n  // promote parent sampling decision (if any) for easy access\n  var parentSampled = transactionContext.parentSampled;\n  var defaultSamplingContext = {\n    transactionContext: transactionContext,\n    parentSampled: parentSampled\n  };\n\n  if (isNodeEnv()) {\n    var domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n      var nodeHttpModule = dynamicRequire(module, 'http'); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      var requestType_1 = nodeHttpModule.IncomingMessage;\n      var request = domain.members.find(function (member) {\n        return isInstanceOf(member, requestType_1);\n      });\n\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  } // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    var globalObject = getGlobalObject();\n\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = __assign({}, globalObject.location);\n    }\n  }\n\n  return defaultSamplingContext;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\n\n\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  } // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n\n\n  if (rate < 0 || rate > 1) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\n\n\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, __assign(__assign({}, getDefaultSamplingContext(transactionContext)), customSamplingContext));\n}\n/**\n * Create new idle transaction.\n */\n\n\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope) {\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n/**\n * @private\n */\n\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\n\nexport function addExtensionMethods() {\n  _addTracingExtensions(); // If an error happens globally, we should make sure transaction status is set to error.\n\n\n  registerErrorInstrumentation();\n}","map":{"version":3,"mappings":"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","names":["getActiveDomain","getMainCarrier","TransactionSamplingMethod","dynamicRequire","extractNodeRequestData","getGlobalObject","isInstanceOf","isNodeEnv","logger","registerErrorInstrumentation","IdleTransaction","Transaction","hasTracingEnabled","traceHeaders","scope","getScope","span","getSpan","toTraceparent","sample","hub","transaction","samplingContext","client","getClient","options","getOptions","sampled","undefined","tags","__assign","__sentry_samplingMethod","Explicit","sampleRate","tracesSampler","Sampler","__sentry_sampleRate","String","Number","parentSampled","Inheritance","tracesSampleRate","Rate","isValidSampleRate","warn","log","Math","random","initSpanRecorder","_experiments","_a","maxSpans","op","name","getDefaultSamplingContext","transactionContext","defaultSamplingContext","domain","nodeHttpModule","module","requestType_1","IncomingMessage","request","members","find","member","globalObject","location","rate","isNaN","JSON","stringify","_startTransaction","customSamplingContext","startIdleTransaction","idleTimeout","onScope","_addTracingExtensions","carrier","__SENTRY__","extensions","startTransaction","addExtensionMethods"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\hubextensions.ts"],"sourcesContent":["import { getActiveDomain, getMainCarrier, Hub } from '@sentry/hub';\nimport { CustomSamplingContext, SamplingContext, TransactionContext, TransactionSamplingMethod } from '@sentry/types';\nimport {\n  dynamicRequire,\n  extractNodeRequestData,\n  getGlobalObject,\n  isInstanceOf,\n  isNodeEnv,\n  logger,\n} from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T, samplingContext: SamplingContext): T {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.tags = { ...transaction.tags, __sentry_samplingMethod: TransactionSamplingMethod.Explicit };\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = {\n      ...transaction.tags,\n      __sentry_samplingMethod: TransactionSamplingMethod.Sampler,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate)),\n    };\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.tags = { ...transaction.tags, __sentry_samplingMethod: TransactionSamplingMethod.Inheritance };\n  } else {\n    sampleRate = options.tracesSampleRate;\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = {\n      ...transaction.tags,\n      __sentry_samplingMethod: TransactionSamplingMethod.Rate,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate)),\n    };\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext: TransactionContext): SamplingContext {\n  // promote parent sampling decision (if any) for easy access\n  const { parentSampled } = transactionContext;\n  const defaultSamplingContext: SamplingContext = { transactionContext, parentSampled };\n\n  if (isNodeEnv()) {\n    const domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n\n      const nodeHttpModule = dynamicRequire(module, 'http');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const requestType = nodeHttpModule.IncomingMessage;\n\n      const request = domain.members.find(member => isInstanceOf(member, requestType));\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  }\n\n  // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    const globalObject = getGlobalObject<WindowOrWorkerGlobalScope>();\n\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = { ...(globalObject as any).location };\n    }\n  }\n\n  return defaultSamplingContext;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, {\n    ...getDefaultSamplingContext(transactionContext),\n    ...customSamplingContext,\n  });\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n): IdleTransaction {\n  const transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"]},"metadata":{},"sourceType":"module"}