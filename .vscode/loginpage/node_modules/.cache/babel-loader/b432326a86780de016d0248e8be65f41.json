{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceAll = exports.pluralize = void 0;\n/**\n * Returns the plural form of a word.\n *\n * @param n The number of things to represent. This dictates whether to return\n * the singular or plural form of the word.\n * @param singular The singular form of the word.\n * @param plural An optional plural form of the word. If non is given, the\n * plural form is constructed by appending an \"s\" to the singular form.\n */\n\nfunction pluralize(n, singular, plural) {\n  if (n === 1) {\n    return singular;\n  }\n\n  if (plural !== undefined) {\n    return plural;\n  }\n\n  return `${singular}s`;\n}\n\nexports.pluralize = pluralize;\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\n\nfunction replaceAll(str, toReplace, replacement) {\n  return str.split(toReplace).join(replacement);\n}\n\nexports.replaceAll = replaceAll;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;AASA,SAAgBA,SAAhB,CAA0BC,CAA1B,EAAqCC,QAArC,EAAuDC,MAAvD,EAAsE;EACpE,IAAIF,CAAC,KAAK,CAAV,EAAa;IACX,OAAOC,QAAP;EACD;;EAED,IAAIC,MAAM,KAAKC,SAAf,EAA0B;IACxB,OAAOD,MAAP;EACD;;EAED,OAAO,GAAGD,QAAQ,GAAlB;AACD;;AAVDG;AAYA;;;;AAGA,SAAgBC,UAAhB,CACEC,GADF,EAEEC,SAFF,EAGEC,WAHF,EAGqB;EAEnB,OAAOF,GAAG,CAACG,KAAJ,CAAUF,SAAV,EAAqBG,IAArB,CAA0BF,WAA1B,CAAP;AACD;;AANDJ","names":["pluralize","n","singular","plural","undefined","exports","replaceAll","str","toReplace","replacement","split","join"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\util\\strings.ts"],"sourcesContent":["/**\n * Returns the plural form of a word.\n *\n * @param n The number of things to represent. This dictates whether to return\n * the singular or plural form of the word.\n * @param singular The singular form of the word.\n * @param plural An optional plural form of the word. If non is given, the\n * plural form is constructed by appending an \"s\" to the singular form.\n */\nexport function pluralize(n: number, singular: string, plural?: string) {\n  if (n === 1) {\n    return singular;\n  }\n\n  if (plural !== undefined) {\n    return plural;\n  }\n\n  return `${singular}s`;\n}\n\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\nexport function replaceAll(\n  str: string,\n  toReplace: string,\n  replacement: string\n) {\n  return str.split(toReplace).join(replacement);\n}\n"]},"metadata":{},"sourceType":"script"}