{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompilationJobCreationErrorReason = void 0;\nvar CompilationJobCreationErrorReason;\n\n(function (CompilationJobCreationErrorReason) {\n  CompilationJobCreationErrorReason[\"OTHER_ERROR\"] = \"other\";\n  CompilationJobCreationErrorReason[\"NO_COMPATIBLE_SOLC_VERSION_FOUND\"] = \"no-compatible-solc-version-found\";\n  CompilationJobCreationErrorReason[\"INCOMPATIBLE_OVERRIDEN_SOLC_VERSION\"] = \"incompatible-overriden-solc-version\";\n  CompilationJobCreationErrorReason[\"DIRECTLY_IMPORTS_INCOMPATIBLE_FILE\"] = \"directly-imports-incompatible-file\";\n  CompilationJobCreationErrorReason[\"INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE\"] = \"indirectly-imports-incompatible-file\";\n})(CompilationJobCreationErrorReason = exports.CompilationJobCreationErrorReason || (exports.CompilationJobCreationErrorReason = {}));","map":{"version":3,"mappings":";;;;;;AAyFA,IAAYA,iCAAZ;;AAAA,WAAYA,iCAAZ,EAA6C;EAC3CA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAYA,iCAAiC,GAAjCC,0FAAiC,EAAjC,CAAZ","names":["CompilationJobCreationErrorReason","exports"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\types\\builtin-tasks\\compile.ts"],"sourcesContent":["import { SolcConfig } from \"../config\";\n\n/**\n * A Solidity file.\n */\nexport interface ResolvedFile {\n  library?: LibraryInfo;\n  sourceName: string;\n  absolutePath: string;\n  content: FileContent;\n  // IMPORTANT: Mapped to ctime, NOT mtime. mtime isn't updated when the file\n  // properties (e.g. its name) are changed, only when it's content changes.\n  lastModificationDate: Date;\n  contentHash: string;\n  getVersionedName(): string;\n}\n\n/**\n * Information about an npm library.\n */\nexport interface LibraryInfo {\n  name: string;\n  version: string;\n}\n\n/**\n * The content of a Solidity file. Including its raw content, its imports and\n * version pragma directives.\n */\nexport interface FileContent {\n  rawContent: string;\n  imports: string[];\n  versionPragmas: string[];\n}\n\n/**\n * A CompilationJob includes all the necessary information to generate artifacts\n * from a group of files. This includes those files, their dependencies, and the\n * version and configuration of solc that should be used.\n */\nexport interface CompilationJob {\n  emitsArtifacts(file: ResolvedFile): boolean;\n  hasSolc9573Bug(): boolean;\n  merge(other: CompilationJob): CompilationJob;\n  getResolvedFiles(): ResolvedFile[];\n  getSolcConfig(): SolcConfig;\n}\n\n/**\n * A DependencyGraph represents a group of files and how they depend on each\n * other.\n */\nexport interface DependencyGraph {\n  getConnectedComponents(): DependencyGraph[];\n  getDependencies(file: ResolvedFile): ResolvedFile[];\n  getResolvedFiles(): ResolvedFile[];\n  getTransitiveDependencies(file: ResolvedFile): TransitiveDependency[];\n}\n\n/**\n * Used as part of the return value of DependencyGraph.getTransitiveDependencies\n */\nexport interface TransitiveDependency {\n  dependency: ResolvedFile;\n\n  /**\n   * The list of intermediate files between the file and the dependency\n   * this is not guaranteed to be the shortest path\n   */\n  path: ResolvedFile[];\n}\n\n/**\n * An object with a list of successfully created compilation jobs and a list of\n * errors. The `errors` entry maps error codes (that come from the\n * CompilationJobCreationError enum) to the source names of the files that\n * caused that error.\n */\nexport interface CompilationJobsCreationResult {\n  jobs: CompilationJob[];\n  errors: CompilationJobCreationError[];\n}\n\nexport interface CompilationJobCreationError {\n  reason: CompilationJobCreationErrorReason;\n  file: ResolvedFile;\n  extra?: any;\n}\n\nexport enum CompilationJobCreationErrorReason {\n  OTHER_ERROR = \"other\",\n  NO_COMPATIBLE_SOLC_VERSION_FOUND = \"no-compatible-solc-version-found\",\n  INCOMPATIBLE_OVERRIDEN_SOLC_VERSION = \"incompatible-overriden-solc-version\",\n  DIRECTLY_IMPORTS_INCOMPATIBLE_FILE = \"directly-imports-incompatible-file\",\n  INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE = \"indirectly-imports-incompatible-file\",\n}\n\nexport interface SolcBuild {\n  version: string;\n  longVersion: string;\n  compilerPath: string;\n  isSolcJs: boolean;\n}\n"]},"metadata":{},"sourceType":"script"}