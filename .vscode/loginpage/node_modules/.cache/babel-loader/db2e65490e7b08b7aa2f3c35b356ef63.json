{"ast":null,"code":"\"use strict\"; // Based on: https://github.com/notenoughneon/await-semaphore/blob/f117a6b59324038c9e8ee04c70c328215a727812/index.ts\n// which is distributed under this license: https://github.com/notenoughneon/await-semaphore/blob/f117a6b59324038c9e8ee04c70c328215a727812/LICENSE\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mutex = exports.Semaphore = void 0;\n/* eslint-disable @nomiclabs/hardhat-internal-rules/only-hardhat-error */\n\nclass Semaphore {\n  constructor(count) {\n    this._tasks = [];\n    this.count = count;\n  }\n\n  acquire() {\n    return new Promise(res => {\n      const task = () => {\n        let released = false;\n        res(() => {\n          if (!released) {\n            released = true;\n            this.count++;\n\n            this._sched();\n          }\n        });\n      };\n\n      this._tasks.push(task);\n\n      if (process !== undefined && process.nextTick !== undefined) {\n        process.nextTick(this._sched.bind(this));\n      } else {\n        setImmediate(this._sched.bind(this));\n      }\n    });\n  }\n\n  use(f) {\n    return this.acquire().then(release => {\n      return f().then(res => {\n        release();\n        return res;\n      }).catch(err => {\n        release();\n        throw err;\n      });\n    });\n  }\n\n  _sched() {\n    if (this.count > 0 && this._tasks.length > 0) {\n      this.count--;\n\n      const next = this._tasks.shift();\n\n      if (next === undefined) {\n        throw new Error(\"Unexpected undefined value in tasks list\");\n      }\n\n      next();\n    }\n  }\n\n}\n\nexports.Semaphore = Semaphore;\n\nclass Mutex extends Semaphore {\n  constructor() {\n    super(1);\n  }\n\n}\n\nexports.Mutex = Mutex;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAEA;;AAEA,MAAaA,SAAb,CAAsB;EAIpBC,YAAYC,KAAZ,EAAyB;IAFjB,cAA4B,EAA5B;IAGN,KAAKA,KAAL,GAAaA,KAAb;EACD;;EAEMC,OAAO;IACZ,OAAO,IAAIC,OAAJ,CAAyBC,GAAD,IAAQ;MACrC,MAAMC,IAAI,GAAG,MAAK;QAChB,IAAIC,QAAQ,GAAG,KAAf;QACAF,GAAG,CAAC,MAAK;UACP,IAAI,CAACE,QAAL,EAAe;YACbA,QAAQ,GAAG,IAAX;YACA,KAAKL,KAAL;;YACA,KAAKM,MAAL;UACD;QACF,CANE,CAAH;MAOD,CATD;;MAUA,KAAKC,MAAL,CAAYC,IAAZ,CAAiBJ,IAAjB;;MACA,IAAIK,OAAO,KAAKC,SAAZ,IAAyBD,OAAO,CAACE,QAAR,KAAqBD,SAAlD,EAA6D;QAC3DD,OAAO,CAACE,QAAR,CAAiB,KAAKL,MAAL,CAAYM,IAAZ,CAAiB,IAAjB,CAAjB;MACD,CAFD,MAEO;QACLC,YAAY,CAAC,KAAKP,MAAL,CAAYM,IAAZ,CAAiB,IAAjB,CAAD,CAAZ;MACD;IACF,CAjBM,CAAP;EAkBD;;EAEME,GAAG,CAAIC,CAAJ,EAAuB;IAC/B,OAAO,KAAKd,OAAL,GAAee,IAAf,CAAqBC,OAAD,IAAY;MACrC,OAAOF,CAAC,GACLC,IADI,CACEb,GAAD,IAAQ;QACZc,OAAO;QACP,OAAOd,GAAP;MACD,CAJI,EAKJe,KALI,CAKGC,GAAD,IAAQ;QACbF,OAAO;QACP,MAAME,GAAN;MACD,CARI,CAAP;IASD,CAVM,CAAP;EAWD;;EAEOb,MAAM;IACZ,IAAI,KAAKN,KAAL,GAAa,CAAb,IAAkB,KAAKO,MAAL,CAAYa,MAAZ,GAAqB,CAA3C,EAA8C;MAC5C,KAAKpB,KAAL;;MACA,MAAMqB,IAAI,GAAG,KAAKd,MAAL,CAAYe,KAAZ,EAAb;;MACA,IAAID,IAAI,KAAKX,SAAb,EAAwB;QACtB,MAAM,IAAIa,KAAJ,CAAU,0CAAV,CAAN;MACD;;MAEDF,IAAI;IACL;EACF;;AArDmB;;AAAtBG;;AAwDA,MAAaC,KAAb,SAA2B3B,SAA3B,CAAoC;EAClCC;IACE,MAAM,CAAN;EACD;;AAHiC;;AAApCyB","names":["Semaphore","constructor","count","acquire","Promise","res","task","released","_sched","_tasks","push","process","undefined","nextTick","bind","setImmediate","use","f","then","release","catch","err","length","next","shift","Error","exports","Mutex"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\vendor\\await-semaphore\\index.ts"],"sourcesContent":["// Based on: https://github.com/notenoughneon/await-semaphore/blob/f117a6b59324038c9e8ee04c70c328215a727812/index.ts\n// which is distributed under this license: https://github.com/notenoughneon/await-semaphore/blob/f117a6b59324038c9e8ee04c70c328215a727812/LICENSE\n\n/* eslint-disable @nomiclabs/hardhat-internal-rules/only-hardhat-error */\n\nexport class Semaphore {\n  public count: number;\n  private _tasks: Array<() => void> = [];\n\n  constructor(count: number) {\n    this.count = count;\n  }\n\n  public acquire() {\n    return new Promise<() => void>((res) => {\n      const task = () => {\n        let released = false;\n        res(() => {\n          if (!released) {\n            released = true;\n            this.count++;\n            this._sched();\n          }\n        });\n      };\n      this._tasks.push(task);\n      if (process !== undefined && process.nextTick !== undefined) {\n        process.nextTick(this._sched.bind(this));\n      } else {\n        setImmediate(this._sched.bind(this));\n      }\n    });\n  }\n\n  public use<T>(f: () => Promise<T>) {\n    return this.acquire().then((release) => {\n      return f()\n        .then((res) => {\n          release();\n          return res;\n        })\n        .catch((err) => {\n          release();\n          throw err;\n        });\n    });\n  }\n\n  private _sched() {\n    if (this.count > 0 && this._tasks.length > 0) {\n      this.count--;\n      const next = this._tasks.shift();\n      if (next === undefined) {\n        throw new Error(\"Unexpected undefined value in tasks list\");\n      }\n\n      next();\n    }\n  }\n}\n\nexport class Mutex extends Semaphore {\n  constructor() {\n    super(1);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}