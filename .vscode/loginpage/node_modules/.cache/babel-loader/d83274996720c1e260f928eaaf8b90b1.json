{"ast":null,"code":"const fs = require('fs');\n\nconst {\n  versionGteLt\n} = require('../dist/util'); // In node's core, this is implemented in C\n// https://github.com/nodejs/node/blob/v15.3.0/src/node_file.cc#L891-L985\n\n/**\n * @param {string} path\n * @returns {[] | [string, boolean]}\n */\n\n\nfunction internalModuleReadJSON(path) {\n  let string;\n\n  try {\n    string = fs.readFileSync(path, 'utf8');\n  } catch (e) {\n    if (e.code === 'ENOENT') return [];\n    throw e;\n  } // Node's implementation checks for the presence of relevant keys: main, name, type, exports, imports\n  // Node does this for performance to skip unnecessary parsing.\n  // This would slow us down and, based on our usage, we can skip it.\n\n\n  const containsKeys = true;\n  return [string, containsKeys];\n} // In node's core, this is implemented in C\n// https://github.com/nodejs/node/blob/63e7dc1e5c71b70c80ed9eda230991edb00811e2/src/node_file.cc#L987-L1005\n\n/**\n * @param {string} path\n * @returns {number} 0 = file, 1 = dir, negative = error\n */\n\n\nfunction internalModuleStat(path) {\n  const stat = fs.statSync(path, {\n    throwIfNoEntry: false\n  });\n  if (!stat) return -1;\n  if (stat.isFile()) return 0;\n  if (stat.isDirectory()) return 1;\n}\n/**\n * @param {string} path\n * @returns {number} 0 = file, 1 = dir, negative = error\n */\n\n\nfunction internalModuleStatInefficient(path) {\n  try {\n    const stat = fs.statSync(path);\n    if (stat.isFile()) return 0;\n    if (stat.isDirectory()) return 1;\n  } catch (e) {\n    return -e.errno || -1;\n  }\n}\n\nconst statSupportsThrowIfNoEntry = versionGteLt(process.versions.node, '15.3.0') || versionGteLt(process.versions.node, '14.17.0', '15.0.0');\nmodule.exports = {\n  internalModuleReadJSON,\n  internalModuleStat: statSupportsThrowIfNoEntry ? internalModuleStat : internalModuleStatInefficient\n};","map":{"version":3,"names":["fs","require","versionGteLt","internalModuleReadJSON","path","string","readFileSync","e","code","containsKeys","internalModuleStat","stat","statSync","throwIfNoEntry","isFile","isDirectory","internalModuleStatInefficient","errno","statSupportsThrowIfNoEntry","process","versions","node","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-internalBinding-fs.js"],"sourcesContent":["const fs = require('fs');\nconst {versionGteLt} = require('../dist/util');\n\n// In node's core, this is implemented in C\n// https://github.com/nodejs/node/blob/v15.3.0/src/node_file.cc#L891-L985\n/**\n * @param {string} path\n * @returns {[] | [string, boolean]}\n */\nfunction internalModuleReadJSON(path) {\n  let string\n  try {\n    string = fs.readFileSync(path, 'utf8')\n  } catch (e) {\n    if (e.code === 'ENOENT') return []\n    throw e\n  }\n  // Node's implementation checks for the presence of relevant keys: main, name, type, exports, imports\n  // Node does this for performance to skip unnecessary parsing.\n  // This would slow us down and, based on our usage, we can skip it.\n  const containsKeys = true\n  return [string, containsKeys]\n}\n\n// In node's core, this is implemented in C\n// https://github.com/nodejs/node/blob/63e7dc1e5c71b70c80ed9eda230991edb00811e2/src/node_file.cc#L987-L1005\n/**\n * @param {string} path\n * @returns {number} 0 = file, 1 = dir, negative = error\n */\nfunction internalModuleStat(path) {\n  const stat = fs.statSync(path, { throwIfNoEntry: false });\n  if(!stat) return -1;\n  if(stat.isFile()) return 0;\n  if(stat.isDirectory()) return 1;\n}\n\n/**\n * @param {string} path\n * @returns {number} 0 = file, 1 = dir, negative = error\n */\nfunction internalModuleStatInefficient(path) {\n  try {\n    const stat = fs.statSync(path);\n    if(stat.isFile()) return 0;\n    if(stat.isDirectory()) return 1;\n  } catch(e) {\n    return -e.errno || -1;\n  }\n}\n\nconst statSupportsThrowIfNoEntry = versionGteLt(process.versions.node, '15.3.0') ||\n  versionGteLt(process.versions.node, '14.17.0', '15.0.0');\n\nmodule.exports = {\n  internalModuleReadJSON,\n  internalModuleStat: statSupportsThrowIfNoEntry ? internalModuleStat : internalModuleStatInefficient\n};\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;EAACC;AAAD,IAAiBD,OAAO,CAAC,cAAD,CAA9B,C,CAEA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASE,sBAAT,CAAgCC,IAAhC,EAAsC;EACpC,IAAIC,MAAJ;;EACA,IAAI;IACFA,MAAM,GAAGL,EAAE,CAACM,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAT;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,IAAIA,CAAC,CAACC,IAAF,KAAW,QAAf,EAAyB,OAAO,EAAP;IACzB,MAAMD,CAAN;EACD,CAPmC,CAQpC;EACA;EACA;;;EACA,MAAME,YAAY,GAAG,IAArB;EACA,OAAO,CAACJ,MAAD,EAASI,YAAT,CAAP;AACD,C,CAED;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BN,IAA5B,EAAkC;EAChC,MAAMO,IAAI,GAAGX,EAAE,CAACY,QAAH,CAAYR,IAAZ,EAAkB;IAAES,cAAc,EAAE;EAAlB,CAAlB,CAAb;EACA,IAAG,CAACF,IAAJ,EAAU,OAAO,CAAC,CAAR;EACV,IAAGA,IAAI,CAACG,MAAL,EAAH,EAAkB,OAAO,CAAP;EAClB,IAAGH,IAAI,CAACI,WAAL,EAAH,EAAuB,OAAO,CAAP;AACxB;AAED;AACA;AACA;AACA;;;AACA,SAASC,6BAAT,CAAuCZ,IAAvC,EAA6C;EAC3C,IAAI;IACF,MAAMO,IAAI,GAAGX,EAAE,CAACY,QAAH,CAAYR,IAAZ,CAAb;IACA,IAAGO,IAAI,CAACG,MAAL,EAAH,EAAkB,OAAO,CAAP;IAClB,IAAGH,IAAI,CAACI,WAAL,EAAH,EAAuB,OAAO,CAAP;EACxB,CAJD,CAIE,OAAMR,CAAN,EAAS;IACT,OAAO,CAACA,CAAC,CAACU,KAAH,IAAY,CAAC,CAApB;EACD;AACF;;AAED,MAAMC,0BAA0B,GAAGhB,YAAY,CAACiB,OAAO,CAACC,QAAR,CAAiBC,IAAlB,EAAwB,QAAxB,CAAZ,IACjCnB,YAAY,CAACiB,OAAO,CAACC,QAAR,CAAiBC,IAAlB,EAAwB,SAAxB,EAAmC,QAAnC,CADd;AAGAC,MAAM,CAACC,OAAP,GAAiB;EACfpB,sBADe;EAEfO,kBAAkB,EAAEQ,0BAA0B,GAAGR,kBAAH,GAAwBM;AAFvD,CAAjB"},"metadata":{},"sourceType":"script"}