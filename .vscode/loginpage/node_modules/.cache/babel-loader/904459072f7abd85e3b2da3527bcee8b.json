{"ast":null,"code":"const {\n  existsSync,\n  readFileSync\n} = require(\"fs\");\n\nconst {\n  join\n} = require(\"path\");\n\nconst {\n  platform,\n  arch\n} = process;\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\n\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== \"function\") {\n    try {\n      return readFileSync(\"/usr/bin/ldd\", \"utf8\").includes(\"musl\");\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const {\n      glibcVersionRuntime\n    } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\n\nswitch (platform) {\n  case \"android\":\n    switch (arch) {\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.android-arm64.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      case \"arm\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.android-arm-eabi.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm-eabi.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm-eabi\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n\n    break;\n\n  case \"win32\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-x64-msvc.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-x64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-x64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      case \"ia32\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-ia32-msvc.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-ia32-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-ia32-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-arm64-msvc.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-arm64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-arm64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n\n    break;\n\n  case \"darwin\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.darwin-x64.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-x64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-x64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.darwin-arm64.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n\n    break;\n\n  case \"freebsd\":\n    if (arch !== \"x64\") {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n\n    localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.freebsd-x64.node\"));\n\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.freebsd-x64.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-freebsd-x64\");\n      }\n    } catch (e) {\n      loadError = e;\n    }\n\n    break;\n\n  case \"linux\":\n    switch (arch) {\n      case \"x64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-x64-musl.node\"));\n\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-x64-gnu.node\"));\n\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n\n        break;\n\n      case \"arm64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm64-musl.node\"));\n\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm64-gnu.node\"));\n\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n\n        break;\n\n      case \"arm\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm-gnueabihf.node\"));\n\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.linux-arm-gnueabihf.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm-gnueabihf\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n\n    break;\n\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\n\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n\n  throw new Error(`Failed to load native binding`);\n}\n\nconst {\n  analyze\n} = nativeBinding;\nmodule.exports.analyze = analyze;","map":{"version":3,"names":["existsSync","readFileSync","require","join","platform","arch","process","nativeBinding","localFileExisted","loadError","isMusl","report","getReport","includes","e","glibcVersionRuntime","header","__dirname","Error","analyze","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/@nomicfoundation/solidity-analyzer/index.js"],"sourcesContent":["const { existsSync, readFileSync } = require(\"fs\");\nconst { join } = require(\"path\");\n\nconst { platform, arch } = process;\n\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\n\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== \"function\") {\n    try {\n      return readFileSync(\"/usr/bin/ldd\", \"utf8\").includes(\"musl\");\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const { glibcVersionRuntime } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\n\nswitch (platform) {\n  case \"android\":\n    switch (arch) {\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.android-arm64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.android-arm-eabi.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm-eabi.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm-eabi\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n    break;\n  case \"win32\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-x64-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-x64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-x64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"ia32\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-ia32-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-ia32-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-ia32-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-arm64-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-arm64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-arm64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n    break;\n  case \"darwin\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.darwin-x64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-x64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-x64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.darwin-arm64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n    break;\n  case \"freebsd\":\n    if (arch !== \"x64\") {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n    localFileExisted = existsSync(\n      join(__dirname, \"solidity-analyzer.freebsd-x64.node\")\n    );\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.freebsd-x64.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-freebsd-x64\");\n      }\n    } catch (e) {\n      loadError = e;\n    }\n    break;\n  case \"linux\":\n    switch (arch) {\n      case \"x64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-x64-musl.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-x64-gnu.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-arm64-musl.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-arm64-gnu.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.linux-arm-gnueabihf.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.linux-arm-gnueabihf.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm-gnueabihf\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n    break;\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\n\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n  throw new Error(`Failed to load native binding`);\n}\n\nconst { analyze } = nativeBinding;\n\nmodule.exports.analyze = analyze;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}