{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n\n\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n\n\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n\n\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n\n\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n\n\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n\n\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n\n\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n\n\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n\n  return API;\n}();\n\nexport { API };","map":{"version":3,"mappings":"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","names":["Dsn","urlEncode","SENTRY_API_VERSION","dsn","_dsnObject","API","protocol","port","host","path","_getIngestEndpoint","getStoreEndpoint","_encodedAuth","_getEnvelopeEndpoint","projectId","clientName","clientVersion","header","push","user","pass","join","dialogOptions","endpoint","getBaseApiEndpoint","encodedOptions","toString","key","name","encodeURIComponent","email","length","target","base","auth","sentry_key","sentry_version"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\core\\src\\api.ts"],"sourcesContent":["import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}