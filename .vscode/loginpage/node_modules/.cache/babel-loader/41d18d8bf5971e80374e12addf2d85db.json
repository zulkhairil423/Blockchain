{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultTsconfigJsonForNodeVersion = void 0;\nconst nodeMajor = parseInt(process.versions.node.split('.')[0], 10);\n/**\n * return parsed JSON of the bundled @tsconfig/bases config appropriate for the\n * running version of nodejs\n * @internal\n */\n\nfunction getDefaultTsconfigJsonForNodeVersion(ts) {\n  const tsInternal = ts;\n\n  if (nodeMajor >= 16) {\n    const config = require('@tsconfig/node16/tsconfig.json');\n\n    if (configCompatible(config)) return config;\n  }\n\n  if (nodeMajor >= 14) {\n    const config = require('@tsconfig/node14/tsconfig.json');\n\n    if (configCompatible(config)) return config;\n  }\n\n  if (nodeMajor >= 12) {\n    const config = require('@tsconfig/node12/tsconfig.json');\n\n    if (configCompatible(config)) return config;\n  }\n\n  return require('@tsconfig/node10/tsconfig.json'); // Verify that tsconfig target and lib options are compatible with TypeScript compiler\n\n  function configCompatible(config) {\n    return typeof ts.ScriptTarget[config.compilerOptions.target.toUpperCase()] === 'number' && tsInternal.libs && config.compilerOptions.lib.every(lib => tsInternal.libs.includes(lib));\n  }\n}\n\nexports.getDefaultTsconfigJsonForNodeVersion = getDefaultTsconfigJsonForNodeVersion;","map":{"version":3,"mappings":";;;;;;AAEA,MAAMA,SAAS,GAAGC,QAAQ,CAACC,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAD,EAAsC,EAAtC,CAA1B;AACA;;;;;;AAKA,SAAgBC,oCAAhB,CAAqDC,EAArD,EAAiE;EAC/D,MAAMC,UAAU,GAAGD,EAAnB;;EACA,IAAIP,SAAS,IAAI,EAAjB,EAAqB;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAD,CAAtB;;IACA,IAAIC,gBAAgB,CAACF,MAAD,CAApB,EAA8B,OAAOA,MAAP;EAC/B;;EACD,IAAIT,SAAS,IAAI,EAAjB,EAAqB;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAD,CAAtB;;IACA,IAAIC,gBAAgB,CAACF,MAAD,CAApB,EAA8B,OAAOA,MAAP;EAC/B;;EACD,IAAIT,SAAS,IAAI,EAAjB,EAAqB;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAD,CAAtB;;IACA,IAAIC,gBAAgB,CAACF,MAAD,CAApB,EAA8B,OAAOA,MAAP;EAC/B;;EACD,OAAOC,OAAO,CAAC,gCAAD,CAAd,CAd+D,CAgB/D;;EACA,SAASC,gBAAT,CAA0BF,MAA1B,EAKC;IACC,OACE,OAAQF,EAAE,CAACK,YAAH,CACNH,MAAM,CAACI,eAAP,CAAuBC,MAAvB,CAA8BC,WAA9B,EADM,CAAR,KAEM,QAFN,IAGAP,UAAU,CAACQ,IAHX,IAIAP,MAAM,CAACI,eAAP,CAAuBI,GAAvB,CAA2BC,KAA3B,CAAkCD,GAAD,IAAST,UAAU,CAACQ,IAAX,CAAiBG,QAAjB,CAA0BF,GAA1B,CAA1C,CALF;EAOD;AACF;;AA/BDG","names":["nodeMajor","parseInt","process","versions","node","split","getDefaultTsconfigJsonForNodeVersion","ts","tsInternal","config","require","configCompatible","ScriptTarget","compilerOptions","target","toUpperCase","libs","lib","every","includes","exports"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\ts-node\\src\\tsconfigs.ts"],"sourcesContent":["import type { TSCommon, TSInternal } from './ts-compiler-types';\n\nconst nodeMajor = parseInt(process.versions.node.split('.')[0], 10);\n/**\n * return parsed JSON of the bundled @tsconfig/bases config appropriate for the\n * running version of nodejs\n * @internal\n */\nexport function getDefaultTsconfigJsonForNodeVersion(ts: TSCommon): any {\n  const tsInternal = ts as any as TSInternal;\n  if (nodeMajor >= 16) {\n    const config = require('@tsconfig/node16/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 14) {\n    const config = require('@tsconfig/node14/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 12) {\n    const config = require('@tsconfig/node12/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  return require('@tsconfig/node10/tsconfig.json');\n\n  // Verify that tsconfig target and lib options are compatible with TypeScript compiler\n  function configCompatible(config: {\n    compilerOptions: {\n      lib: string[];\n      target: string;\n    };\n  }) {\n    return (\n      typeof (ts.ScriptTarget as any)[\n        config.compilerOptions.target.toUpperCase()\n      ] === 'number' &&\n      tsInternal.libs &&\n      config.compilerOptions.lib.every((lib) => tsInternal.libs!.includes(lib))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}