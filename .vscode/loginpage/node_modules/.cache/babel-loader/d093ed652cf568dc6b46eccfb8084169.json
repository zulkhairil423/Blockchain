{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nvar global = getGlobalObject();\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nvar handlers = {};\nvar instrumented = {};\n/** Instruments given API */\n\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n\n    case 'dom':\n      instrumentDOM();\n      break;\n\n    case 'xhr':\n      instrumentXHR();\n      break;\n\n    case 'fetch':\n      instrumentFetch();\n      break;\n\n    case 'history':\n      instrumentHistory();\n      break;\n\n    case 'error':\n      instrumentError();\n      break;\n\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\n\n\nexport function addInstrumentationHandler(handler) {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n\n  handlers[handler.type] = handlers[handler.type] || [];\n  handlers[handler.type].push(handler.callback);\n  instrument(handler.type);\n}\n/** JSDoc */\n\nfunction triggerHandlers(type, data) {\n  var e_1, _a;\n\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  try {\n    for (var _b = __values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var handler = _c.value;\n\n      try {\n        handler(data);\n      } catch (e) {\n        logger.error(\"Error while triggering instrumentation handler.\\nType: \" + type + \"\\nName: \" + getFunctionName(handler) + \"\\nError: \" + e);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n/** JSDoc */\n\n\nfunction instrumentConsole() {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function (originalConsoleLevel) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        triggerHandlers('console', {\n          args: args,\n          level: level\n        }); // this fails for some browsers. :(\n\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n/** JSDoc */\n\n\nfunction instrumentFetch() {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function (originalFetch) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var handlerData = {\n        args: args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args)\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', __assign({}, handlerData)); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      return originalFetch.apply(global, args).then(function (response) {\n        triggerHandlers('fetch', __assign(__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          response: response\n        }));\n        return response;\n      }, function (error) {\n        triggerHandlers('fetch', __assign(__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          error: error\n        })); // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n        throw error;\n      });\n    };\n  });\n}\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** Extract `method` from fetch call arguments */\n\n\nfunction getFetchMethod(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n\n  return 'GET';\n}\n/** Extract `url` from fetch call arguments */\n\n\nfunction getFetchUrl(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\n\n\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  } // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n\n\n  var requestKeys = [];\n  var requestValues = [];\n  var xhrproto = XMLHttpRequest.prototype;\n  fill(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      } // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n      var xhr = this;\n      var url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1]\n      }; // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      var onreadystatechangeHandler = function () {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            var requestPos = requestKeys.indexOf(xhr);\n\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              var args_1 = requestValues.splice(requestPos)[0];\n\n              if (xhr.__sentry_xhr__ && args_1[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args_1[0];\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args: args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: xhr\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original) {\n          return function () {\n            var readyStateArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              readyStateArgs[_i] = arguments[_i];\n            }\n\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n  fill(xhrproto, 'send', function (originalSend) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      requestKeys.push(this);\n      requestValues.push(args);\n      triggerHandlers('xhr', {\n        args: args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nvar lastHref;\n/** JSDoc */\n\nfunction instrumentHistory() {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  var oldOnPopState = global.onpopstate;\n\n  global.onpopstate = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var to = global.location.href; // keep track of the current URL state, as we always receive only the updated state\n\n    var from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from: from,\n      to: to\n    });\n\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n  /** @hidden */\n\n\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var url = args.length > 2 ? args[2] : undefined;\n\n      if (url) {\n        // coerce to string (this is what pushState does)\n        var from = lastHref;\n        var to = String(url); // keep track of the current URL state, as we always receive only the updated state\n\n        lastHref = to;\n        triggerHandlers('history', {\n          from: from,\n          to: to\n        });\n      }\n\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n/** JSDoc */\n\n\nfunction instrumentDOM() {\n  if (!('document' in global)) {\n    return;\n  } // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n\n\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false); // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n\n  ['EventTarget', 'Node'].forEach(function (target) {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    var proto = global[target] && global[target].prototype; // eslint-disable-next-line no-prototype-builtins\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n\n    fill(proto, 'addEventListener', function (original) {\n      return function (eventName, fn, options) {\n        if (fn && fn.handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function (innerOriginal) {\n              return function (event) {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function (innerOriginal) {\n              return function (event) {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n    fill(proto, 'removeEventListener', function (original) {\n      return function (eventName, fn, options) {\n        try {\n          original.call(this, eventName, fn.__sentry_wrapped__, options);\n        } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nvar debounceDuration = 1000;\nvar debounceTimer = 0;\nvar keypressTimeout;\nvar lastCapturedEvent;\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\n\nfunction domEventHandler(name, handler, debounce) {\n  if (debounce === void 0) {\n    debounce = false;\n  }\n\n  return function (event) {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined; // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(function () {\n        handler({\n          event: event,\n          name: name\n        });\n      });\n    } else {\n      handler({\n        event: event,\n        name: name\n      });\n    }\n  };\n}\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\n\n\nfunction keypressEventHandler(handler) {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return function (event) {\n    var target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    var tagName = target && target.tagName; // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n\n    if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable) {\n      return;\n    } // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n\n\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n\n    clearTimeout(keypressTimeout);\n    keypressTimeout = setTimeout(function () {\n      keypressTimeout = undefined;\n    }, debounceDuration);\n  };\n}\n\nvar _oldOnErrorHandler = null;\n/** JSDoc */\n\nfunction instrumentError() {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column: column,\n      error: error,\n      line: line,\n      msg: msg,\n      url: url\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nvar _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}","map":{"version":3,"mappings":"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","names":["isInstanceOf","isString","logger","getGlobalObject","fill","getFunctionName","supportsHistory","supportsNativeFetch","global","handlers","instrumented","instrument","type","instrumentConsole","instrumentDOM","instrumentXHR","instrumentFetch","instrumentHistory","instrumentError","instrumentUnhandledRejection","warn","addInstrumentationHandler","handler","callback","push","triggerHandlers","data","_c","e","error","forEach","level","console","originalConsoleLevel","args","Function","prototype","apply","call","originalFetch","handlerData","fetchData","method","getFetchMethod","url","getFetchUrl","startTimestamp","Date","now","__assign","then","response","endTimestamp","fetchArgs","Request","String","toUpperCase","requestKeys","requestValues","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","match","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","requestPos","indexOf","splice","args_1","undefined","body","onreadystatechange","original","readyStateArgs","addEventListener","originalSend","lastHref","oldOnPopState","onpopstate","to","location","href","from","historyReplacementFunction","originalHistoryFunction","length","history","document","domEventHandler","bind","keypressEventHandler","target","proto","hasOwnProperty","eventName","fn","options","handleEvent","innerOriginal","event","__sentry_wrapped__","debounceDuration","debounceTimer","keypressTimeout","lastCapturedEvent","name","debounce","clearTimeout","setTimeout","tagName","isContentEditable","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\utils\\src\\instrument.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event): void => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}