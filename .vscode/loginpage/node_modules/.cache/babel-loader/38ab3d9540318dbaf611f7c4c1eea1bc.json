{"ast":null,"code":"'use strict';\n/**\n * @module TAP\n */\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\n\nvar Base = require('./base');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\n\nvar inherits = require('../utils').inherits;\n\nvar sprintf = util.format;\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n/**\n * Constructs a new `TAP` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\nfunction TAP(runner, options) {\n  Base.call(this, runner, options);\n  var self = this;\n  var n = 1;\n  var tapVersion = '12';\n\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.tapVersion) {\n      tapVersion = options.reporterOptions.tapVersion.toString();\n    }\n  }\n\n  this._producer = createProducer(tapVersion);\n  runner.once(EVENT_RUN_BEGIN, function () {\n    self._producer.writeVersion();\n  });\n  runner.on(EVENT_TEST_END, function () {\n    ++n;\n  });\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    self._producer.writePending(n, test);\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    self._producer.writePass(n, test);\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    self._producer.writeFail(n, test, err);\n  });\n  runner.once(EVENT_RUN_END, function () {\n    self._producer.writeEpilogue(runner.stats);\n  });\n}\n/**\n * Inherit from `Base.prototype`.\n */\n\n\ninherits(TAP, Base);\n/**\n * Returns a TAP-safe title of `test`.\n *\n * @private\n * @param {Test} test - Test instance.\n * @return {String} title with any hash character removed\n */\n\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n/**\n * Writes newline-terminated formatted string to reporter output stream.\n *\n * @private\n * @param {string} format - `printf`-like format string\n * @param {...*} [varArgs] - Format string arguments\n */\n\n\nfunction println(format, varArgs) {\n  var vargs = Array.from(arguments);\n  vargs[0] += '\\n';\n  process.stdout.write(sprintf.apply(null, vargs));\n}\n/**\n * Returns a `tapVersion`-appropriate TAP producer instance, if possible.\n *\n * @private\n * @param {string} tapVersion - Version of TAP specification to produce.\n * @returns {TAPProducer} specification-appropriate instance\n * @throws {Error} if specification version has no associated producer.\n */\n\n\nfunction createProducer(tapVersion) {\n  var producers = {\n    12: new TAP12Producer(),\n    13: new TAP13Producer()\n  };\n  var producer = producers[tapVersion];\n\n  if (!producer) {\n    throw new Error('invalid or unsupported TAP version: ' + JSON.stringify(tapVersion));\n  }\n\n  return producer;\n}\n/**\n * @summary\n * Constructs a new TAPProducer.\n *\n * @description\n * <em>Only</em> to be used as an abstract base class.\n *\n * @private\n * @constructor\n */\n\n\nfunction TAPProducer() {}\n/**\n * Writes the TAP version to reporter output stream.\n *\n * @abstract\n */\n\n\nTAPProducer.prototype.writeVersion = function () {};\n/**\n * Writes the plan to reporter output stream.\n *\n * @abstract\n * @param {number} ntests - Number of tests that are planned to run.\n */\n\n\nTAPProducer.prototype.writePlan = function (ntests) {\n  println('%d..%d', 1, ntests);\n};\n/**\n * Writes that test passed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that passed.\n * @param {Test} test - Instance containing test information.\n */\n\n\nTAPProducer.prototype.writePass = function (n, test) {\n  println('ok %d %s', n, title(test));\n};\n/**\n * Writes that test was skipped to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that was skipped.\n * @param {Test} test - Instance containing test information.\n */\n\n\nTAPProducer.prototype.writePending = function (n, test) {\n  println('ok %d %s # SKIP -', n, title(test));\n};\n/**\n * Writes that test failed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that failed.\n * @param {Test} test - Instance containing test information.\n * @param {Error} err - Reason the test failed.\n */\n\n\nTAPProducer.prototype.writeFail = function (n, test, err) {\n  println('not ok %d %s', n, title(test));\n};\n/**\n * Writes the summary epilogue to reporter output stream.\n *\n * @abstract\n * @param {Object} stats - Object containing run statistics.\n */\n\n\nTAPProducer.prototype.writeEpilogue = function (stats) {\n  // :TBD: Why is this not counting pending tests?\n  println('# tests ' + (stats.passes + stats.failures));\n  println('# pass ' + stats.passes); // :TBD: Why are we not showing pending results?\n\n  println('# fail ' + stats.failures);\n  this.writePlan(stats.passes + stats.failures + stats.pending);\n};\n/**\n * @summary\n * Constructs a new TAP12Producer.\n *\n * @description\n * Produces output conforming to the TAP12 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-specification.html|Specification}\n */\n\n\nfunction TAP12Producer() {\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n\n    if (err.message) {\n      println(err.message.replace(/^/gm, '  '));\n    }\n\n    if (err.stack) {\n      println(err.stack.replace(/^/gm, '  '));\n    }\n  };\n}\n/**\n * Inherit from `TAPProducer.prototype`.\n */\n\n\ninherits(TAP12Producer, TAPProducer);\n/**\n * @summary\n * Constructs a new TAP13Producer.\n *\n * @description\n * Produces output conforming to the TAP13 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-version-13-specification.html|Specification}\n */\n\nfunction TAP13Producer() {\n  /**\n   * Writes the TAP version to reporter output stream.\n   * @override\n   */\n  this.writeVersion = function () {\n    println('TAP version 13');\n  };\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n\n\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    var emitYamlBlock = err.message != null || err.stack != null;\n\n    if (emitYamlBlock) {\n      println(indent(1) + '---');\n\n      if (err.message) {\n        println(indent(2) + 'message: |-');\n        println(err.message.replace(/^/gm, indent(3)));\n      }\n\n      if (err.stack) {\n        println(indent(2) + 'stack: |-');\n        println(err.stack.replace(/^/gm, indent(3)));\n      }\n\n      println(indent(1) + '...');\n    }\n  };\n\n  function indent(level) {\n    return Array(level + 1).join('  ');\n  }\n}\n/**\n * Inherit from `TAPProducer.prototype`.\n */\n\n\ninherits(TAP13Producer, TAPProducer);\nTAP.description = 'TAP-compatible output';","map":{"version":3,"names":["util","require","Base","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_RUN_BEGIN","EVENT_RUN_END","EVENT_TEST_PENDING","EVENT_TEST_END","inherits","sprintf","format","exports","module","TAP","runner","options","call","self","n","tapVersion","reporterOptions","toString","_producer","createProducer","once","writeVersion","on","test","writePending","writePass","err","writeFail","writeEpilogue","stats","title","fullTitle","replace","println","varArgs","vargs","Array","from","arguments","process","stdout","write","apply","producers","TAP12Producer","TAP13Producer","producer","Error","JSON","stringify","TAPProducer","prototype","writePlan","ntests","passes","failures","pending","message","stack","emitYamlBlock","indent","level","join","description"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/mocha/lib/reporters/tap.js"],"sourcesContent":["'use strict';\n/**\n * @module TAP\n */\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar inherits = require('../utils').inherits;\nvar sprintf = util.format;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Constructs a new `TAP` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction TAP(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var n = 1;\n\n  var tapVersion = '12';\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.tapVersion) {\n      tapVersion = options.reporterOptions.tapVersion.toString();\n    }\n  }\n\n  this._producer = createProducer(tapVersion);\n\n  runner.once(EVENT_RUN_BEGIN, function () {\n    self._producer.writeVersion();\n  });\n\n  runner.on(EVENT_TEST_END, function () {\n    ++n;\n  });\n\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    self._producer.writePending(n, test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    self._producer.writePass(n, test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    self._producer.writeFail(n, test, err);\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    self._producer.writeEpilogue(runner.stats);\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(TAP, Base);\n\n/**\n * Returns a TAP-safe title of `test`.\n *\n * @private\n * @param {Test} test - Test instance.\n * @return {String} title with any hash character removed\n */\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n/**\n * Writes newline-terminated formatted string to reporter output stream.\n *\n * @private\n * @param {string} format - `printf`-like format string\n * @param {...*} [varArgs] - Format string arguments\n */\nfunction println(format, varArgs) {\n  var vargs = Array.from(arguments);\n  vargs[0] += '\\n';\n  process.stdout.write(sprintf.apply(null, vargs));\n}\n\n/**\n * Returns a `tapVersion`-appropriate TAP producer instance, if possible.\n *\n * @private\n * @param {string} tapVersion - Version of TAP specification to produce.\n * @returns {TAPProducer} specification-appropriate instance\n * @throws {Error} if specification version has no associated producer.\n */\nfunction createProducer(tapVersion) {\n  var producers = {\n    12: new TAP12Producer(),\n    13: new TAP13Producer()\n  };\n  var producer = producers[tapVersion];\n\n  if (!producer) {\n    throw new Error(\n      'invalid or unsupported TAP version: ' + JSON.stringify(tapVersion)\n    );\n  }\n\n  return producer;\n}\n\n/**\n * @summary\n * Constructs a new TAPProducer.\n *\n * @description\n * <em>Only</em> to be used as an abstract base class.\n *\n * @private\n * @constructor\n */\nfunction TAPProducer() {}\n\n/**\n * Writes the TAP version to reporter output stream.\n *\n * @abstract\n */\nTAPProducer.prototype.writeVersion = function () {};\n\n/**\n * Writes the plan to reporter output stream.\n *\n * @abstract\n * @param {number} ntests - Number of tests that are planned to run.\n */\nTAPProducer.prototype.writePlan = function (ntests) {\n  println('%d..%d', 1, ntests);\n};\n\n/**\n * Writes that test passed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that passed.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePass = function (n, test) {\n  println('ok %d %s', n, title(test));\n};\n\n/**\n * Writes that test was skipped to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that was skipped.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePending = function (n, test) {\n  println('ok %d %s # SKIP -', n, title(test));\n};\n\n/**\n * Writes that test failed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that failed.\n * @param {Test} test - Instance containing test information.\n * @param {Error} err - Reason the test failed.\n */\nTAPProducer.prototype.writeFail = function (n, test, err) {\n  println('not ok %d %s', n, title(test));\n};\n\n/**\n * Writes the summary epilogue to reporter output stream.\n *\n * @abstract\n * @param {Object} stats - Object containing run statistics.\n */\nTAPProducer.prototype.writeEpilogue = function (stats) {\n  // :TBD: Why is this not counting pending tests?\n  println('# tests ' + (stats.passes + stats.failures));\n  println('# pass ' + stats.passes);\n  // :TBD: Why are we not showing pending results?\n  println('# fail ' + stats.failures);\n  this.writePlan(stats.passes + stats.failures + stats.pending);\n};\n\n/**\n * @summary\n * Constructs a new TAP12Producer.\n *\n * @description\n * Produces output conforming to the TAP12 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-specification.html|Specification}\n */\nfunction TAP12Producer() {\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    if (err.message) {\n      println(err.message.replace(/^/gm, '  '));\n    }\n    if (err.stack) {\n      println(err.stack.replace(/^/gm, '  '));\n    }\n  };\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP12Producer, TAPProducer);\n\n/**\n * @summary\n * Constructs a new TAP13Producer.\n *\n * @description\n * Produces output conforming to the TAP13 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-version-13-specification.html|Specification}\n */\nfunction TAP13Producer() {\n  /**\n   * Writes the TAP version to reporter output stream.\n   * @override\n   */\n  this.writeVersion = function () {\n    println('TAP version 13');\n  };\n\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    var emitYamlBlock = err.message != null || err.stack != null;\n    if (emitYamlBlock) {\n      println(indent(1) + '---');\n      if (err.message) {\n        println(indent(2) + 'message: |-');\n        println(err.message.replace(/^/gm, indent(3)));\n      }\n      if (err.stack) {\n        println(indent(2) + 'stack: |-');\n        println(err.stack.replace(/^/gm, indent(3)));\n      }\n      println(indent(1) + '...');\n    }\n  };\n\n  function indent(level) {\n    return Array(level + 1).join('  ');\n  }\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP13Producer, TAPProducer);\n\nTAP.description = 'TAP-compatible output';\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}