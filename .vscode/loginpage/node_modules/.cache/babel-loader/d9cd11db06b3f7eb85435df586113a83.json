{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nexport var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' + // whitespace\n'([0-9a-f]{32})?' + // trace_id\n'-?([0-9a-f]{16})?' + // span_id\n'-?([01])?' + // sampled\n'[ \\\\t]*$');\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\n\nexport function hasTracingEnabled(options) {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\n\nexport function extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (matches) {\n    var parentSampled = void 0;\n\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n\n  return undefined;\n}\n/** Grabs active transaction off scope, if any */\n\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n\n  var _a, _b;\n\n  return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0 ? void 0 : _b.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\n\nexport function msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\n\nexport function secToMs(time) {\n  return time * 1000;\n} // so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\n\nexport { stripUrlQueryAndFragment } from '@sentry/utils';","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAmC,aAAnC;AAGA,OAAO,IAAMC,kBAAkB,GAAG,IAAIC,MAAJ,CAChC,aAAa;AACb,iBADA,GACoB;AACpB,mBAFA,GAEsB;AACtB,WAHA,GAGc;AACZ,UAL8B,CAA3B;AAQP;;;;;;AAKA,OAAM,SAAUC,iBAAV,CAA4BC,OAA5B,EAA4C;EAChD,OAAO,sBAAsBA,OAAtB,IAAiC,mBAAmBA,OAA3D;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUC,sBAAV,CAAiCC,WAAjC,EAAoD;EACxD,IAAMC,OAAO,GAAGD,WAAW,CAACE,KAAZ,CAAkBP,kBAAlB,CAAhB;;EACA,IAAIM,OAAJ,EAAa;IACX,IAAIE,aAAa,SAAjB;;IACA,IAAIF,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;MACtBE,aAAa,GAAG,IAAhB;IACD,CAFD,MAEO,IAAIF,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;MAC7BE,aAAa,GAAG,KAAhB;IACD;;IACD,OAAO;MACLC,OAAO,EAAEH,OAAO,CAAC,CAAD,CADX;MAELE,aAAa,eAFR;MAGLE,YAAY,EAAEJ,OAAO,CAAC,CAAD;IAHhB,CAAP;EAKD;;EACD,OAAOK,SAAP;AACD;AAED;;AACA,OAAM,SAAUC,oBAAV,CAAsDC,GAAtD,EAAgF;EAA1B;IAAAA,MAAWd,aAAa,EAAxB;EAA0B;;;;EACpF,OAAO,qBAAG,IAAH,IAAGe,aAAH,GAAG,MAAH,GAAGA,GAAEC,QAAF,EAAH,MAAa,IAAb,IAAaC,aAAb,GAAa,MAAb,GAAaA,GAAIC,cAAJ,EAApB;AACD;AAED;;;;;AAIA,OAAM,SAAUC,OAAV,CAAkBC,IAAlB,EAA8B;EAClC,OAAOA,IAAI,GAAG,IAAd;AACD;AAED;;;;;AAIA,OAAM,SAAUC,OAAV,CAAkBD,IAAlB,EAA8B;EAClC,OAAOA,IAAI,GAAG,IAAd;AACD,C,CAED;;AACA,SAASE,wBAAT,QAAyC,eAAzC","names":["getCurrentHub","TRACEPARENT_REGEXP","RegExp","hasTracingEnabled","options","extractTraceparentData","traceparent","matches","match","parentSampled","traceId","parentSpanId","undefined","getActiveTransaction","hub","_a","getScope","_b","getTransaction","msToSec","time","secToMs","stripUrlQueryAndFragment"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\utils.ts"],"sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(options: Options): boolean {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  return hub?.getScope()?.getTransaction() as T | undefined;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n"]},"metadata":{},"sourceType":"module"}