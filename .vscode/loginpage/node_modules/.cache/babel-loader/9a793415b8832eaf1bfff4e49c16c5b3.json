{"ast":null,"code":"var _fs;\n\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\n\nfunction readFile(file, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  options = options || {};\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err);\n    data = stripBom(data);\n    var obj;\n\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null);\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = file + ': ' + err2.message;\n        return callback(err2);\n      } else {\n        return callback(null, null);\n      }\n    }\n\n    callback(null, obj);\n  });\n}\n\nfunction readFileSync(file, options) {\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n\n  try {\n    var content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = file + ': ' + err.message;\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction stringify(obj, options) {\n  var spaces;\n  var EOL = '\\n';\n\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces;\n    }\n\n    if (options.EOL) {\n      EOL = options.EOL;\n    }\n  }\n\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces);\n  return str.replace(/\\n/g, EOL) + EOL;\n}\n\nfunction writeFile(file, obj, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = '';\n\n  try {\n    str = stringify(obj, options);\n  } catch (err) {\n    // Need to return whether a callback was passed or not\n    if (callback) callback(err, null);\n    return;\n  }\n\n  fs.writeFile(file, str, options, callback);\n}\n\nfunction writeFileSync(file, obj, options) {\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case\n\n  return fs.writeFileSync(file, str, options);\n}\n\nfunction stripBom(content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8');\n  content = content.replace(/^\\uFEFF/, '');\n  return content;\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;","map":{"version":3,"names":["_fs","require","_","readFile","file","options","callback","encoding","fs","shouldThrow","throws","err","data","stripBom","obj","JSON","parse","reviver","err2","message","readFileSync","content","stringify","spaces","EOL","str","replacer","replace","writeFile","writeFileSync","Buffer","isBuffer","toString","jsonfile","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/hardhat/node_modules/jsonfile/index.js"],"sourcesContent":["var _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\n\nfunction readFile (file, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err)\n\n    data = stripBom(data)\n\n    var obj\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null)\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = file + ': ' + err2.message\n        return callback(err2)\n      } else {\n        return callback(null, null)\n      }\n    }\n\n    callback(null, obj)\n  })\n}\n\nfunction readFileSync (file, options) {\n  options = options || {}\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  try {\n    var content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = file + ': ' + err.message\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nfunction stringify (obj, options) {\n  var spaces\n  var EOL = '\\n'\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces\n    }\n    if (options.EOL) {\n      EOL = options.EOL\n    }\n  }\n\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOL\n}\n\nfunction writeFile (file, obj, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = ''\n  try {\n    str = stringify(obj, options)\n  } catch (err) {\n    // Need to return whether a callback was passed or not\n    if (callback) callback(err, null)\n    return\n  }\n\n  fs.writeFile(file, str, options, callback)\n}\n\nfunction writeFileSync (file, obj, options) {\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  content = content.replace(/^\\uFEFF/, '')\n  return content\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n}\n\nmodule.exports = jsonfile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}