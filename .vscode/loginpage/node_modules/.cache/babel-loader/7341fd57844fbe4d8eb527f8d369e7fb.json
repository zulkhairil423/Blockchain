{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nconst bytes_1 = require(\"./bytes\");\n\nconst constants_1 = require(\"./constants\");\n\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\n\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  const {\n    signature,\n    recid: recovery\n  } = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey);\n  const r = Buffer.from(signature.slice(0, 32));\n  const s = Buffer.from(signature.slice(32, 64));\n  const v = chainId === undefined ? BigInt(recovery + 27) : BigInt(recovery + 35) + BigInt(chainId) * BigInt(2);\n  return {\n    r,\n    s,\n    v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\n\n\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  const senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, Number(recovery), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\n\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\n\nconst toRpcSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\n\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\n\nconst toCompactSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  let ss = s;\n\n  if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\n\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\n\nconst fromRpcSig = function (sig) {\n  const buf = (0, bytes_1.toBuffer)(sig);\n  let r;\n  let s;\n  let v;\n\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  } // support both versions of `eth_sign` responses\n\n\n  if (v < 27) {\n    v = v + BigInt(27);\n  }\n\n  return {\n    v,\n    r,\n    s\n  };\n};\n\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\nconst isValidSignature = function (v, r, s) {\n  let homesteadOrLater = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let chainId = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n  const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n\n  if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\nconst hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n  return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\n\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"mappings":"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","names":["ecsign","msgHash","privateKey","chainId","signature","recid","recovery","r","Buffer","from","slice","s","v","undefined","BigInt","exports","calculateSigRecovery","isValidSigRecovery","ecrecover","concat","Error","senderPubKey","Number","toRpcSig","toCompactSig","ss","fromRpcSig","sig","buf","length","isValidSignature","homesteadOrLater","rBigInt","sBigInt","constants_1","hashPersonalMessage","message","prefix"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@nomicfoundation\\ethereumjs-util\\src\\signature.ts"],"sourcesContent":["import { keccak256 } from 'ethereum-cryptography/keccak'\nimport { ecdsaRecover, ecdsaSign, publicKeyConvert } from 'ethereum-cryptography/secp256k1'\n\nimport { bufferToBigInt, bufferToHex, bufferToInt, setLengthLeft, toBuffer } from './bytes'\nimport { SECP256K1_ORDER, SECP256K1_ORDER_DIV_2 } from './constants'\nimport { assertIsBuffer } from './helpers'\n\nexport interface ECDSASignature {\n  v: bigint\n  r: Buffer\n  s: Buffer\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId?: bigint): ECDSASignature {\n  const { signature, recid: recovery } = ecdsaSign(msgHash, privateKey)\n\n  const r = Buffer.from(signature.slice(0, 32))\n  const s = Buffer.from(signature.slice(32, 64))\n\n  const v =\n    chainId === undefined\n      ? BigInt(recovery + 27)\n      : BigInt(recovery + 35) + BigInt(chainId) * BigInt(2)\n\n  return { r, s, v }\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n  if (v === BigInt(0) || v === BigInt(1)) return v\n\n  if (chainId === undefined) {\n    return v - BigInt(27)\n  }\n  return v - (chainId * BigInt(2) + BigInt(35))\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n  return recovery === BigInt(0) || recovery === BigInt(1)\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  chainId?: bigint\n): Buffer {\n  const signature = Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32)], 64)\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const senderPubKey = ecdsaRecover(signature, Number(recovery), msgHash)\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1))\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32), toBuffer(v)]))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  let ss = s\n  if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s)\n    ss[0] |= 0x80\n  }\n\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(ss, 32)]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const buf: Buffer = toBuffer(sig)\n\n  let r: Buffer\n  let s: Buffer\n  let v: bigint\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToBigInt(buf.slice(64))\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = BigInt(bufferToInt(buf.slice(32, 33)) >> 7)\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27)\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  homesteadOrLater: boolean = true,\n  chainId?: bigint\n): boolean {\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBigInt = bufferToBigInt(r)\n  const sBigInt = bufferToBigInt(s)\n\n  if (\n    rBigInt === BigInt(0) ||\n    rBigInt >= SECP256K1_ORDER ||\n    sBigInt === BigInt(0) ||\n    sBigInt >= SECP256K1_ORDER\n  ) {\n    return false\n  }\n\n  if (homesteadOrLater && sBigInt >= SECP256K1_ORDER_DIV_2) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Buffer): Buffer {\n  assertIsBuffer(message)\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8')\n  return Buffer.from(keccak256(Buffer.concat([prefix, message])))\n}\n"]},"metadata":{},"sourceType":"script"}