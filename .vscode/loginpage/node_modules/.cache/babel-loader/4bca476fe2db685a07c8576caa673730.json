{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst os = require('os');\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {\n  env\n} = process;\n\nconst macos = name => {\n  const library = path.join(homedir, 'Library');\n  return {\n    data: path.join(library, 'Application Support', name),\n    config: path.join(library, 'Preferences', name),\n    cache: path.join(library, 'Caches', name),\n    log: path.join(library, 'Logs', name),\n    temp: path.join(tmpdir, name)\n  };\n};\n\nconst windows = name => {\n  const appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n  const localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n  return {\n    // Data/config/cache/log are invented by me as Windows isn't opinionated about this\n    data: path.join(localAppData, name, 'Data'),\n    config: path.join(appData, name, 'Config'),\n    cache: path.join(localAppData, name, 'Cache'),\n    log: path.join(localAppData, name, 'Log'),\n    temp: path.join(tmpdir, name)\n  };\n}; // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n\nconst linux = name => {\n  const username = path.basename(homedir);\n  return {\n    data: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n    config: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n    cache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n    // https://wiki.debian.org/XDGBaseDirectorySpecification#state\n    log: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n    temp: path.join(tmpdir, username, name)\n  };\n};\n\nconst envPaths = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError(`Expected string, got ${typeof name}`);\n  }\n\n  options = Object.assign({\n    suffix: 'nodejs'\n  }, options);\n\n  if (options.suffix) {\n    // Add suffix to prevent possible conflict with native apps\n    name += `-${options.suffix}`;\n  }\n\n  if (process.platform === 'darwin') {\n    return macos(name);\n  }\n\n  if (process.platform === 'win32') {\n    return windows(name);\n  }\n\n  return linux(name);\n};\n\nmodule.exports = envPaths; // TODO: Remove this for the next major release\n\nmodule.exports.default = envPaths;","map":{"version":3,"names":["path","require","os","homedir","tmpdir","env","process","macos","name","library","join","data","config","cache","log","temp","windows","appData","APPDATA","localAppData","LOCALAPPDATA","linux","username","basename","XDG_DATA_HOME","XDG_CONFIG_HOME","XDG_CACHE_HOME","XDG_STATE_HOME","envPaths","options","TypeError","Object","assign","suffix","platform","module","exports","default"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/env-paths/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst os = require('os');\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {env} = process;\n\nconst macos = name => {\n\tconst library = path.join(homedir, 'Library');\n\n\treturn {\n\t\tdata: path.join(library, 'Application Support', name),\n\t\tconfig: path.join(library, 'Preferences', name),\n\t\tcache: path.join(library, 'Caches', name),\n\t\tlog: path.join(library, 'Logs', name),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\nconst windows = name => {\n\tconst appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n\tconst localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n\n\treturn {\n\t\t// Data/config/cache/log are invented by me as Windows isn't opinionated about this\n\t\tdata: path.join(localAppData, name, 'Data'),\n\t\tconfig: path.join(appData, name, 'Config'),\n\t\tcache: path.join(localAppData, name, 'Cache'),\n\t\tlog: path.join(localAppData, name, 'Log'),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\n// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nconst linux = name => {\n\tconst username = path.basename(homedir);\n\n\treturn {\n\t\tdata: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n\t\tconfig: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n\t\tcache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n\t\t// https://wiki.debian.org/XDGBaseDirectorySpecification#state\n\t\tlog: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n\t\ttemp: path.join(tmpdir, username, name)\n\t};\n};\n\nconst envPaths = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError(`Expected string, got ${typeof name}`);\n\t}\n\n\toptions = Object.assign({suffix: 'nodejs'}, options);\n\n\tif (options.suffix) {\n\t\t// Add suffix to prevent possible conflict with native apps\n\t\tname += `-${options.suffix}`;\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\treturn macos(name);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn windows(name);\n\t}\n\n\treturn linux(name);\n};\n\nmodule.exports = envPaths;\n// TODO: Remove this for the next major release\nmodule.exports.default = envPaths;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}