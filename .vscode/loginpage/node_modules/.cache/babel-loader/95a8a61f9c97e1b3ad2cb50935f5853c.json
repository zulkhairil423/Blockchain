{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport * as util from 'util';\n/** Console module integration */\n\nvar Console =\n/** @class */\nfunction () {\n  function Console() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Console.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Console.prototype.setupOnce = function () {\n    var e_1, _a;\n\n    var consoleModule = require('console');\n\n    try {\n      for (var _b = __values(['debug', 'info', 'warn', 'error', 'log']), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var level = _c.value;\n        fill(consoleModule, level, createConsoleWrapper(level));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Console.id = 'Console';\n  return Console;\n}();\n\nexport { Console };\n/**\n * Wrapper function that'll be used for every console level\n */\n\nfunction createConsoleWrapper(level) {\n  return function consoleWrapper(originalConsoleMethod) {\n    var sentryLevel;\n\n    switch (level) {\n      case 'debug':\n        sentryLevel = Severity.Debug;\n        break;\n\n      case 'error':\n        sentryLevel = Severity.Error;\n        break;\n\n      case 'info':\n        sentryLevel = Severity.Info;\n        break;\n\n      case 'warn':\n        sentryLevel = Severity.Warning;\n        break;\n\n      default:\n        sentryLevel = Severity.Log;\n    }\n\n    return function () {\n      if (getCurrentHub().getIntegration(Console)) {\n        getCurrentHub().addBreadcrumb({\n          category: 'console',\n          level: sentryLevel,\n          message: util.format.apply(undefined, arguments)\n        }, {\n          input: __spread(arguments),\n          level: level\n        });\n      }\n\n      originalConsoleMethod.apply(this, arguments);\n    };\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAAsBC,QAAtB,QAAsC,eAAtC;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAEA;;AACA;AAAA;AAAA;EAAA;IAME;;;IAGO,YAAeC,OAAO,CAACC,EAAvB;EAWR;EATC;;;;;EAGOD,8BAAP;;;IACE,IAAME,aAAa,GAAGC,OAAO,CAAC,SAAD,CAA7B;;;MACA,KAAoB,mBAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,KAAnC,IAAyCC,cAA7D,EAA6D,QAA7D,EAA6DA,cAA7D,EAA+D;QAA1D,IAAMC,KAAK,WAAX;QACHP,IAAI,CAACI,aAAD,EAAgBG,KAAhB,EAAuBC,oBAAoB,CAACD,KAAD,CAA3C,CAAJ;MACD;;;;;;;;;;;;EACF,CALM;EAbP;;;;;EAGcL,aAAa,SAAb;EAgBhB;AAAC,CApBD;;SAAaA;AAsBb;;;;AAGA,SAASM,oBAAT,CAA8BD,KAA9B,EAA2C;EACzC,OAAO,SAASE,cAAT,CAAwBC,qBAAxB,EAAyD;IAC9D,IAAIC,WAAJ;;IAEA,QAAQJ,KAAR;MACE,KAAK,OAAL;QACEI,WAAW,GAAGZ,QAAQ,CAACa,KAAvB;QACA;;MACF,KAAK,OAAL;QACED,WAAW,GAAGZ,QAAQ,CAACc,KAAvB;QACA;;MACF,KAAK,MAAL;QACEF,WAAW,GAAGZ,QAAQ,CAACe,IAAvB;QACA;;MACF,KAAK,MAAL;QACEH,WAAW,GAAGZ,QAAQ,CAACgB,OAAvB;QACA;;MACF;QACEJ,WAAW,GAAGZ,QAAQ,CAACiB,GAAvB;IAdJ;;IAiBA,OAAO;MACL,IAAIlB,aAAa,GAAGmB,cAAhB,CAA+Bf,OAA/B,CAAJ,EAA6C;QAC3CJ,aAAa,GAAGoB,aAAhB,CACE;UACEC,QAAQ,EAAE,SADZ;UAEEZ,KAAK,EAAEI,WAFT;UAGES,OAAO,EAAEnB,IAAI,CAACoB,MAAL,CAAYC,KAAZ,CAAkBC,SAAlB,EAA6BC,SAA7B;QAHX,CADF,EAME;UACEC,KAAK,WAAMD,SAAN,CADP;UAEEjB,KAAK;QAFP,CANF;MAWD;;MAEDG,qBAAqB,CAACY,KAAtB,CAA4B,IAA5B,EAAkCE,SAAlC;IACD,CAhBD;EAiBD,CArCD;AAsCD","names":["getCurrentHub","Severity","fill","util","Console","id","consoleModule","require","_c","level","createConsoleWrapper","consoleWrapper","originalConsoleMethod","sentryLevel","Debug","Error","Info","Warning","Log","getIntegration","addBreadcrumb","category","message","format","apply","undefined","arguments","input"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\integrations\\console.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, Severity } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport * as util from 'util';\n\n/** Console module integration */\nexport class Console implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Console';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Console.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const consoleModule = require('console');\n    for (const level of ['debug', 'info', 'warn', 'error', 'log']) {\n      fill(consoleModule, level, createConsoleWrapper(level));\n    }\n  }\n}\n\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction createConsoleWrapper(level: string): (originalConsoleMethod: () => void) => void {\n  return function consoleWrapper(originalConsoleMethod: () => void): () => void {\n    let sentryLevel: Severity;\n\n    switch (level) {\n      case 'debug':\n        sentryLevel = Severity.Debug;\n        break;\n      case 'error':\n        sentryLevel = Severity.Error;\n        break;\n      case 'info':\n        sentryLevel = Severity.Info;\n        break;\n      case 'warn':\n        sentryLevel = Severity.Warning;\n        break;\n      default:\n        sentryLevel = Severity.Log;\n    }\n\n    return function(this: typeof console): void {\n      if (getCurrentHub().getIntegration(Console)) {\n        getCurrentHub().addBreadcrumb(\n          {\n            category: 'console',\n            level: sentryLevel,\n            message: util.format.apply(undefined, arguments),\n          },\n          {\n            input: [...arguments],\n            level,\n          },\n        );\n      }\n\n      originalConsoleMethod.apply(this, arguments);\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}