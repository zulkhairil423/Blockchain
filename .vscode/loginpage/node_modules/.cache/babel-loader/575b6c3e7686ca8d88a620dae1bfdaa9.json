{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyProviderWrappers = exports.createProvider = exports.isHDAccountsConfig = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst date_1 = require(\"../../util/date\");\n\nconst util_1 = require(\"./util\");\n\nfunction isHDAccountsConfig(accounts) {\n  return accounts !== undefined && Object.keys(accounts).includes(\"mnemonic\");\n}\n\nexports.isHDAccountsConfig = isHDAccountsConfig;\n\nfunction isResolvedHttpNetworkConfig(netConfig) {\n  return \"url\" in netConfig;\n} // This function is let's you import a provider dynamically in a pretty\n// type-safe way.\n// `ProviderNameT` and `name` must be the same literal string. TS enforces it.\n// `ModuleT` and `filePath` must also be the same, but this is not enforced.\n\n\nfunction importProvider(filePath, name) {\n  const mod = require(filePath);\n\n  return mod[name];\n}\n\nfunction createProvider(networkName, networkConfig, paths, artifacts) {\n  let experimentalHardhatNetworkMessageTraceHooks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let eip1193Provider;\n\n  if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n    const hardhatNetConfig = networkConfig;\n    const HardhatNetworkProvider = importProvider(\"../../hardhat-network/provider/provider\", \"HardhatNetworkProvider\");\n    let forkConfig;\n\n    if (hardhatNetConfig.forking?.enabled === true && hardhatNetConfig.forking?.url !== undefined) {\n      forkConfig = {\n        jsonRpcUrl: hardhatNetConfig.forking?.url,\n        blockNumber: hardhatNetConfig.forking?.blockNumber,\n        httpHeaders: hardhatNetConfig.forking.httpHeaders\n      };\n    }\n\n    const accounts = (0, util_1.normalizeHardhatNetworkAccountsConfig)(hardhatNetConfig.accounts);\n\n    const {\n      ModulesLogger\n    } = require(\"../../hardhat-network/provider/modules/logger\");\n\n    const {\n      getForkCacheDirPath\n    } = require(\"../../hardhat-network/provider/utils/disk-cache\");\n\n    eip1193Provider = new HardhatNetworkProvider(hardhatNetConfig.hardfork, constants_1.HARDHAT_NETWORK_NAME, hardhatNetConfig.chainId, hardhatNetConfig.chainId, hardhatNetConfig.blockGasLimit, hardhatNetConfig.initialBaseFeePerGas, hardhatNetConfig.minGasPrice, hardhatNetConfig.throwOnTransactionFailures, hardhatNetConfig.throwOnCallFailures, hardhatNetConfig.mining.auto, hardhatNetConfig.mining.interval, // This cast is valid because of the config validation and resolution\n    hardhatNetConfig.mining.mempool.order, hardhatNetConfig.chains, new ModulesLogger(hardhatNetConfig.loggingEnabled), accounts, artifacts, hardhatNetConfig.allowUnlimitedContractSize, hardhatNetConfig.initialDate !== undefined ? (0, date_1.parseDateString)(hardhatNetConfig.initialDate) : undefined, experimentalHardhatNetworkMessageTraceHooks, forkConfig, paths !== undefined ? getForkCacheDirPath(paths) : undefined, hardhatNetConfig.coinbase);\n  } else {\n    const HttpProvider = importProvider(\"./http\", \"HttpProvider\");\n    const httpNetConfig = networkConfig;\n    eip1193Provider = new HttpProvider(httpNetConfig.url, networkName, httpNetConfig.httpHeaders, httpNetConfig.timeout);\n  }\n\n  const wrappedProvider = applyProviderWrappers(eip1193Provider, networkConfig);\n  const BackwardsCompatibilityProviderAdapter = importProvider(\"./backwards-compatibility\", \"BackwardsCompatibilityProviderAdapter\");\n  return new BackwardsCompatibilityProviderAdapter(wrappedProvider);\n}\n\nexports.createProvider = createProvider;\n\nfunction applyProviderWrappers(provider, netConfig) {\n  // These dependencies are lazy-loaded because they are really big.\n  const LocalAccountsProvider = importProvider(\"./accounts\", \"LocalAccountsProvider\");\n  const HDWalletProvider = importProvider(\"./accounts\", \"HDWalletProvider\");\n  const FixedSenderProvider = importProvider(\"./accounts\", \"FixedSenderProvider\");\n  const AutomaticSenderProvider = importProvider(\"./accounts\", \"AutomaticSenderProvider\");\n  const AutomaticGasProvider = importProvider(\"./gas-providers\", \"AutomaticGasProvider\");\n  const FixedGasProvider = importProvider(\"./gas-providers\", \"FixedGasProvider\");\n  const AutomaticGasPriceProvider = importProvider(\"./gas-providers\", \"AutomaticGasPriceProvider\");\n  const FixedGasPriceProvider = importProvider(\"./gas-providers\", \"FixedGasPriceProvider\");\n  const ChainIdValidatorProvider = importProvider(\"./chainId\", \"ChainIdValidatorProvider\");\n\n  if (isResolvedHttpNetworkConfig(netConfig)) {\n    const accounts = netConfig.accounts;\n\n    if (Array.isArray(accounts)) {\n      provider = new LocalAccountsProvider(provider, accounts);\n    } else if (isHDAccountsConfig(accounts)) {\n      provider = new HDWalletProvider(provider, accounts.mnemonic, accounts.path, accounts.initialIndex, accounts.count, accounts.passphrase);\n    } // TODO: Add some extension mechanism for account plugins here\n\n  }\n\n  if (netConfig.from !== undefined) {\n    provider = new FixedSenderProvider(provider, netConfig.from);\n  } else {\n    provider = new AutomaticSenderProvider(provider);\n  }\n\n  if (netConfig.gas === undefined || netConfig.gas === \"auto\") {\n    provider = new AutomaticGasProvider(provider, netConfig.gasMultiplier);\n  } else {\n    provider = new FixedGasProvider(provider, netConfig.gas);\n  }\n\n  if (netConfig.gasPrice === undefined || netConfig.gasPrice === \"auto\") {\n    // If you use a LocalAccountsProvider or HDWalletProvider, your transactions\n    // are signed locally. This requires having all of their fields available,\n    // including the gasPrice / maxFeePerGas & maxPriorityFeePerGas.\n    //\n    // We never use those providers when using Hardhat Network, but sign within\n    // Hardhat Network itself. This means that we don't need to provide all the\n    // fields, as the missing ones will be resolved there.\n    //\n    // Hardhat Network handles this in a more performant way, so we don't use\n    // the AutomaticGasPriceProvider for it.\n    if (isResolvedHttpNetworkConfig(netConfig)) {\n      provider = new AutomaticGasPriceProvider(provider);\n    }\n  } else {\n    provider = new FixedGasPriceProvider(provider, netConfig.gasPrice);\n  }\n\n  if (isResolvedHttpNetworkConfig(netConfig) && netConfig.chainId !== undefined) {\n    provider = new ChainIdValidatorProvider(provider, netConfig.chainId);\n  }\n\n  return provider;\n}\n\nexports.applyProviderWrappers = applyProviderWrappers;","map":{"version":3,"mappings":"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","names":["isHDAccountsConfig","accounts","undefined","Object","keys","includes","exports","isResolvedHttpNetworkConfig","netConfig","importProvider","filePath","name","mod","require","createProvider","networkName","networkConfig","paths","artifacts","experimentalHardhatNetworkMessageTraceHooks","eip1193Provider","constants_1","hardhatNetConfig","HardhatNetworkProvider","forkConfig","forking","enabled","url","jsonRpcUrl","blockNumber","httpHeaders","ModulesLogger","getForkCacheDirPath","hardfork","chainId","blockGasLimit","initialBaseFeePerGas","minGasPrice","throwOnTransactionFailures","throwOnCallFailures","mining","auto","interval","mempool","order","chains","loggingEnabled","allowUnlimitedContractSize","initialDate","coinbase","HttpProvider","httpNetConfig","timeout","wrappedProvider","applyProviderWrappers","BackwardsCompatibilityProviderAdapter","provider","LocalAccountsProvider","HDWalletProvider","FixedSenderProvider","AutomaticSenderProvider","AutomaticGasProvider","FixedGasProvider","AutomaticGasPriceProvider","FixedGasPriceProvider","ChainIdValidatorProvider","Array","isArray","mnemonic","path","initialIndex","count","passphrase","from","gas","gasMultiplier","gasPrice"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\core\\providers\\construction.ts"],"sourcesContent":["import type {\n  Artifacts,\n  BoundExperimentalHardhatNetworkMessageTraceHook,\n  EIP1193Provider,\n  EthereumProvider,\n  HardhatNetworkConfig,\n  HDAccountsUserConfig,\n  HttpNetworkAccountsUserConfig,\n  HttpNetworkConfig,\n  NetworkConfig,\n  ProjectPathsConfig,\n} from \"../../../types\";\n\nimport type {\n  ForkConfig,\n  MempoolOrder,\n} from \"../../hardhat-network/provider/node-types\";\nimport type * as ModulesLoggerT from \"../../hardhat-network/provider/modules/logger\";\nimport type * as DiskCacheT from \"../../hardhat-network/provider/utils/disk-cache\";\nimport { HARDHAT_NETWORK_NAME } from \"../../constants\";\nimport { parseDateString } from \"../../util/date\";\n\nimport { normalizeHardhatNetworkAccountsConfig } from \"./util\";\n\nexport function isHDAccountsConfig(\n  accounts?: HttpNetworkAccountsUserConfig\n): accounts is HDAccountsUserConfig {\n  return accounts !== undefined && Object.keys(accounts).includes(\"mnemonic\");\n}\n\nfunction isResolvedHttpNetworkConfig(\n  netConfig: Partial<NetworkConfig>\n): netConfig is HttpNetworkConfig {\n  return \"url\" in netConfig;\n}\n\n// This function is let's you import a provider dynamically in a pretty\n// type-safe way.\n// `ProviderNameT` and `name` must be the same literal string. TS enforces it.\n// `ModuleT` and `filePath` must also be the same, but this is not enforced.\nfunction importProvider<ModuleT, ProviderNameT extends keyof ModuleT>(\n  filePath: string,\n  name: ProviderNameT\n): ModuleT[ProviderNameT] {\n  const mod = require(filePath);\n  return mod[name];\n}\n\nexport function createProvider(\n  networkName: string,\n  networkConfig: NetworkConfig,\n  paths?: ProjectPathsConfig,\n  artifacts?: Artifacts,\n  experimentalHardhatNetworkMessageTraceHooks: BoundExperimentalHardhatNetworkMessageTraceHook[] = []\n): EthereumProvider {\n  let eip1193Provider: EIP1193Provider;\n\n  if (networkName === HARDHAT_NETWORK_NAME) {\n    const hardhatNetConfig = networkConfig as HardhatNetworkConfig;\n\n    const HardhatNetworkProvider = importProvider<\n      typeof import(\"../../hardhat-network/provider/provider\"),\n      \"HardhatNetworkProvider\"\n    >(\"../../hardhat-network/provider/provider\", \"HardhatNetworkProvider\");\n\n    let forkConfig: ForkConfig | undefined;\n\n    if (\n      hardhatNetConfig.forking?.enabled === true &&\n      hardhatNetConfig.forking?.url !== undefined\n    ) {\n      forkConfig = {\n        jsonRpcUrl: hardhatNetConfig.forking?.url,\n        blockNumber: hardhatNetConfig.forking?.blockNumber,\n        httpHeaders: hardhatNetConfig.forking.httpHeaders,\n      };\n    }\n\n    const accounts = normalizeHardhatNetworkAccountsConfig(\n      hardhatNetConfig.accounts\n    );\n\n    const { ModulesLogger } =\n      require(\"../../hardhat-network/provider/modules/logger\") as typeof ModulesLoggerT;\n    const { getForkCacheDirPath } =\n      require(\"../../hardhat-network/provider/utils/disk-cache\") as typeof DiskCacheT;\n\n    eip1193Provider = new HardhatNetworkProvider(\n      hardhatNetConfig.hardfork,\n      HARDHAT_NETWORK_NAME,\n      hardhatNetConfig.chainId,\n      hardhatNetConfig.chainId,\n      hardhatNetConfig.blockGasLimit,\n      hardhatNetConfig.initialBaseFeePerGas,\n      hardhatNetConfig.minGasPrice,\n      hardhatNetConfig.throwOnTransactionFailures,\n      hardhatNetConfig.throwOnCallFailures,\n      hardhatNetConfig.mining.auto,\n      hardhatNetConfig.mining.interval,\n      // This cast is valid because of the config validation and resolution\n      hardhatNetConfig.mining.mempool.order as MempoolOrder,\n      hardhatNetConfig.chains,\n      new ModulesLogger(hardhatNetConfig.loggingEnabled),\n      accounts,\n      artifacts,\n      hardhatNetConfig.allowUnlimitedContractSize,\n      hardhatNetConfig.initialDate !== undefined\n        ? parseDateString(hardhatNetConfig.initialDate)\n        : undefined,\n      experimentalHardhatNetworkMessageTraceHooks,\n      forkConfig,\n      paths !== undefined ? getForkCacheDirPath(paths) : undefined,\n      hardhatNetConfig.coinbase\n    );\n  } else {\n    const HttpProvider = importProvider<\n      typeof import(\"./http\"),\n      \"HttpProvider\"\n    >(\"./http\", \"HttpProvider\");\n    const httpNetConfig = networkConfig as HttpNetworkConfig;\n\n    eip1193Provider = new HttpProvider(\n      httpNetConfig.url!,\n      networkName,\n      httpNetConfig.httpHeaders,\n      httpNetConfig.timeout\n    );\n  }\n\n  const wrappedProvider = applyProviderWrappers(eip1193Provider, networkConfig);\n\n  const BackwardsCompatibilityProviderAdapter = importProvider<\n    typeof import(\"./backwards-compatibility\"),\n    \"BackwardsCompatibilityProviderAdapter\"\n  >(\"./backwards-compatibility\", \"BackwardsCompatibilityProviderAdapter\");\n\n  return new BackwardsCompatibilityProviderAdapter(wrappedProvider);\n}\n\nexport function applyProviderWrappers(\n  provider: EIP1193Provider,\n  netConfig: Partial<NetworkConfig>\n): EIP1193Provider {\n  // These dependencies are lazy-loaded because they are really big.\n  const LocalAccountsProvider = importProvider<\n    typeof import(\"./accounts\"),\n    \"LocalAccountsProvider\"\n  >(\"./accounts\", \"LocalAccountsProvider\");\n  const HDWalletProvider = importProvider<\n    typeof import(\"./accounts\"),\n    \"HDWalletProvider\"\n  >(\"./accounts\", \"HDWalletProvider\");\n  const FixedSenderProvider = importProvider<\n    typeof import(\"./accounts\"),\n    \"FixedSenderProvider\"\n  >(\"./accounts\", \"FixedSenderProvider\");\n  const AutomaticSenderProvider = importProvider<\n    typeof import(\"./accounts\"),\n    \"AutomaticSenderProvider\"\n  >(\"./accounts\", \"AutomaticSenderProvider\");\n\n  const AutomaticGasProvider = importProvider<\n    typeof import(\"./gas-providers\"),\n    \"AutomaticGasProvider\"\n  >(\"./gas-providers\", \"AutomaticGasProvider\");\n  const FixedGasProvider = importProvider<\n    typeof import(\"./gas-providers\"),\n    \"FixedGasProvider\"\n  >(\"./gas-providers\", \"FixedGasProvider\");\n  const AutomaticGasPriceProvider = importProvider<\n    typeof import(\"./gas-providers\"),\n    \"AutomaticGasPriceProvider\"\n  >(\"./gas-providers\", \"AutomaticGasPriceProvider\");\n  const FixedGasPriceProvider = importProvider<\n    typeof import(\"./gas-providers\"),\n    \"FixedGasPriceProvider\"\n  >(\"./gas-providers\", \"FixedGasPriceProvider\");\n  const ChainIdValidatorProvider = importProvider<\n    typeof import(\"./chainId\"),\n    \"ChainIdValidatorProvider\"\n  >(\"./chainId\", \"ChainIdValidatorProvider\");\n\n  if (isResolvedHttpNetworkConfig(netConfig)) {\n    const accounts = netConfig.accounts;\n\n    if (Array.isArray(accounts)) {\n      provider = new LocalAccountsProvider(provider, accounts);\n    } else if (isHDAccountsConfig(accounts)) {\n      provider = new HDWalletProvider(\n        provider,\n        accounts.mnemonic,\n        accounts.path,\n        accounts.initialIndex,\n        accounts.count,\n        accounts.passphrase\n      );\n    }\n\n    // TODO: Add some extension mechanism for account plugins here\n  }\n\n  if (netConfig.from !== undefined) {\n    provider = new FixedSenderProvider(provider, netConfig.from);\n  } else {\n    provider = new AutomaticSenderProvider(provider);\n  }\n\n  if (netConfig.gas === undefined || netConfig.gas === \"auto\") {\n    provider = new AutomaticGasProvider(provider, netConfig.gasMultiplier);\n  } else {\n    provider = new FixedGasProvider(provider, netConfig.gas);\n  }\n\n  if (netConfig.gasPrice === undefined || netConfig.gasPrice === \"auto\") {\n    // If you use a LocalAccountsProvider or HDWalletProvider, your transactions\n    // are signed locally. This requires having all of their fields available,\n    // including the gasPrice / maxFeePerGas & maxPriorityFeePerGas.\n    //\n    // We never use those providers when using Hardhat Network, but sign within\n    // Hardhat Network itself. This means that we don't need to provide all the\n    // fields, as the missing ones will be resolved there.\n    //\n    // Hardhat Network handles this in a more performant way, so we don't use\n    // the AutomaticGasPriceProvider for it.\n    if (isResolvedHttpNetworkConfig(netConfig)) {\n      provider = new AutomaticGasPriceProvider(provider);\n    }\n  } else {\n    provider = new FixedGasPriceProvider(provider, netConfig.gasPrice);\n  }\n\n  if (\n    isResolvedHttpNetworkConfig(netConfig) &&\n    netConfig.chainId !== undefined\n  ) {\n    provider = new ChainIdValidatorProvider(provider, netConfig.chainId);\n  }\n\n  return provider;\n}\n"]},"metadata":{},"sourceType":"script"}