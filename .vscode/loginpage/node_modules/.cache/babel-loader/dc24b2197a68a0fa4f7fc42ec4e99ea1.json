{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRunningOnCiServer = void 0;\n\nconst ci_info_1 = __importDefault(require(\"ci-info\"));\n\nconst os_1 = __importDefault(require(\"os\")); // This has been tested in:\n//   - Travis CI\n//   - Circle CI\n//   - GitHub Actions\n//   - Azure Pipelines\n//\n// This should also work in this CI providers because they set process.env.CI:\n//   - AppVeyor\n//   - Bitbucket Pipelines\n//   - GitLab CI\n//\n// This should also work:\n//   - AWS CodeBuild -- Special case\n//   - Jenkins -- Using process.env.BUILD_NUMBER\n//   - ZEIT Now -- Special case\n\n\nfunction isRunningOnCiServer() {\n  return ci_info_1.default.isCI || isGithubActions() || isLinuxWithoutDisplayServer() || isNow() || isAwsCodeBuild();\n}\n\nexports.isRunningOnCiServer = isRunningOnCiServer;\n\nfunction isGithubActions() {\n  return process.env.GITHUB_ACTIONS !== undefined;\n}\n\nfunction isLinuxWithoutDisplayServer() {\n  if (os_1.default.type() !== \"Linux\") {\n    return false;\n  }\n\n  if (process.env.DISPLAY !== undefined) {\n    return false;\n  }\n\n  if (process.env.WAYLAND_DISPLAY !== undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isNow() {\n  return process.env.NOW !== undefined || process.env.DEPLOYMENT_ID !== undefined;\n}\n\nfunction isAwsCodeBuild() {\n  return process.env.CODEBUILD_BUILD_NUMBER !== undefined;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA,4C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAgBA,mBAAhB,GAAmC;EACjC,OACEC,kBAAGC,IAAH,IACAC,eAAe,EADf,IAEAC,2BAA2B,EAF3B,IAGAC,KAAK,EAHL,IAIAC,cAAc,EALhB;AAOD;;AARDC;;AAUA,SAASJ,eAAT,GAAwB;EACtB,OAAOK,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+BC,SAAtC;AACD;;AAED,SAASP,2BAAT,GAAoC;EAClC,IAAIQ,aAAGC,IAAH,OAAc,OAAlB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,IAAIL,OAAO,CAACC,GAAR,CAAYK,OAAZ,KAAwBH,SAA5B,EAAuC;IACrC,OAAO,KAAP;EACD;;EAED,IAAIH,OAAO,CAACC,GAAR,CAAYM,eAAZ,KAAgCJ,SAApC,EAA+C;IAC7C,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD;;AAED,SAASN,KAAT,GAAc;EACZ,OACEG,OAAO,CAACC,GAAR,CAAYO,GAAZ,KAAoBL,SAApB,IAAiCH,OAAO,CAACC,GAAR,CAAYQ,aAAZ,KAA8BN,SADjE;AAGD;;AAED,SAASL,cAAT,GAAuB;EACrB,OAAOE,OAAO,CAACC,GAAR,CAAYS,sBAAZ,KAAuCP,SAA9C;AACD","names":["isRunningOnCiServer","ci_info_1","isCI","isGithubActions","isLinuxWithoutDisplayServer","isNow","isAwsCodeBuild","exports","process","env","GITHUB_ACTIONS","undefined","os_1","type","DISPLAY","WAYLAND_DISPLAY","NOW","DEPLOYMENT_ID","CODEBUILD_BUILD_NUMBER"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\hardhat\\src\\internal\\util\\ci-detection.ts"],"sourcesContent":["import ci from \"ci-info\";\nimport os from \"os\";\n\n// This has been tested in:\n//   - Travis CI\n//   - Circle CI\n//   - GitHub Actions\n//   - Azure Pipelines\n//\n// This should also work in this CI providers because they set process.env.CI:\n//   - AppVeyor\n//   - Bitbucket Pipelines\n//   - GitLab CI\n//\n// This should also work:\n//   - AWS CodeBuild -- Special case\n//   - Jenkins -- Using process.env.BUILD_NUMBER\n//   - ZEIT Now -- Special case\nexport function isRunningOnCiServer(): boolean {\n  return (\n    ci.isCI ||\n    isGithubActions() ||\n    isLinuxWithoutDisplayServer() ||\n    isNow() ||\n    isAwsCodeBuild()\n  );\n}\n\nfunction isGithubActions(): boolean {\n  return process.env.GITHUB_ACTIONS !== undefined;\n}\n\nfunction isLinuxWithoutDisplayServer(): boolean {\n  if (os.type() !== \"Linux\") {\n    return false;\n  }\n\n  if (process.env.DISPLAY !== undefined) {\n    return false;\n  }\n\n  if (process.env.WAYLAND_DISPLAY !== undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isNow() {\n  return (\n    process.env.NOW !== undefined || process.env.DEPLOYMENT_ID !== undefined\n  );\n}\n\nfunction isAwsCodeBuild() {\n  return process.env.CODEBUILD_BUILD_NUMBER !== undefined;\n}\n"]},"metadata":{},"sourceType":"script"}