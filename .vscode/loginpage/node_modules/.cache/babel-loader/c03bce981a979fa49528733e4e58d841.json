{"ast":null,"code":"import { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { logAndExitProcess } from '../handlers';\n/** Global Promise Rejection handler */\n\nvar OnUncaughtException =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function OnUncaughtException(_options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = OnUncaughtException.id;\n    /**\n     * @inheritDoc\n     */\n\n    this.handler = this._makeErrorHandler();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUncaughtException.prototype.setupOnce = function () {\n    global.process.on('uncaughtException', this.handler.bind(this));\n  };\n  /**\n   * @hidden\n   */\n\n\n  OnUncaughtException.prototype._makeErrorHandler = function () {\n    var _this = this;\n\n    var timeout = 2000;\n    var caughtFirstError = false;\n    var caughtSecondError = false;\n    var calledFatalError = false;\n    var firstError;\n    return function (error) {\n      var onFatalError = logAndExitProcess;\n      var client = getCurrentHub().getClient();\n\n      if (_this._options.onFatalError) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onFatalError = _this._options.onFatalError;\n      } else if (client && client.getOptions().onFatalError) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onFatalError = client.getOptions().onFatalError;\n      }\n\n      if (!caughtFirstError) {\n        var hub_1 = getCurrentHub(); // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n\n        firstError = error;\n        caughtFirstError = true;\n\n        if (hub_1.getIntegration(OnUncaughtException)) {\n          hub_1.withScope(function (scope) {\n            scope.setLevel(Severity.Fatal);\n            hub_1.captureException(error, {\n              originalException: error\n            });\n\n            if (!calledFatalError) {\n              calledFatalError = true;\n              onFatalError(error);\n            }\n          });\n        } else {\n          if (!calledFatalError) {\n            calledFatalError = true;\n            onFatalError(error);\n          }\n        }\n      } else if (calledFatalError) {\n        // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n        logger.warn('uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown');\n        logAndExitProcess(error);\n      } else if (!caughtSecondError) {\n        // two cases for how we can hit this branch:\n        //   - capturing of first error blew up and we just caught the exception from that\n        //     - quit trying to capture, proceed with shutdown\n        //   - a second independent error happened while waiting for first error to capture\n        //     - want to avoid causing premature shutdown before first error capture finishes\n        // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n        // so let's instead just delay a bit before we proceed with our action here\n        // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n        // in case 2, the delay hopefully made us wait long enough for the capture to finish\n        // two potential nonideal outcomes:\n        //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n        //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n        // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n        //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n        caughtSecondError = true;\n        setTimeout(function () {\n          if (!calledFatalError) {\n            // it was probably case 1, let's treat err as the sendErr and call onFatalError\n            calledFatalError = true;\n            onFatalError(firstError, error);\n          } else {// it was probably case 2, our first error finished capturing while we waited, cool, do nothing\n          }\n        }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n      }\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUncaughtException.id = 'OnUncaughtException';\n  return OnUncaughtException;\n}();\n\nexport { OnUncaughtException };","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAqC,cAArC;AACA,SAAsBC,QAAtB,QAAsC,eAAtC;AACA,SAASC,MAAT,QAAuB,eAAvB;AAGA,SAASC,iBAAT,QAAkC,aAAlC;AAEA;;AACA;AAAA;AAAA;EAgBE;;;EAGA,6BACmBC,QADnB,EAQQ;IAPW;MAAAA;IAOX;;IAPW;IAdnB;;;;IAGO,YAAeC,mBAAmB,CAACC,EAAnC;IAEP;;;;IAGgB,eAAkC,KAAKC,iBAAL,EAAlC;EAcZ;EACJ;;;;;EAGOF,0CAAP;IACEG,MAAM,CAACC,OAAP,CAAeC,EAAf,CAAkB,mBAAlB,EAAuC,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAvC;EACD,CAFM;EAIP;;;;;EAGQP,kDAAR;IAAA;;IACE,IAAMQ,OAAO,GAAG,IAAhB;IACA,IAAIC,gBAAgB,GAAY,KAAhC;IACA,IAAIC,iBAAiB,GAAY,KAAjC;IACA,IAAIC,gBAAgB,GAAY,KAAhC;IACA,IAAIC,UAAJ;IAEA,OAAO,UAACC,KAAD,EAAa;MAGlB,IAAIC,YAAY,GAA4BhB,iBAA5C;MACA,IAAMiB,MAAM,GAAGpB,aAAa,GAAGqB,SAAhB,EAAf;;MAEA,IAAIC,KAAI,CAAClB,QAAL,CAAce,YAAlB,EAAgC;QAC9B;QACAA,YAAY,GAAGG,KAAI,CAAClB,QAAL,CAAce,YAA7B;MACD,CAHD,MAGO,IAAIC,MAAM,IAAIA,MAAM,CAACG,UAAP,GAAoBJ,YAAlC,EAAgD;QACrD;QACAA,YAAY,GAAGC,MAAM,CAACG,UAAP,GAAoBJ,YAAnC;MACD;;MAED,IAAI,CAACL,gBAAL,EAAuB;QACrB,IAAMU,KAAG,GAAGxB,aAAa,EAAzB,CADqB,CAGrB;QACA;QACA;;QACAiB,UAAU,GAAGC,KAAb;QACAJ,gBAAgB,GAAG,IAAnB;;QAEA,IAAIU,KAAG,CAACC,cAAJ,CAAmBpB,mBAAnB,CAAJ,EAA6C;UAC3CmB,KAAG,CAACE,SAAJ,CAAc,UAACC,KAAD,EAAa;YACzBA,KAAK,CAACC,QAAN,CAAe3B,QAAQ,CAAC4B,KAAxB;YACAL,KAAG,CAACM,gBAAJ,CAAqBZ,KAArB,EAA4B;cAAEa,iBAAiB,EAAEb;YAArB,CAA5B;;YACA,IAAI,CAACF,gBAAL,EAAuB;cACrBA,gBAAgB,GAAG,IAAnB;cACAG,YAAY,CAACD,KAAD,CAAZ;YACD;UACF,CAPD;QAQD,CATD,MASO;UACL,IAAI,CAACF,gBAAL,EAAuB;YACrBA,gBAAgB,GAAG,IAAnB;YACAG,YAAY,CAACD,KAAD,CAAZ;UACD;QACF;MACF,CAxBD,MAwBO,IAAIF,gBAAJ,EAAsB;QAC3B;QACAd,MAAM,CAAC8B,IAAP,CAAY,gGAAZ;QACA7B,iBAAiB,CAACe,KAAD,CAAjB;MACD,CAJM,MAIA,IAAI,CAACH,iBAAL,EAAwB;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAA,iBAAiB,GAAG,IAApB;QACAkB,UAAU,CAAC;UACT,IAAI,CAACjB,gBAAL,EAAuB;YACrB;YACAA,gBAAgB,GAAG,IAAnB;YACAG,YAAY,CAACF,UAAD,EAAaC,KAAb,CAAZ;UACD,CAJD,MAIO,CACL;UACD;QACF,CARS,EAQPL,OARO,CAAV,CAhB6B,CAwBhB;MACd;IACF,CApED;EAqED,CA5EO;EAtCR;;;;;EAGcR,yBAAa,qBAAb;EAgHhB;AAAC,CApHD;;SAAaA","names":["getCurrentHub","Severity","logger","logAndExitProcess","_options","OnUncaughtException","id","_makeErrorHandler","global","process","on","handler","bind","timeout","caughtFirstError","caughtSecondError","calledFatalError","firstError","error","onFatalError","client","getClient","_this","getOptions","hub_1","getIntegration","withScope","scope","setLevel","Fatal","captureException","originalException","warn","setTimeout"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\integrations\\onuncaughtexception.ts"],"sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { Integration, Severity } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { NodeClient } from '../client';\nimport { logAndExitProcess } from '../handlers';\n\n/** Global Promise Rejection handler */\nexport class OnUncaughtException implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'OnUncaughtException';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = OnUncaughtException.id;\n\n  /**\n   * @inheritDoc\n   */\n  public readonly handler: (error: Error) => void = this._makeErrorHandler();\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      /**\n       * Default onFatalError handler\n       * @param firstError Error that has been thrown\n       * @param secondError If this was called multiple times this will be set\n       */\n      onFatalError?(firstError: Error, secondError?: Error): void;\n    } = {},\n  ) {}\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    global.process.on('uncaughtException', this.handler.bind(this));\n  }\n\n  /**\n   * @hidden\n   */\n  private _makeErrorHandler(): (error: Error) => void {\n    const timeout = 2000;\n    let caughtFirstError: boolean = false;\n    let caughtSecondError: boolean = false;\n    let calledFatalError: boolean = false;\n    let firstError: Error;\n\n    return (error: Error): void => {\n      type onFatalErrorHandlerType = (firstError: Error, secondError?: Error) => void;\n\n      let onFatalError: onFatalErrorHandlerType = logAndExitProcess;\n      const client = getCurrentHub().getClient<NodeClient>();\n\n      if (this._options.onFatalError) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onFatalError = this._options.onFatalError;\n      } else if (client && client.getOptions().onFatalError) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onFatalError = client.getOptions().onFatalError as onFatalErrorHandlerType;\n      }\n\n      if (!caughtFirstError) {\n        const hub = getCurrentHub();\n\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (hub.getIntegration(OnUncaughtException)) {\n          hub.withScope((scope: Scope) => {\n            scope.setLevel(Severity.Fatal);\n            hub.captureException(error, { originalException: error });\n            if (!calledFatalError) {\n              calledFatalError = true;\n              onFatalError(error);\n            }\n          });\n        } else {\n          if (!calledFatalError) {\n            calledFatalError = true;\n            onFatalError(error);\n          }\n        }\n      } else if (calledFatalError) {\n        // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n        logger.warn('uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown');\n        logAndExitProcess(error);\n      } else if (!caughtSecondError) {\n        // two cases for how we can hit this branch:\n        //   - capturing of first error blew up and we just caught the exception from that\n        //     - quit trying to capture, proceed with shutdown\n        //   - a second independent error happened while waiting for first error to capture\n        //     - want to avoid causing premature shutdown before first error capture finishes\n        // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n        // so let's instead just delay a bit before we proceed with our action here\n        // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n        // in case 2, the delay hopefully made us wait long enough for the capture to finish\n        // two potential nonideal outcomes:\n        //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n        //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n        // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n        //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n        caughtSecondError = true;\n        setTimeout(() => {\n          if (!calledFatalError) {\n            // it was probably case 1, let's treat err as the sendErr and call onFatalError\n            calledFatalError = true;\n            onFatalError(firstError, error);\n          } else {\n            // it was probably case 2, our first error finished capturing while we waited, cool, do nothing\n          }\n        }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}