{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getCLS = function (onReport, reportAllChanges) {\n  if (reportAllChanges === void 0) {\n    reportAllChanges = false;\n  }\n\n  var metric = initMetric('CLS', 0);\n  var report;\n\n  var entryHandler = function (entry) {\n    // Only count layout shifts without recent user input.\n    if (!entry.hadRecentInput) {\n      metric.value += entry.value;\n      metric.entries.push(entry);\n      report();\n    }\n  };\n\n  var po = observe('layout-shift', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n    onHidden(function (_a) {\n      var isUnloading = _a.isUnloading;\n      po.takeRecords().map(entryHandler);\n\n      if (isUnloading) {\n        metric.isFinal = true;\n      }\n\n      report();\n    });\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAiD,eAAjD;AACA,SAASC,QAAT,QAAyB,gBAAzB;AASA,OAAO,IAAMC,MAAM,GAAG,UAACC,QAAD,EAA0BC,gBAA1B,EAAkD;EAAxB;IAAAA;EAAwB;;EACtE,IAAMC,MAAM,GAAGN,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAzB;EAEA,IAAIO,MAAJ;;EAEA,IAAMC,YAAY,GAAG,UAACC,KAAD,EAAmB;IACtC;IACA,IAAI,CAACA,KAAK,CAACC,cAAX,EAA2B;MACxBJ,MAAM,CAACK,KAAP,IAA2BF,KAAK,CAACE,KAAjC;MACDL,MAAM,CAACM,OAAP,CAAeC,IAAf,CAAoBJ,KAApB;MACAF,MAAM;IACP;EACF,CAPD;;EASA,IAAMO,EAAE,GAAGb,OAAO,CAAC,cAAD,EAAiBO,YAAjB,CAAlB;;EACA,IAAIM,EAAJ,EAAQ;IACNP,MAAM,GAAGR,YAAY,CAACK,QAAD,EAAWE,MAAX,EAAmBQ,EAAnB,EAAuBT,gBAAvB,CAArB;IAEAH,QAAQ,CAAC,UAACa,EAAD,EAAgB;UAAbC;MACVF,EAAE,CAACG,WAAH,GAAiBC,GAAjB,CAAqBV,YAArB;;MAEA,IAAIQ,WAAJ,EAAiB;QACfV,MAAM,CAACa,OAAP,GAAiB,IAAjB;MACD;;MACDZ,MAAM;IACP,CAPO,CAAR;EAQD;AACF,CA3BM","names":["bindReporter","initMetric","observe","onHidden","getCLS","onReport","reportAllChanges","metric","report","entryHandler","entry","hadRecentInput","value","entries","push","po","_a","isUnloading","takeRecords","map","isFinal"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\browser\\web-vitals\\getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\ninterface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges = false): void => {\n  const metric = initMetric('CLS', 0);\n\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    if (!entry.hadRecentInput) {\n      (metric.value as number) += entry.value;\n      metric.entries.push(entry);\n      report();\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n\n    onHidden(({ isUnloading }) => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n\n      if (isUnloading) {\n        metric.isFinal = true;\n      }\n      report();\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}