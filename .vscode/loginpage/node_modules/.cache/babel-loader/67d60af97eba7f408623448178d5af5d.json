{"ast":null,"code":"var assert = require('assert');\n\nvar keccak256 = require('js-sha3').keccak256;\n\nfunction libraryHashPlaceholder(input) {\n  return '$' + keccak256(input).slice(0, 34) + '$';\n}\n\nvar linkBytecode = function (bytecode, libraries) {\n  assert(typeof bytecode === 'string');\n  assert(typeof libraries === 'object'); // NOTE: for backwards compatibility support old compiler which didn't use file names\n\n  var librariesComplete = {};\n\n  for (var libraryName in libraries) {\n    if (typeof libraries[libraryName] === 'object') {\n      // API compatible with the standard JSON i/o\n      for (var lib in libraries[libraryName]) {\n        librariesComplete[lib] = libraries[libraryName][lib];\n        librariesComplete[libraryName + ':' + lib] = libraries[libraryName][lib];\n      }\n    } else {\n      // backwards compatible API for early solc-js versions\n      var parsed = libraryName.match(/^([^:]+):(.+)$/);\n\n      if (parsed) {\n        librariesComplete[parsed[2]] = libraries[libraryName];\n      }\n\n      librariesComplete[libraryName] = libraries[libraryName];\n    }\n  }\n\n  for (libraryName in librariesComplete) {\n    var hexAddress = librariesComplete[libraryName];\n\n    if (hexAddress.slice(0, 2) !== '0x' || hexAddress.length > 42) {\n      throw new Error('Invalid address specified for ' + libraryName);\n    } // remove 0x prefix\n\n\n    hexAddress = hexAddress.slice(2);\n    hexAddress = Array(40 - hexAddress.length + 1).join('0') + hexAddress; // Support old (library name) and new (hash of library name)\n    // placeholders.\n\n    var replace = function (name) {\n      // truncate to 37 characters\n      var truncatedName = name.slice(0, 36);\n      var libLabel = '__' + truncatedName + Array(37 - truncatedName.length).join('_') + '__';\n\n      while (bytecode.indexOf(libLabel) >= 0) {\n        bytecode = bytecode.replace(libLabel, hexAddress);\n      }\n    };\n\n    replace(libraryName);\n    replace(libraryHashPlaceholder(libraryName));\n  }\n\n  return bytecode;\n};\n\nvar findLinkReferences = function (bytecode) {\n  assert(typeof bytecode === 'string'); // find 40 bytes in the pattern of __...<36 digits>...__\n  // e.g. __Lib.sol:L_____________________________\n\n  var linkReferences = {};\n  var offset = 0;\n\n  while (true) {\n    var found = bytecode.match(/__(.{36})__/);\n\n    if (!found) {\n      break;\n    }\n\n    var start = found.index; // trim trailing underscores\n    // NOTE: this has no way of knowing if the trailing underscore was part of the name\n\n    var libraryName = found[1].replace(/_+$/gm, '');\n\n    if (!linkReferences[libraryName]) {\n      linkReferences[libraryName] = [];\n    }\n\n    linkReferences[libraryName].push({\n      // offsets are in bytes in binary representation (and not hex)\n      start: (offset + start) / 2,\n      length: 20\n    });\n    offset += start + 20;\n    bytecode = bytecode.slice(start + 20);\n  }\n\n  return linkReferences;\n};\n\nmodule.exports = {\n  linkBytecode: linkBytecode,\n  findLinkReferences: findLinkReferences\n};","map":{"version":3,"names":["assert","require","keccak256","libraryHashPlaceholder","input","slice","linkBytecode","bytecode","libraries","librariesComplete","libraryName","lib","parsed","match","hexAddress","length","Error","Array","join","replace","name","truncatedName","libLabel","indexOf","findLinkReferences","linkReferences","offset","found","start","index","push","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/solc/linker.js"],"sourcesContent":["var assert = require('assert');\nvar keccak256 = require('js-sha3').keccak256;\n\nfunction libraryHashPlaceholder (input) {\n  return '$' + keccak256(input).slice(0, 34) + '$';\n}\n\nvar linkBytecode = function (bytecode, libraries) {\n  assert(typeof bytecode === 'string');\n  assert(typeof libraries === 'object');\n  // NOTE: for backwards compatibility support old compiler which didn't use file names\n  var librariesComplete = {};\n  for (var libraryName in libraries) {\n    if (typeof libraries[libraryName] === 'object') {\n      // API compatible with the standard JSON i/o\n      for (var lib in libraries[libraryName]) {\n        librariesComplete[lib] = libraries[libraryName][lib];\n        librariesComplete[libraryName + ':' + lib] = libraries[libraryName][lib];\n      }\n    } else {\n      // backwards compatible API for early solc-js versions\n      var parsed = libraryName.match(/^([^:]+):(.+)$/);\n      if (parsed) {\n        librariesComplete[parsed[2]] = libraries[libraryName];\n      }\n      librariesComplete[libraryName] = libraries[libraryName];\n    }\n  }\n\n  for (libraryName in librariesComplete) {\n    var hexAddress = librariesComplete[libraryName];\n    if (hexAddress.slice(0, 2) !== '0x' || hexAddress.length > 42) {\n      throw new Error('Invalid address specified for ' + libraryName);\n    }\n    // remove 0x prefix\n    hexAddress = hexAddress.slice(2);\n    hexAddress = Array(40 - hexAddress.length + 1).join('0') + hexAddress;\n\n    // Support old (library name) and new (hash of library name)\n    // placeholders.\n    var replace = function (name) {\n      // truncate to 37 characters\n      var truncatedName = name.slice(0, 36);\n      var libLabel = '__' + truncatedName + Array(37 - truncatedName.length).join('_') + '__';\n      while (bytecode.indexOf(libLabel) >= 0) {\n        bytecode = bytecode.replace(libLabel, hexAddress);\n      }\n    };\n\n    replace(libraryName);\n    replace(libraryHashPlaceholder(libraryName));\n  }\n\n  return bytecode;\n};\n\nvar findLinkReferences = function (bytecode) {\n  assert(typeof bytecode === 'string');\n  // find 40 bytes in the pattern of __...<36 digits>...__\n  // e.g. __Lib.sol:L_____________________________\n  var linkReferences = {};\n  var offset = 0;\n  while (true) {\n    var found = bytecode.match(/__(.{36})__/);\n    if (!found) {\n      break;\n    }\n\n    var start = found.index;\n    // trim trailing underscores\n    // NOTE: this has no way of knowing if the trailing underscore was part of the name\n    var libraryName = found[1].replace(/_+$/gm, '');\n\n    if (!linkReferences[libraryName]) {\n      linkReferences[libraryName] = [];\n    }\n\n    linkReferences[libraryName].push({\n      // offsets are in bytes in binary representation (and not hex)\n      start: (offset + start) / 2,\n      length: 20\n    });\n\n    offset += start + 20;\n\n    bytecode = bytecode.slice(start + 20);\n  }\n  return linkReferences;\n};\n\nmodule.exports = {\n  linkBytecode: linkBytecode,\n  findLinkReferences: findLinkReferences\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}