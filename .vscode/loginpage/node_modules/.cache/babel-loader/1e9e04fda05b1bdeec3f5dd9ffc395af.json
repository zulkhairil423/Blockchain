{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { NodeBackend } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar NodeClient =\n/** @class */\nfunction (_super) {\n  __extends(NodeClient, _super);\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function NodeClient(options) {\n    return _super.call(this, NodeBackend, options) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  NodeClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'node';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/node',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n\n  return NodeClient;\n}(BaseClient);\n\nexport { NodeClient };","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAAkC,cAAlC;AAGA,SAASC,WAAT,QAAyC,WAAzC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,WAAtC;AAEA;;;;;;;AAMA;AAAA;AAAA;EAAgCC;EAC9B;;;;;;EAIA,oBAAmBC,OAAnB,EAAuC;WACrCC,kBAAML,WAAN,EAAmBI,OAAnB,KAA2B;EAC5B;EAED;;;;;EAGUE,qCAAV,UAAwBC,KAAxB,EAAsCC,KAAtC,EAAqDC,IAArD,EAAqE;IACnEF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,IAAkB,MAAnC;IACAH,KAAK,CAACI,GAAN,GAASC,sBACJL,KAAK,CAACI,GADF,GACK;MACZE,IAAI,EAAEZ,QADM;MAEZa,QAAQ,WACDP,KAAK,CAACI,GAAN,IAAaJ,KAAK,CAACI,GAAN,CAAUG,QAAxB,IAAqC,EADnC,EACsC,CAC5C;QACED,IAAI,EAAE,kBADR;QAEEE,OAAO,EAAEb;MAFX,CAD4C,CADtC,CAFI;MASZa,OAAO,EAAEb;IATG,CADL,CAAT;;IAaA,IAAI,KAAKc,UAAL,GAAkBC,UAAtB,EAAkC;MAChCV,KAAK,CAACW,WAAN,GAAoB,KAAKF,UAAL,GAAkBC,UAAtC;IACD;;IAED,OAAOZ,iBAAMc,aAAN,CAAmBC,IAAnB,CAAmB,IAAnB,EAAoBb,KAApB,EAA2BC,KAA3B,EAAkCC,IAAlC,CAAP;EACD,CApBS;;EAqBZ;AAAC,CAjCD,CAAgCV,UAAhC","names":["BaseClient","NodeBackend","SDK_NAME","SDK_VERSION","__extends","options","_super","NodeClient","event","scope","hint","platform","sdk","__assign","name","packages","version","getOptions","serverName","server_name","_prepareEvent","call"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\client.ts"],"sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\n\nimport { NodeBackend, NodeOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeOptions) {\n    super(NodeBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'node';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/node',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n\n    return super._prepareEvent(event, scope, hint);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}