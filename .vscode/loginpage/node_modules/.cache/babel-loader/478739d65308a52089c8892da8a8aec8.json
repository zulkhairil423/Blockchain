{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n/**\n * Configures global error listeners\n */\n\nexport function registerErrorInstrumentation() {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error'\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection'\n  });\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\n\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n\n  if (activeTransaction) {\n    logger.log(\"[Tracing] Transaction: \" + SpanStatus.InternalError + \" -> Global error occured\");\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,yBAAT,EAAoCC,MAApC,QAAkD,eAAlD;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA;;;;AAGA,OAAM,SAAUC,4BAAV,GAAsC;EAC1CJ,yBAAyB,CAAC;IACxBK,QAAQ,EAAEC,aADc;IAExBC,IAAI,EAAE;EAFkB,CAAD,CAAzB;EAIAP,yBAAyB,CAAC;IACxBK,QAAQ,EAAEC,aADc;IAExBC,IAAI,EAAE;EAFkB,CAAD,CAAzB;AAID;AAED;;;;AAGA,SAASD,aAAT,GAAsB;EACpB,IAAME,iBAAiB,GAAGL,oBAAoB,EAA9C;;EACA,IAAIK,iBAAJ,EAAuB;IACrBP,MAAM,CAACQ,GAAP,CAAW,4BAA0BP,UAAU,CAACQ,aAArC,GAAkD,0BAA7D;IACAF,iBAAiB,CAACG,SAAlB,CAA4BT,UAAU,CAACQ,aAAvC;EACD;AACF","names":["addInstrumentationHandler","logger","SpanStatus","getActiveTransaction","registerErrorInstrumentation","callback","errorCallback","type","activeTransaction","log","InternalError","setStatus"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\tracing\\src\\errors.ts"],"sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection',\n  });\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(`[Tracing] Transaction: ${SpanStatus.InternalError} -> Global error occured`);\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}