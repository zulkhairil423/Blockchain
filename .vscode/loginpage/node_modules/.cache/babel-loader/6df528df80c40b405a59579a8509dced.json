{"ast":null,"code":"'use strict';\n\nvar isWindows = process.platform === 'win32'; // Regex to split a windows path into into [dir, root, basename, name, ext]\n\nvar splitWindowsRe = /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\nvar win32 = {};\n\nfunction win32SplitPath(filename) {\n  return splitWindowsRe.exec(filename).slice(1);\n}\n\nwin32.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n\n  var allParts = win32SplitPath(pathString);\n\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n\n  return {\n    root: allParts[1],\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n}; // Split a filename into [dir, root, basename, name, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\nvar posix = {};\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\nposix.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n\n  var allParts = posixSplitPath(pathString);\n\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n\n  return {\n    root: allParts[1],\n    dir: allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\n\nif (isWindows) module.exports = win32.parse;else\n  /* posix */\n  module.exports = posix.parse;\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;","map":{"version":3,"names":["isWindows","process","platform","splitWindowsRe","win32","win32SplitPath","filename","exec","slice","parse","pathString","TypeError","allParts","length","root","dir","base","ext","name","splitPathRe","posix","posixSplitPath","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/path-parse/index.js"],"sourcesContent":["'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into into [dir, root, basename, name, ext]\nvar splitWindowsRe =\n    /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\n\nvar win32 = {};\n\nfunction win32SplitPath(filename) {\n  return splitWindowsRe.exec(filename).slice(1);\n}\n\nwin32.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[1],\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\n\n\n\n// Split a filename into [dir, root, basename, name, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\nposix.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  \n  return {\n    root: allParts[1],\n    dir: allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3],\n  };\n};\n\n\nif (isWindows)\n  module.exports = win32.parse;\nelse /* posix */\n  module.exports = posix.parse;\n\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;\n"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArC,C,CAEA;;AACA,IAAIC,cAAc,GACd,4HADJ;AAGA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;EAChC,OAAOH,cAAc,CAACI,IAAf,CAAoBD,QAApB,EAA8BE,KAA9B,CAAoC,CAApC,CAAP;AACD;;AAEDJ,KAAK,CAACK,KAAN,GAAc,UAASC,UAAT,EAAqB;EACjC,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,MAAM,IAAIC,SAAJ,CACF,kDAAkD,OAAOD,UADvD,CAAN;EAGD;;EACD,IAAIE,QAAQ,GAAGP,cAAc,CAACK,UAAD,CAA7B;;EACA,IAAI,CAACE,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;IACtC,MAAM,IAAIF,SAAJ,CAAc,mBAAmBD,UAAnB,GAAgC,GAA9C,CAAN;EACD;;EACD,OAAO;IACLI,IAAI,EAAEF,QAAQ,CAAC,CAAD,CADT;IAELG,GAAG,EAAEH,QAAQ,CAAC,CAAD,CAAR,KAAgBA,QAAQ,CAAC,CAAD,CAAxB,GAA8BA,QAAQ,CAAC,CAAD,CAAtC,GAA4CA,QAAQ,CAAC,CAAD,CAAR,CAAYJ,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAF5C;IAGLQ,IAAI,EAAEJ,QAAQ,CAAC,CAAD,CAHT;IAILK,GAAG,EAAEL,QAAQ,CAAC,CAAD,CAJR;IAKLM,IAAI,EAAEN,QAAQ,CAAC,CAAD;EALT,CAAP;AAOD,CAjBD,C,CAqBA;AACA;;;AACA,IAAIO,WAAW,GACX,6DADJ;AAEA,IAAIC,KAAK,GAAG,EAAZ;;AAGA,SAASC,cAAT,CAAwBf,QAAxB,EAAkC;EAChC,OAAOa,WAAW,CAACZ,IAAZ,CAAiBD,QAAjB,EAA2BE,KAA3B,CAAiC,CAAjC,CAAP;AACD;;AAGDY,KAAK,CAACX,KAAN,GAAc,UAASC,UAAT,EAAqB;EACjC,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,MAAM,IAAIC,SAAJ,CACF,kDAAkD,OAAOD,UADvD,CAAN;EAGD;;EACD,IAAIE,QAAQ,GAAGS,cAAc,CAACX,UAAD,CAA7B;;EACA,IAAI,CAACE,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;IACtC,MAAM,IAAIF,SAAJ,CAAc,mBAAmBD,UAAnB,GAAgC,GAA9C,CAAN;EACD;;EAED,OAAO;IACLI,IAAI,EAAEF,QAAQ,CAAC,CAAD,CADT;IAELG,GAAG,EAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYJ,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAFA;IAGLQ,IAAI,EAAEJ,QAAQ,CAAC,CAAD,CAHT;IAILK,GAAG,EAAEL,QAAQ,CAAC,CAAD,CAJR;IAKLM,IAAI,EAAEN,QAAQ,CAAC,CAAD;EALT,CAAP;AAOD,CAlBD;;AAqBA,IAAIZ,SAAJ,EACEsB,MAAM,CAACC,OAAP,GAAiBnB,KAAK,CAACK,KAAvB,CADF;EAEK;EACHa,MAAM,CAACC,OAAP,GAAiBH,KAAK,CAACX,KAAvB;AAEFa,MAAM,CAACC,OAAP,CAAeH,KAAf,GAAuBA,KAAK,CAACX,KAA7B;AACAa,MAAM,CAACC,OAAP,CAAenB,KAAf,GAAuBA,KAAK,CAACK,KAA7B"},"metadata":{},"sourceType":"script"}