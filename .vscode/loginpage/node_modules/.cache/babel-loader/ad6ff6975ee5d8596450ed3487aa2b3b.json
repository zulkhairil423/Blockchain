{"ast":null,"code":"// copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js\n'use strict';\n\nconst {\n  SafeMap\n} = require('./node-primordials');\n\nconst {\n  internalModuleReadJSON\n} = require('./node-internalBinding-fs');\n\nconst {\n  pathToFileURL\n} = require('url');\n\nconst {\n  toNamespacedPath\n} = require('path'); // const { getOptionValue } = require('./node-options');\n\n\nconst cache = new SafeMap();\nlet manifest;\n/**\n * @param {string} jsonPath\n * @return {{string: string, containsKeys: boolean}}\n */\n\nfunction read(jsonPath) {\n  if (cache.has(jsonPath)) {\n    return cache.get(jsonPath);\n  }\n\n  const [string, containsKeys] = internalModuleReadJSON(toNamespacedPath(jsonPath));\n  const result = {\n    string,\n    containsKeys\n  };\n\n  if (string !== undefined) {\n    if (manifest === undefined) {\n      // manifest = getOptionValue('--experimental-policy') ?\n      //   require('internal/process/policy').manifest :\n      //   null;\n      // disabled for now.  I am not sure if/how we should support this\n      manifest = null;\n    }\n\n    if (manifest !== null) {\n      const jsonURL = pathToFileURL(jsonPath);\n      manifest.assertIntegrity(jsonURL, string);\n    }\n  }\n\n  cache.set(jsonPath, result);\n  return result;\n}\n\nmodule.exports = {\n  read\n};","map":{"version":3,"names":["SafeMap","require","internalModuleReadJSON","pathToFileURL","toNamespacedPath","cache","manifest","read","jsonPath","has","get","string","containsKeys","result","undefined","jsonURL","assertIntegrity","set","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-internal-modules-package_json_reader.js"],"sourcesContent":["// copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js\n'use strict';\n\nconst { SafeMap } = require('./node-primordials');\nconst { internalModuleReadJSON } = require('./node-internalBinding-fs');\nconst { pathToFileURL } = require('url');\nconst { toNamespacedPath } = require('path');\n// const { getOptionValue } = require('./node-options');\n\nconst cache = new SafeMap();\n\nlet manifest;\n\n/**\n * @param {string} jsonPath\n * @return {{string: string, containsKeys: boolean}}\n */\nfunction read(jsonPath) {\n  if (cache.has(jsonPath)) {\n    return cache.get(jsonPath);\n  }\n\n  const [string, containsKeys] = internalModuleReadJSON(\n    toNamespacedPath(jsonPath)\n  );\n  const result = { string, containsKeys };\n  if (string !== undefined) {\n    if (manifest === undefined) {\n      // manifest = getOptionValue('--experimental-policy') ?\n      //   require('internal/process/policy').manifest :\n      //   null;\n      // disabled for now.  I am not sure if/how we should support this\n      manifest = null;\n    }\n    if (manifest !== null) {\n      const jsonURL = pathToFileURL(jsonPath);\n      manifest.assertIntegrity(jsonURL, string);\n    }\n  }\n  cache.set(jsonPath, result);\n  return result;\n}\n\nmodule.exports = { read };\n"],"mappings":"AAAA;AACA;;AAEA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAM;EAAEC;AAAF,IAA6BD,OAAO,CAAC,2BAAD,CAA1C;;AACA,MAAM;EAAEE;AAAF,IAAoBF,OAAO,CAAC,KAAD,CAAjC;;AACA,MAAM;EAAEG;AAAF,IAAuBH,OAAO,CAAC,MAAD,CAApC,C,CACA;;;AAEA,MAAMI,KAAK,GAAG,IAAIL,OAAJ,EAAd;AAEA,IAAIM,QAAJ;AAEA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,QAAd,EAAwB;EACtB,IAAIH,KAAK,CAACI,GAAN,CAAUD,QAAV,CAAJ,EAAyB;IACvB,OAAOH,KAAK,CAACK,GAAN,CAAUF,QAAV,CAAP;EACD;;EAED,MAAM,CAACG,MAAD,EAASC,YAAT,IAAyBV,sBAAsB,CACnDE,gBAAgB,CAACI,QAAD,CADmC,CAArD;EAGA,MAAMK,MAAM,GAAG;IAAEF,MAAF;IAAUC;EAAV,CAAf;;EACA,IAAID,MAAM,KAAKG,SAAf,EAA0B;IACxB,IAAIR,QAAQ,KAAKQ,SAAjB,EAA4B;MAC1B;MACA;MACA;MACA;MACAR,QAAQ,GAAG,IAAX;IACD;;IACD,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;MACrB,MAAMS,OAAO,GAAGZ,aAAa,CAACK,QAAD,CAA7B;MACAF,QAAQ,CAACU,eAAT,CAAyBD,OAAzB,EAAkCJ,MAAlC;IACD;EACF;;EACDN,KAAK,CAACY,GAAN,CAAUT,QAAV,EAAoBK,MAApB;EACA,OAAOA,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;EAAEZ;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}