{"ast":null,"code":"// Copied from several files in node's source code.\n// https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js\n// Each function and variable below must have a comment linking to the source in node's github repo.\n'use strict';\n\nconst {\n  ArrayIsArray,\n  ArrayPrototypeIncludes,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  JSONParse,\n  ObjectKeys,\n  RegExpPrototypeTest,\n  SafeMap,\n  SafeWeakMap,\n  StringPrototypeCharCodeAt,\n  StringPrototypeEndsWith,\n  StringPrototypeLastIndexOf,\n  StringPrototypeIndexOf,\n  StringPrototypeMatch,\n  StringPrototypeSlice,\n  StringPrototypeStartsWith\n} = require('./node-primordials');\n\nconst {\n  NativeModule\n} = require('./node-nativemodule');\n\nconst {\n  pathToFileURL,\n  fileURLToPath\n} = require('url');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst {\n  sep\n} = path;\n\nconst {\n  internalModuleStat\n} = require('./node-internalBinding-fs');\n\nconst packageJsonReader = require('./node-internal-modules-package_json_reader');\n\nconst {\n  cjsConditions\n} = require('./node-internal-modules-cjs-helpers');\n\nconst {\n  getOptionValue\n} = require('./node-options');\n\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\n\nconst {\n  normalizeSlashes\n} = require('../dist/util');\n\nconst {\n  createErrRequireEsm\n} = require('./node-internal-errors');\n\nconst {\n  codes: {\n    ERR_INVALID_MODULE_SPECIFIER\n  }\n} = require('./node-internal-errors');\n\nconst {\n  CHAR_FORWARD_SLASH\n} = require('./node-internal-constants');\n\nconst Module = require('module');\n\nconst isWindows = process.platform === 'win32';\nlet statCache = null;\n\nfunction stat(filename) {\n  filename = path.toNamespacedPath(filename);\n\n  if (statCache !== null) {\n    const result = statCache.get(filename);\n    if (result !== undefined) return result;\n  }\n\n  const result = internalModuleStat(filename);\n\n  if (statCache !== null && result >= 0) {\n    // Only set cache when `internalModuleStat(filename)` succeeds.\n    statCache.set(filename, result);\n  }\n\n  return result;\n} // Note:\n// we cannot get access to node's internal cache, which is populated from\n// within node's Module constructor.  So the cache here will always be empty.\n// It's possible we could approximate our own cache by building it up with\n// hacky workarounds, but it's not worth the complexity and flakiness.\n\n\nconst moduleParentCache = new SafeWeakMap(); // Given a module name, and a list of paths to test, returns the first\n// matching file in the following precedence.\n//\n// require(\"a.<ext>\")\n//   -> a.<ext>\n//\n// require(\"a\")\n//   -> a\n//   -> a.<ext>\n//   -> a/index.<ext>\n\nconst packageJsonCache = new SafeMap();\n\nfunction readPackage(requestPath) {\n  const jsonPath = path.resolve(requestPath, 'package.json');\n  const existing = packageJsonCache.get(jsonPath);\n  if (existing !== undefined) return existing;\n  const result = packageJsonReader.read(jsonPath);\n  const json = result.containsKeys === false ? '{}' : result.string;\n\n  if (json === undefined) {\n    packageJsonCache.set(jsonPath, false);\n    return false;\n  }\n\n  try {\n    const parsed = JSONParse(json);\n    const filtered = {\n      name: parsed.name,\n      main: parsed.main,\n      exports: parsed.exports,\n      imports: parsed.imports,\n      type: parsed.type\n    };\n    packageJsonCache.set(jsonPath, filtered);\n    return filtered;\n  } catch (e) {\n    e.path = jsonPath;\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\n    throw e;\n  }\n}\n\nfunction readPackageScope(checkPath) {\n  const rootSeparatorIndex = StringPrototypeIndexOf(checkPath, sep);\n  let separatorIndex;\n\n  do {\n    separatorIndex = StringPrototypeLastIndexOf(checkPath, sep);\n    checkPath = StringPrototypeSlice(checkPath, 0, separatorIndex);\n    if (StringPrototypeEndsWith(checkPath, sep + 'node_modules')) return false;\n    const pjson = readPackage(checkPath + sep);\n    if (pjson) return {\n      data: pjson,\n      path: checkPath\n    };\n  } while (separatorIndex > rootSeparatorIndex);\n\n  return false;\n}\n/**\n * @param {{\n *   nodeEsmResolver: ReturnType<typeof import('./node-internal-modules-esm-resolve').createResolve>,\n *   extensions: import('../src/file-extensions').Extensions,\n *   preferTsExts\n * }} opts\n */\n\n\nfunction createCjsLoader(opts) {\n  const {\n    nodeEsmResolver,\n    preferTsExts\n  } = opts;\n  const {\n    replacementsForCjs,\n    replacementsForJs,\n    replacementsForMjs,\n    replacementsForJsx\n  } = opts.extensions;\n  const {\n    encodedSepRegEx,\n    packageExportsResolve,\n    packageImportsResolve\n  } = nodeEsmResolver;\n\n  function tryPackage(requestPath, exts, isMain, originalPath) {\n    // const pkg = readPackage(requestPath)?.main;\n    const tmp = readPackage(requestPath);\n    const pkg = tmp != null ? tmp.main : undefined;\n\n    if (!pkg) {\n      return tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\n    }\n\n    const filename = path.resolve(requestPath, pkg);\n    let actual = tryReplacementExtensions(filename, isMain) || tryFile(filename, isMain) || tryExtensions(filename, exts, isMain) || tryExtensions(path.resolve(filename, 'index'), exts, isMain);\n\n    if (actual === false) {\n      actual = tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\n\n      if (!actual) {\n        // eslint-disable-next-line no-restricted-syntax\n        const err = new Error(`Cannot find module '${filename}'. ` + 'Please verify that the package.json has a valid \"main\" entry');\n        err.code = 'MODULE_NOT_FOUND';\n        err.path = path.resolve(requestPath, 'package.json');\n        err.requestPath = originalPath; // TODO(BridgeAR): Add the requireStack as well.\n\n        throw err;\n      } else {\n        const jsonPath = path.resolve(requestPath, 'package.json');\n        process.emitWarning(`Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` + 'Please either fix that or report it to the module author', 'DeprecationWarning', 'DEP0128');\n      }\n    }\n\n    return actual;\n  } // In order to minimize unnecessary lstat() calls,\n  // this cache is a list of known-real paths.\n  // Set to an empty Map to reset.\n\n\n  const realpathCache = new SafeMap(); // Check if the file exists and is not a directory\n  // if using --preserve-symlinks and isMain is false,\n  // keep symlinks intact, otherwise resolve to the\n  // absolute realpath.\n\n  function tryFile(requestPath, isMain) {\n    const rc = stat(requestPath);\n    if (rc !== 0) return;\n\n    if (preserveSymlinks && !isMain) {\n      return path.resolve(requestPath);\n    }\n\n    return toRealPath(requestPath);\n  }\n\n  function toRealPath(requestPath) {\n    return fs.realpathSync(requestPath, {// [internalFS.realpathCacheKey]: realpathCache\n    });\n  }\n\n  function statReplacementExtensions(p) {\n    const lastDotIndex = p.lastIndexOf('.');\n\n    if (lastDotIndex >= 0) {\n      const ext = p.slice(lastDotIndex);\n\n      if (ext === '.js' || ext === '.jsx' || ext === '.mjs' || ext === '.cjs') {\n        const pathnameWithoutExtension = p.slice(0, lastDotIndex);\n        const replacementExts = ext === '.js' ? replacementsForJs : ext === '.jsx' ? replacementsForJsx : ext === '.mjs' ? replacementsForMjs : replacementsForCjs;\n\n        for (let i = 0; i < replacementExts.length; i++) {\n          const filename = pathnameWithoutExtension + replacementExts[i];\n          const rc = stat(filename);\n\n          if (rc === 0) {\n            return [rc, filename];\n          }\n        }\n      }\n    }\n\n    return [stat(p), p];\n  }\n\n  function tryReplacementExtensions(p, isMain) {\n    const lastDotIndex = p.lastIndexOf('.');\n\n    if (lastDotIndex >= 0) {\n      const ext = p.slice(lastDotIndex);\n\n      if (ext === '.js' || ext === '.jsx' || ext === '.mjs' || ext === '.cjs') {\n        const pathnameWithoutExtension = p.slice(0, lastDotIndex);\n        const replacementExts = ext === '.js' ? replacementsForJs : ext === '.jsx' ? replacementsForJsx : ext === '.mjs' ? replacementsForMjs : replacementsForCjs;\n\n        for (let i = 0; i < replacementExts.length; i++) {\n          const filename = tryFile(pathnameWithoutExtension + replacementExts[i], isMain);\n\n          if (filename) {\n            return filename;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Given a path, check if the file exists with any of the set extensions\n\n\n  function tryExtensions(p, exts, isMain) {\n    for (let i = 0; i < exts.length; i++) {\n      const filename = tryFile(p + exts[i], isMain);\n\n      if (filename) {\n        return filename;\n      }\n    }\n\n    return false;\n  }\n\n  function trySelfParentPath(parent) {\n    if (!parent) return false;\n\n    if (parent.filename) {\n      return parent.filename;\n    } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\n      try {\n        return process.cwd() + path.sep;\n      } catch {\n        return false;\n      }\n    }\n  }\n\n  function trySelf(parentPath, request) {\n    if (!parentPath) return false;\n    const {\n      data: pkg,\n      path: pkgPath\n    } = readPackageScope(parentPath) || {};\n    if (!pkg || pkg.exports === undefined) return false;\n    if (typeof pkg.name !== 'string') return false;\n    let expansion;\n\n    if (request === pkg.name) {\n      expansion = '.';\n    } else if (StringPrototypeStartsWith(request, `${pkg.name}/`)) {\n      expansion = '.' + StringPrototypeSlice(request, pkg.name.length);\n    } else {\n      return false;\n    }\n\n    try {\n      return finalizeEsmResolution(packageExportsResolve(pathToFileURL(pkgPath + '/package.json'), expansion, pkg, pathToFileURL(parentPath), cjsConditions).resolved, parentPath, pkgPath);\n    } catch (e) {\n      if (e.code === 'ERR_MODULE_NOT_FOUND') throw createEsmNotFoundErr(request, pkgPath + '/package.json');\n      throw e;\n    }\n  } // This only applies to requests of a specific form:\n  // 1. name/.*\n  // 2. @scope/name/.*\n\n\n  const EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\n\n  function resolveExports(nmPath, request) {\n    // The implementation's behavior is meant to mirror resolution in ESM.\n    const {\n      1: name,\n      2: expansion = ''\n    } = StringPrototypeMatch(request, EXPORTS_PATTERN) || [];\n    if (!name) return;\n    const pkgPath = path.resolve(nmPath, name);\n    const pkg = readPackage(pkgPath); // if (pkg?.exports != null) {\n\n    if (pkg != null && pkg.exports != null) {\n      try {\n        return finalizeEsmResolution(packageExportsResolve(pathToFileURL(pkgPath + '/package.json'), '.' + expansion, pkg, null, cjsConditions).resolved, null, pkgPath);\n      } catch (e) {\n        if (e.code === 'ERR_MODULE_NOT_FOUND') throw createEsmNotFoundErr(request, pkgPath + '/package.json');\n        throw e;\n      }\n    }\n  } // Backwards compat for old node versions\n\n\n  const hasModulePathCache = !!require('module')._pathCache;\n  const Module_pathCache = Object.create(null);\n  const Module_pathCache_get = hasModulePathCache ? cacheKey => Module._pathCache[cacheKey] : cacheKey => Module_pathCache[cacheKey];\n  const Module_pathCache_set = hasModulePathCache ? (cacheKey, value) => Module._pathCache[cacheKey] = value : cacheKey => Module_pathCache[cacheKey] = value;\n  const trailingSlashRegex = /(?:^|\\/)\\.?\\.$/;\n\n  const Module_findPath = function _findPath(request, paths, isMain) {\n    const absoluteRequest = path.isAbsolute(request);\n\n    if (absoluteRequest) {\n      paths = [''];\n    } else if (!paths || paths.length === 0) {\n      return false;\n    }\n\n    const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths, '\\x00');\n    const entry = Module_pathCache_get(cacheKey);\n    if (entry) return entry;\n    let exts;\n    let trailingSlash = request.length > 0 && StringPrototypeCharCodeAt(request, request.length - 1) === CHAR_FORWARD_SLASH;\n\n    if (!trailingSlash) {\n      trailingSlash = RegExpPrototypeTest(trailingSlashRegex, request);\n    } // For each path\n\n\n    for (let i = 0; i < paths.length; i++) {\n      // Don't search further if path doesn't exist\n      const curPath = paths[i];\n      if (curPath && stat(curPath) < 1) continue;\n\n      if (!absoluteRequest) {\n        const exportsResolved = resolveExports(curPath, request);\n        if (exportsResolved) return exportsResolved;\n      }\n\n      const _basePath = path.resolve(curPath, request);\n\n      let filename;\n      const [rc, basePath] = statReplacementExtensions(_basePath);\n\n      if (!trailingSlash) {\n        if (rc === 0) {\n          // File.\n          if (!isMain) {\n            if (preserveSymlinks) {\n              filename = path.resolve(basePath);\n            } else {\n              filename = toRealPath(basePath);\n            }\n          } else if (preserveSymlinksMain) {\n            // For the main module, we use the preserveSymlinksMain flag instead\n            // mainly for backward compatibility, as the preserveSymlinks flag\n            // historically has not applied to the main module.  Most likely this\n            // was intended to keep .bin/ binaries working, as following those\n            // symlinks is usually required for the imports in the corresponding\n            // files to resolve; that said, in some use cases following symlinks\n            // causes bigger problems which is why the preserveSymlinksMain option\n            // is needed.\n            filename = path.resolve(basePath);\n          } else {\n            filename = toRealPath(basePath);\n          }\n        }\n\n        if (!filename) {\n          // Try it with each of the extensions\n          if (exts === undefined) exts = ObjectKeys(Module._extensions);\n          filename = tryExtensions(basePath, exts, isMain);\n        }\n      }\n\n      if (!filename && rc === 1) {\n        // Directory.\n        // try it with each of the extensions at \"index\"\n        if (exts === undefined) exts = ObjectKeys(Module._extensions);\n        filename = tryPackage(basePath, exts, isMain, request);\n      }\n\n      if (filename) {\n        Module_pathCache_set(cacheKey, filename);\n        return filename;\n      }\n    }\n\n    return false;\n  };\n\n  const Module_resolveFilename = function _resolveFilename(request, parent, isMain, options) {\n    if (StringPrototypeStartsWith(request, 'node:') || NativeModule.canBeRequiredByUsers(request)) {\n      return request;\n    }\n\n    let paths;\n\n    if (typeof options === 'object' && options !== null) {\n      if (ArrayIsArray(options.paths)) {\n        const isRelative = StringPrototypeStartsWith(request, './') || StringPrototypeStartsWith(request, '../') || isWindows && StringPrototypeStartsWith(request, '.\\\\') || StringPrototypeStartsWith(request, '..\\\\');\n\n        if (isRelative) {\n          paths = options.paths;\n        } else {\n          const fakeParent = new Module('', null);\n          paths = [];\n\n          for (let i = 0; i < options.paths.length; i++) {\n            const path = options.paths[i];\n            fakeParent.paths = Module._nodeModulePaths(path);\n\n            const lookupPaths = Module._resolveLookupPaths(request, fakeParent);\n\n            for (let j = 0; j < lookupPaths.length; j++) {\n              if (!ArrayPrototypeIncludes(paths, lookupPaths[j])) ArrayPrototypePush(paths, lookupPaths[j]);\n            }\n          }\n        }\n      } else if (options.paths === undefined) {\n        paths = Module._resolveLookupPaths(request, parent);\n      } else {\n        throw new ERR_INVALID_ARG_VALUE('options.paths', options.paths);\n      }\n    } else {\n      paths = Module._resolveLookupPaths(request, parent);\n    } // if (parent?.filename) {\n    // node 12 hack\n\n\n    if (parent != null && parent.filename) {\n      if (request[0] === '#') {\n        const pkg = readPackageScope(parent.filename) || {}; // if (pkg.data?.imports != null) {\n        // node 12 hack\n\n        if (pkg.data != null && pkg.data.imports != null) {\n          try {\n            return finalizeEsmResolution(packageImportsResolve(request, pathToFileURL(parent.filename), cjsConditions), parent.filename, pkg.path);\n          } catch (e) {\n            if (e.code === 'ERR_MODULE_NOT_FOUND') throw createEsmNotFoundErr(request);\n            throw e;\n          }\n        }\n      }\n    } // Try module self resolution first\n\n\n    const parentPath = trySelfParentPath(parent);\n    const selfResolved = trySelf(parentPath, request);\n\n    if (selfResolved) {\n      const cacheKey = request + '\\x00' + (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths, '\\x00'));\n      Module._pathCache[cacheKey] = selfResolved;\n      return selfResolved;\n    } // Look up the filename first, since that's the cache key.\n\n\n    const filename = Module._findPath(request, paths, isMain, false);\n\n    if (filename) return filename;\n    const requireStack = [];\n\n    for (let cursor = parent; cursor; cursor = moduleParentCache.get(cursor)) {\n      ArrayPrototypePush(requireStack, cursor.filename || cursor.id);\n    }\n\n    let message = `Cannot find module '${request}'`;\n\n    if (requireStack.length > 0) {\n      message = message + '\\nRequire stack:\\n- ' + ArrayPrototypeJoin(requireStack, '\\n- ');\n    } // eslint-disable-next-line no-restricted-syntax\n\n\n    const err = new Error(message);\n    err.code = 'MODULE_NOT_FOUND';\n    err.requireStack = requireStack;\n    throw err;\n  };\n\n  function finalizeEsmResolution(resolved, parentPath, pkgPath) {\n    if (RegExpPrototypeTest(encodedSepRegEx, resolved)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved, 'must not include encoded \"/\" or \"\\\\\" characters', parentPath);\n    const filename = fileURLToPath(resolved);\n    const actual = tryReplacementExtensions(filename) || tryFile(filename);\n    if (actual) return actual;\n    const err = createEsmNotFoundErr(filename, path.resolve(pkgPath, 'package.json'));\n    throw err;\n  }\n\n  function createEsmNotFoundErr(request, path) {\n    // eslint-disable-next-line no-restricted-syntax\n    const err = new Error(`Cannot find module '${request}'`);\n    err.code = 'MODULE_NOT_FOUND';\n    if (path) err.path = path; // TODO(BridgeAR): Add the requireStack as well.\n\n    return err;\n  }\n\n  return {\n    Module_findPath,\n    Module_resolveFilename\n  };\n}\n/**\n * copied from Module._extensions['.js']\n * https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L1113-L1120\n * @param {import('../src/index').Service} service\n * @param {NodeJS.Module} module\n * @param {string} filename\n */\n\n\nfunction assertScriptCanLoadAsCJSImpl(service, module, filename) {\n  const pkg = readPackageScope(filename); // ts-node modification: allow our configuration to override\n\n  const tsNodeClassification = service.moduleTypeClassifier.classifyModuleByModuleTypeOverrides(normalizeSlashes(filename));\n  if (tsNodeClassification.moduleType === 'cjs') return; // ignore package.json when file extension is ESM-only or CJS-only\n  // [MUST_UPDATE_FOR_NEW_FILE_EXTENSIONS]\n\n  const lastDotIndex = filename.lastIndexOf('.');\n  const ext = lastDotIndex >= 0 ? filename.slice(lastDotIndex) : '';\n  if ((ext === '.cts' || ext === '.cjs') && tsNodeClassification.moduleType === 'auto') return; // Function require shouldn't be used in ES modules.\n\n  if (ext === '.mts' || ext === '.mjs' || tsNodeClassification.moduleType === 'esm' || pkg && pkg.data && pkg.data.type === 'module') {\n    const parentPath = module.parent && module.parent.filename;\n    const packageJsonPath = pkg ? path.resolve(pkg.path, 'package.json') : null;\n    throw createErrRequireEsm(filename, parentPath, packageJsonPath);\n  }\n}\n\nmodule.exports = {\n  createCjsLoader,\n  assertScriptCanLoadAsCJSImpl,\n  readPackageScope\n};","map":{"version":3,"names":["ArrayIsArray","ArrayPrototypeIncludes","ArrayPrototypeJoin","ArrayPrototypePush","JSONParse","ObjectKeys","RegExpPrototypeTest","SafeMap","SafeWeakMap","StringPrototypeCharCodeAt","StringPrototypeEndsWith","StringPrototypeLastIndexOf","StringPrototypeIndexOf","StringPrototypeMatch","StringPrototypeSlice","StringPrototypeStartsWith","require","NativeModule","pathToFileURL","fileURLToPath","fs","path","sep","internalModuleStat","packageJsonReader","cjsConditions","getOptionValue","preserveSymlinks","preserveSymlinksMain","normalizeSlashes","createErrRequireEsm","codes","ERR_INVALID_MODULE_SPECIFIER","CHAR_FORWARD_SLASH","Module","isWindows","process","platform","statCache","stat","filename","toNamespacedPath","result","get","undefined","set","moduleParentCache","packageJsonCache","readPackage","requestPath","jsonPath","resolve","existing","read","json","containsKeys","string","parsed","filtered","name","main","exports","imports","type","e","message","readPackageScope","checkPath","rootSeparatorIndex","separatorIndex","pjson","data","createCjsLoader","opts","nodeEsmResolver","preferTsExts","replacementsForCjs","replacementsForJs","replacementsForMjs","replacementsForJsx","extensions","encodedSepRegEx","packageExportsResolve","packageImportsResolve","tryPackage","exts","isMain","originalPath","tmp","pkg","tryExtensions","actual","tryReplacementExtensions","tryFile","err","Error","code","emitWarning","realpathCache","rc","toRealPath","realpathSync","statReplacementExtensions","p","lastDotIndex","lastIndexOf","ext","slice","pathnameWithoutExtension","replacementExts","i","length","trySelfParentPath","parent","id","cwd","trySelf","parentPath","request","pkgPath","expansion","finalizeEsmResolution","resolved","createEsmNotFoundErr","EXPORTS_PATTERN","resolveExports","nmPath","hasModulePathCache","_pathCache","Module_pathCache","Object","create","Module_pathCache_get","cacheKey","Module_pathCache_set","value","trailingSlashRegex","Module_findPath","_findPath","paths","absoluteRequest","isAbsolute","entry","trailingSlash","curPath","exportsResolved","_basePath","basePath","_extensions","Module_resolveFilename","_resolveFilename","options","canBeRequiredByUsers","isRelative","fakeParent","_nodeModulePaths","lookupPaths","_resolveLookupPaths","j","ERR_INVALID_ARG_VALUE","selfResolved","requireStack","cursor","assertScriptCanLoadAsCJSImpl","service","module","tsNodeClassification","moduleTypeClassifier","classifyModuleByModuleTypeOverrides","moduleType","packageJsonPath"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/ts-node/dist-raw/node-internal-modules-cjs-loader.js"],"sourcesContent":["// Copied from several files in node's source code.\n// https://github.com/nodejs/node/blob/2d5d77306f6dff9110c1f77fefab25f973415770/lib/internal/modules/cjs/loader.js\n// Each function and variable below must have a comment linking to the source in node's github repo.\n\n'use strict';\n\nconst {\n  ArrayIsArray,\n  ArrayPrototypeIncludes,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  JSONParse,\n  ObjectKeys,\n  RegExpPrototypeTest,\n  SafeMap,\n  SafeWeakMap,\n  StringPrototypeCharCodeAt,\n  StringPrototypeEndsWith,\n  StringPrototypeLastIndexOf,\n  StringPrototypeIndexOf,\n  StringPrototypeMatch,\n  StringPrototypeSlice,\n  StringPrototypeStartsWith,\n} = require('./node-primordials');\nconst { NativeModule } = require('./node-nativemodule');\nconst { pathToFileURL, fileURLToPath } = require('url');\nconst fs = require('fs');\nconst path = require('path');\nconst { sep } = path;\nconst { internalModuleStat } = require('./node-internalBinding-fs');\nconst packageJsonReader = require('./node-internal-modules-package_json_reader');\nconst {\n  cjsConditions,\n} = require('./node-internal-modules-cjs-helpers');\nconst { getOptionValue } = require('./node-options');\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\nconst {normalizeSlashes} = require('../dist/util');\nconst {createErrRequireEsm} = require('./node-internal-errors');\nconst {\n  codes: {\n    ERR_INVALID_MODULE_SPECIFIER,\n  },\n} = require('./node-internal-errors');\n\nconst {\n  CHAR_FORWARD_SLASH,\n} = require('./node-internal-constants');\n\nconst Module = require('module');\n\nconst isWindows = process.platform === 'win32';\n\nlet statCache = null;\n\nfunction stat(filename) {\n  filename = path.toNamespacedPath(filename);\n  if (statCache !== null) {\n    const result = statCache.get(filename);\n    if (result !== undefined) return result;\n  }\n  const result = internalModuleStat(filename);\n  if (statCache !== null && result >= 0) {\n    // Only set cache when `internalModuleStat(filename)` succeeds.\n    statCache.set(filename, result);\n  }\n  return result;\n}\n\n// Note:\n// we cannot get access to node's internal cache, which is populated from\n// within node's Module constructor.  So the cache here will always be empty.\n// It's possible we could approximate our own cache by building it up with\n// hacky workarounds, but it's not worth the complexity and flakiness.\nconst moduleParentCache = new SafeWeakMap();\n\n// Given a module name, and a list of paths to test, returns the first\n// matching file in the following precedence.\n//\n// require(\"a.<ext>\")\n//   -> a.<ext>\n//\n// require(\"a\")\n//   -> a\n//   -> a.<ext>\n//   -> a/index.<ext>\n\nconst packageJsonCache = new SafeMap();\n\nfunction readPackage(requestPath) {\n  const jsonPath = path.resolve(requestPath, 'package.json');\n\n  const existing = packageJsonCache.get(jsonPath);\n  if (existing !== undefined) return existing;\n\n  const result = packageJsonReader.read(jsonPath);\n  const json = result.containsKeys === false ? '{}' : result.string;\n  if (json === undefined) {\n    packageJsonCache.set(jsonPath, false);\n    return false;\n  }\n\n  try {\n    const parsed = JSONParse(json);\n    const filtered = {\n      name: parsed.name,\n      main: parsed.main,\n      exports: parsed.exports,\n      imports: parsed.imports,\n      type: parsed.type\n    };\n    packageJsonCache.set(jsonPath, filtered);\n    return filtered;\n  } catch (e) {\n    e.path = jsonPath;\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\n    throw e;\n  }\n}\n\nfunction readPackageScope(checkPath) {\n  const rootSeparatorIndex = StringPrototypeIndexOf(checkPath, sep);\n  let separatorIndex;\n  do {\n    separatorIndex = StringPrototypeLastIndexOf(checkPath, sep);\n    checkPath = StringPrototypeSlice(checkPath, 0, separatorIndex);\n    if (StringPrototypeEndsWith(checkPath, sep + 'node_modules'))\n      return false;\n    const pjson = readPackage(checkPath + sep);\n    if (pjson) return {\n      data: pjson,\n      path: checkPath,\n    };\n  } while (separatorIndex > rootSeparatorIndex);\n  return false;\n}\n\n/**\n * @param {{\n *   nodeEsmResolver: ReturnType<typeof import('./node-internal-modules-esm-resolve').createResolve>,\n *   extensions: import('../src/file-extensions').Extensions,\n *   preferTsExts\n * }} opts\n */\nfunction createCjsLoader(opts) {\nconst {nodeEsmResolver, preferTsExts} = opts;\nconst {replacementsForCjs, replacementsForJs, replacementsForMjs, replacementsForJsx} = opts.extensions;\nconst {\n  encodedSepRegEx,\n  packageExportsResolve,\n  packageImportsResolve\n} = nodeEsmResolver;\n\nfunction tryPackage(requestPath, exts, isMain, originalPath) {\n  // const pkg = readPackage(requestPath)?.main;\n  const tmp = readPackage(requestPath)\n  const pkg = tmp != null ? tmp.main : undefined;\n\n  if (!pkg) {\n    return tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\n  }\n\n  const filename = path.resolve(requestPath, pkg);\n  let actual = tryReplacementExtensions(filename, isMain) ||\n    tryFile(filename, isMain) ||\n    tryExtensions(filename, exts, isMain) ||\n    tryExtensions(path.resolve(filename, 'index'), exts, isMain);\n  if (actual === false) {\n    actual = tryExtensions(path.resolve(requestPath, 'index'), exts, isMain);\n    if (!actual) {\n      // eslint-disable-next-line no-restricted-syntax\n      const err = new Error(\n        `Cannot find module '${filename}'. ` +\n        'Please verify that the package.json has a valid \"main\" entry'\n      );\n      err.code = 'MODULE_NOT_FOUND';\n      err.path = path.resolve(requestPath, 'package.json');\n      err.requestPath = originalPath;\n      // TODO(BridgeAR): Add the requireStack as well.\n      throw err;\n    } else {\n      const jsonPath = path.resolve(requestPath, 'package.json');\n      process.emitWarning(\n        `Invalid 'main' field in '${jsonPath}' of '${pkg}'. ` +\n          'Please either fix that or report it to the module author',\n        'DeprecationWarning',\n        'DEP0128'\n      );\n    }\n  }\n  return actual;\n}\n\n// In order to minimize unnecessary lstat() calls,\n// this cache is a list of known-real paths.\n// Set to an empty Map to reset.\nconst realpathCache = new SafeMap();\n\n// Check if the file exists and is not a directory\n// if using --preserve-symlinks and isMain is false,\n// keep symlinks intact, otherwise resolve to the\n// absolute realpath.\nfunction tryFile(requestPath, isMain) {\n  const rc = stat(requestPath);\n  if (rc !== 0) return;\n  if (preserveSymlinks && !isMain) {\n    return path.resolve(requestPath);\n  }\n  return toRealPath(requestPath);\n}\n\nfunction toRealPath(requestPath) {\n  return fs.realpathSync(requestPath, {\n    // [internalFS.realpathCacheKey]: realpathCache\n  });\n}\n\nfunction statReplacementExtensions(p) {\n  const lastDotIndex = p.lastIndexOf('.');\n  if(lastDotIndex >= 0) {\n    const ext = p.slice(lastDotIndex);\n    if (ext === '.js' || ext === '.jsx' || ext === '.mjs' || ext === '.cjs') {\n      const pathnameWithoutExtension = p.slice(0, lastDotIndex);\n      const replacementExts =\n        ext === '.js' ? replacementsForJs\n        : ext === '.jsx' ? replacementsForJsx\n        : ext === '.mjs' ? replacementsForMjs\n        : replacementsForCjs;\n      for (let i = 0; i < replacementExts.length; i++) {\n        const filename = pathnameWithoutExtension + replacementExts[i];\n        const rc = stat(filename);\n        if (rc === 0) {\n          return [rc, filename];\n        }\n      }\n    }\n  }\n  return [stat(p), p];\n}\nfunction tryReplacementExtensions(p, isMain) {\n  const lastDotIndex = p.lastIndexOf('.');\n  if(lastDotIndex >= 0) {\n    const ext = p.slice(lastDotIndex);\n    if (ext === '.js' || ext === '.jsx' || ext === '.mjs' || ext === '.cjs') {\n      const pathnameWithoutExtension = p.slice(0, lastDotIndex);\n      const replacementExts =\n        ext === '.js' ? replacementsForJs\n        : ext === '.jsx' ? replacementsForJsx\n        : ext === '.mjs' ? replacementsForMjs\n        : replacementsForCjs;\n      for (let i = 0; i < replacementExts.length; i++) {\n        const filename = tryFile(pathnameWithoutExtension + replacementExts[i], isMain);\n        if (filename) {\n          return filename;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Given a path, check if the file exists with any of the set extensions\nfunction tryExtensions(p, exts, isMain) {\n  for (let i = 0; i < exts.length; i++) {\n    const filename = tryFile(p + exts[i], isMain);\n\n    if (filename) {\n      return filename;\n    }\n  }\n  return false;\n}\n\nfunction trySelfParentPath(parent) {\n  if (!parent) return false;\n\n  if (parent.filename) {\n    return parent.filename;\n  } else if (parent.id === '<repl>' || parent.id === 'internal/preload') {\n    try {\n      return process.cwd() + path.sep;\n    } catch {\n      return false;\n    }\n  }\n}\n\nfunction trySelf(parentPath, request) {\n  if (!parentPath) return false;\n\n  const { data: pkg, path: pkgPath } = readPackageScope(parentPath) || {};\n  if (!pkg || pkg.exports === undefined) return false;\n  if (typeof pkg.name !== 'string') return false;\n\n  let expansion;\n  if (request === pkg.name) {\n    expansion = '.';\n  } else if (StringPrototypeStartsWith(request, `${pkg.name}/`)) {\n    expansion = '.' + StringPrototypeSlice(request, pkg.name.length);\n  } else {\n    return false;\n  }\n\n  try {\n    return finalizeEsmResolution(packageExportsResolve(\n      pathToFileURL(pkgPath + '/package.json'), expansion, pkg,\n      pathToFileURL(parentPath), cjsConditions).resolved, parentPath, pkgPath);\n  } catch (e) {\n    if (e.code === 'ERR_MODULE_NOT_FOUND')\n      throw createEsmNotFoundErr(request, pkgPath + '/package.json');\n    throw e;\n  }\n}\n\n// This only applies to requests of a specific form:\n// 1. name/.*\n// 2. @scope/name/.*\nconst EXPORTS_PATTERN = /^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$/;\nfunction resolveExports(nmPath, request) {\n  // The implementation's behavior is meant to mirror resolution in ESM.\n  const { 1: name, 2: expansion = '' } =\n    StringPrototypeMatch(request, EXPORTS_PATTERN) || [];\n  if (!name)\n    return;\n  const pkgPath = path.resolve(nmPath, name);\n  const pkg = readPackage(pkgPath);\n  // if (pkg?.exports != null) {\n  if (pkg != null && pkg.exports != null) {\n    try {\n      return finalizeEsmResolution(packageExportsResolve(\n        pathToFileURL(pkgPath + '/package.json'), '.' + expansion, pkg, null,\n        cjsConditions).resolved, null, pkgPath);\n    } catch (e) {\n      if (e.code === 'ERR_MODULE_NOT_FOUND')\n        throw createEsmNotFoundErr(request, pkgPath + '/package.json');\n      throw e;\n    }\n  }\n}\n\n// Backwards compat for old node versions\nconst hasModulePathCache = !!require('module')._pathCache;\nconst Module_pathCache = Object.create(null);\nconst Module_pathCache_get = hasModulePathCache ? (cacheKey) => Module._pathCache[cacheKey] : (cacheKey) => Module_pathCache[cacheKey];\nconst Module_pathCache_set = hasModulePathCache ? (cacheKey, value) => (Module._pathCache[cacheKey] = value) : (cacheKey) => (Module_pathCache[cacheKey] = value);\n\nconst trailingSlashRegex = /(?:^|\\/)\\.?\\.$/;\nconst Module_findPath = function _findPath(request, paths, isMain) {\n  const absoluteRequest = path.isAbsolute(request);\n  if (absoluteRequest) {\n    paths = [''];\n  } else if (!paths || paths.length === 0) {\n    return false;\n  }\n\n  const cacheKey = request + '\\x00' + ArrayPrototypeJoin(paths, '\\x00');\n  const entry = Module_pathCache_get(cacheKey);\n  if (entry)\n    return entry;\n\n  let exts;\n  let trailingSlash = request.length > 0 &&\n    StringPrototypeCharCodeAt(request, request.length - 1) ===\n    CHAR_FORWARD_SLASH;\n  if (!trailingSlash) {\n    trailingSlash = RegExpPrototypeTest(trailingSlashRegex, request);\n  }\n\n  // For each path\n  for (let i = 0; i < paths.length; i++) {\n    // Don't search further if path doesn't exist\n    const curPath = paths[i];\n    if (curPath && stat(curPath) < 1) continue;\n\n    if (!absoluteRequest) {\n      const exportsResolved = resolveExports(curPath, request);\n      if (exportsResolved)\n        return exportsResolved;\n    }\n\n    const _basePath = path.resolve(curPath, request);\n    let filename;\n\n    const [rc, basePath] = statReplacementExtensions(_basePath);\n    if (!trailingSlash) {\n      if (rc === 0) {  // File.\n        if (!isMain) {\n          if (preserveSymlinks) {\n            filename = path.resolve(basePath);\n          } else {\n            filename = toRealPath(basePath);\n          }\n        } else if (preserveSymlinksMain) {\n          // For the main module, we use the preserveSymlinksMain flag instead\n          // mainly for backward compatibility, as the preserveSymlinks flag\n          // historically has not applied to the main module.  Most likely this\n          // was intended to keep .bin/ binaries working, as following those\n          // symlinks is usually required for the imports in the corresponding\n          // files to resolve; that said, in some use cases following symlinks\n          // causes bigger problems which is why the preserveSymlinksMain option\n          // is needed.\n          filename = path.resolve(basePath);\n        } else {\n          filename = toRealPath(basePath);\n        }\n      }\n\n      if (!filename) {\n        // Try it with each of the extensions\n        if (exts === undefined)\n          exts = ObjectKeys(Module._extensions);\n        filename = tryExtensions(basePath, exts, isMain);\n      }\n    }\n\n    if (!filename && rc === 1) {  // Directory.\n      // try it with each of the extensions at \"index\"\n      if (exts === undefined)\n        exts = ObjectKeys(Module._extensions);\n      filename = tryPackage(basePath, exts, isMain, request);\n    }\n\n    if (filename) {\n      Module_pathCache_set(cacheKey, filename);\n      return filename;\n    }\n  }\n\n  return false;\n};\n\nconst Module_resolveFilename = function _resolveFilename(request, parent, isMain, options) {\n  if (StringPrototypeStartsWith(request, 'node:') ||\n      NativeModule.canBeRequiredByUsers(request)) {\n    return request;\n  }\n\n  let paths;\n\n  if (typeof options === 'object' && options !== null) {\n    if (ArrayIsArray(options.paths)) {\n      const isRelative = StringPrototypeStartsWith(request, './') ||\n          StringPrototypeStartsWith(request, '../') ||\n          ((isWindows && StringPrototypeStartsWith(request, '.\\\\')) ||\n          StringPrototypeStartsWith(request, '..\\\\'));\n\n      if (isRelative) {\n        paths = options.paths;\n      } else {\n        const fakeParent = new Module('', null);\n\n        paths = [];\n\n        for (let i = 0; i < options.paths.length; i++) {\n          const path = options.paths[i];\n          fakeParent.paths = Module._nodeModulePaths(path);\n          const lookupPaths = Module._resolveLookupPaths(request, fakeParent);\n\n          for (let j = 0; j < lookupPaths.length; j++) {\n            if (!ArrayPrototypeIncludes(paths, lookupPaths[j]))\n              ArrayPrototypePush(paths, lookupPaths[j]);\n          }\n        }\n      }\n    } else if (options.paths === undefined) {\n      paths = Module._resolveLookupPaths(request, parent);\n    } else {\n      throw new ERR_INVALID_ARG_VALUE('options.paths', options.paths);\n    }\n  } else {\n    paths = Module._resolveLookupPaths(request, parent);\n  }\n\n  // if (parent?.filename) {\n  // node 12 hack\n  if (parent != null && parent.filename) {\n    if (request[0] === '#') {\n      const pkg = readPackageScope(parent.filename) || {};\n\n      // if (pkg.data?.imports != null) {\n      // node 12 hack\n      if (pkg.data != null && pkg.data.imports != null) {\n        try {\n          return finalizeEsmResolution(\n            packageImportsResolve(request, pathToFileURL(parent.filename),\n                                  cjsConditions), parent.filename,\n            pkg.path);\n        } catch (e) {\n          if (e.code === 'ERR_MODULE_NOT_FOUND')\n            throw createEsmNotFoundErr(request);\n          throw e;\n        }\n      }\n    }\n  }\n\n  // Try module self resolution first\n  const parentPath = trySelfParentPath(parent);\n  const selfResolved = trySelf(parentPath, request);\n  if (selfResolved) {\n    const cacheKey = request + '\\x00' +\n         (paths.length === 1 ? paths[0] : ArrayPrototypeJoin(paths, '\\x00'));\n    Module._pathCache[cacheKey] = selfResolved;\n    return selfResolved;\n  }\n\n  // Look up the filename first, since that's the cache key.\n  const filename = Module._findPath(request, paths, isMain, false);\n  if (filename) return filename;\n  const requireStack = [];\n  for (let cursor = parent;\n    cursor;\n    cursor = moduleParentCache.get(cursor)) {\n    ArrayPrototypePush(requireStack, cursor.filename || cursor.id);\n  }\n  let message = `Cannot find module '${request}'`;\n  if (requireStack.length > 0) {\n    message = message + '\\nRequire stack:\\n- ' +\n              ArrayPrototypeJoin(requireStack, '\\n- ');\n  }\n  // eslint-disable-next-line no-restricted-syntax\n  const err = new Error(message);\n  err.code = 'MODULE_NOT_FOUND';\n  err.requireStack = requireStack;\n  throw err;\n};\n\nfunction finalizeEsmResolution(resolved, parentPath, pkgPath) {\n  if (RegExpPrototypeTest(encodedSepRegEx, resolved))\n    throw new ERR_INVALID_MODULE_SPECIFIER(\n      resolved, 'must not include encoded \"/\" or \"\\\\\" characters', parentPath);\n  const filename = fileURLToPath(resolved);\n  const actual = tryReplacementExtensions(filename) || tryFile(filename);\n  if (actual)\n    return actual;\n  const err = createEsmNotFoundErr(filename,\n                                   path.resolve(pkgPath, 'package.json'));\n  throw err;\n}\n\nfunction createEsmNotFoundErr(request, path) {\n  // eslint-disable-next-line no-restricted-syntax\n  const err = new Error(`Cannot find module '${request}'`);\n  err.code = 'MODULE_NOT_FOUND';\n  if (path)\n    err.path = path;\n  // TODO(BridgeAR): Add the requireStack as well.\n  return err;\n}\n\n\nreturn {\n  Module_findPath,\n  Module_resolveFilename\n}\n\n}\n\n/**\n * copied from Module._extensions['.js']\n * https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/cjs/loader.js#L1113-L1120\n * @param {import('../src/index').Service} service\n * @param {NodeJS.Module} module\n * @param {string} filename\n */\nfunction assertScriptCanLoadAsCJSImpl(service, module, filename) {\n  const pkg = readPackageScope(filename);\n\n  // ts-node modification: allow our configuration to override\n  const tsNodeClassification = service.moduleTypeClassifier.classifyModuleByModuleTypeOverrides(normalizeSlashes(filename));\n  if(tsNodeClassification.moduleType === 'cjs') return;\n\n  // ignore package.json when file extension is ESM-only or CJS-only\n  // [MUST_UPDATE_FOR_NEW_FILE_EXTENSIONS]\n  const lastDotIndex = filename.lastIndexOf('.');\n  const ext = lastDotIndex >= 0 ? filename.slice(lastDotIndex) : '';\n\n  if((ext === '.cts' || ext === '.cjs') && tsNodeClassification.moduleType === 'auto') return;\n\n  // Function require shouldn't be used in ES modules.\n  if (ext === '.mts' || ext === '.mjs' || tsNodeClassification.moduleType === 'esm' || (pkg && pkg.data && pkg.data.type === 'module')) {\n    const parentPath = module.parent && module.parent.filename;\n    const packageJsonPath = pkg ? path.resolve(pkg.path, 'package.json') : null;\n    throw createErrRequireEsm(filename, parentPath, packageJsonPath);\n  }\n}\n\n\nmodule.exports = {\n  createCjsLoader,\n  assertScriptCanLoadAsCJSImpl,\n  readPackageScope\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}