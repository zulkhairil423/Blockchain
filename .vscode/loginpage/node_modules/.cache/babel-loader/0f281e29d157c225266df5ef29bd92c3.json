{"ast":null,"code":"import { SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\n\nvar Session =\n/** @class */\nfunction () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.timestamp = Date.now();\n    this.started = Date.now();\n    this.duration = 0;\n    this.status = SessionStatus.Ok;\n\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n\n\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n\n    if (context.did) {\n      this.did = \"\" + context.did;\n    }\n\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n\n    if (context.release) {\n      this.release = context.release;\n    }\n\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({\n        status: SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n\n\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n\n  return Session;\n}();\n\nexport { Session };","map":{"version":3,"mappings":"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","names":["SessionStatus","dropUndefinedKeys","uuid4","context","Date","now","Ok","update","Session","user","ip_address","ipAddress","did","id","email","username","timestamp","sid","length","started","duration","release","environment","userAgent","errors","status","Exited","init","toISOString","undefined","attrs","user_agent"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\hub\\src\\session.ts"],"sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number = Date.now();\n  public started: number = Date.now();\n  public duration: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n\n  constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}