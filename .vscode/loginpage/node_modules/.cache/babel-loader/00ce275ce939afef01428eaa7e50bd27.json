{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = global.async || {});\n})(this, function (exports) {\n  'use strict';\n\n  function slice(arrayLike, start) {\n    start = start | 0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n\n    for (var idx = 0; idx < newLen; idx++) {\n      newArr[idx] = arrayLike[start + idx];\n    }\n\n    return newArr;\n  }\n  /**\n   * Creates a continuation function with some arguments already applied.\n   *\n   * Useful as a shorthand when combined with other control flow functions. Any\n   * arguments passed to the returned function are added to the arguments\n   * originally passed to apply.\n   *\n   * @name apply\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {Function} fn - The function you want to eventually apply all\n   * arguments to. Invokes with (arguments...).\n   * @param {...*} arguments... - Any number of arguments to automatically apply\n   * when the continuation is called.\n   * @returns {Function} the partially-applied function\n   * @example\n   *\n   * // using apply\n   * async.parallel([\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\n   * ]);\n   *\n   *\n   * // the same process without using apply\n   * async.parallel([\n   *     function(callback) {\n   *         fs.writeFile('testfile1', 'test1', callback);\n   *     },\n   *     function(callback) {\n   *         fs.writeFile('testfile2', 'test2', callback);\n   *     }\n   * ]);\n   *\n   * // It's possible to pass any number of additional arguments when calling the\n   * // continuation:\n   *\n   * node> var fn = async.apply(sys.puts, 'one');\n   * node> fn('two', 'three');\n   * one\n   * two\n   * three\n   */\n\n\n  var apply = function (fn\n  /*, ...args*/\n  ) {\n    var args = slice(arguments, 1);\n    return function\n      /*callArgs*/\n    () {\n      var callArgs = slice(arguments);\n      return fn.apply(null, args.concat(callArgs));\n    };\n  };\n\n  var initialParams = function (fn) {\n    return function\n      /*...args, callback*/\n    () {\n      var args = slice(arguments);\n      var callback = args.pop();\n      fn.call(this, args, callback);\n    };\n  };\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n\n\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n\n  function wrap(defer) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      defer(function () {\n        fn.apply(null, args);\n      });\n    };\n  }\n\n  var _defer;\n\n  if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n\n  var setImmediate$1 = wrap(_defer);\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n\n  function asyncify(func) {\n    return initialParams(function (args, callback) {\n      var result;\n\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      } // if result is Promise object\n\n\n      if (isObject(result) && typeof result.then === 'function') {\n        result.then(function (value) {\n          invokeCallback(callback, null, value);\n        }, function (err) {\n          invokeCallback(callback, err.message ? err : new Error(err));\n        });\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (e) {\n      setImmediate$1(rethrow, e);\n    }\n  }\n\n  function rethrow(error) {\n    throw error;\n  }\n\n  var supportsSymbol = typeof Symbol === 'function';\n\n  function isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n\n  function wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n\n  function applyEach$1(eachfn) {\n    return function (fns\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      var go = initialParams(function (args, callback) {\n        var that = this;\n        return eachfn(fns, function (fn, cb) {\n          wrapAsync(fn).apply(that, args.concat(cb));\n        }, callback);\n      });\n\n      if (args.length) {\n        return go.apply(this, args);\n      } else {\n        return go;\n      }\n    };\n  }\n  /** Detect free variable `global` from Node.js. */\n\n\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n  /** Detect free variable `self`. */\n\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n  /** Used as a reference to the global object. */\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n  /** Built-in value references. */\n\n  var Symbol$1 = root.Symbol;\n  /** Used for built-in method references. */\n\n  var objectProto = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var nativeObjectToString = objectProto.toString;\n  /** Built-in value references. */\n\n  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n        tag = value[symToStringTag$1];\n\n    try {\n      value[symToStringTag$1] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$1 = Object.prototype;\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n\n  var nativeObjectToString$1 = objectProto$1.toString;\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n\n  function objectToString(value) {\n    return nativeObjectToString$1.call(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var nullTag = '[object Null]';\n  var undefinedTag = '[object Undefined]';\n  /** Built-in value references. */\n\n  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  /** `Object#toString` result references. */\n\n\n  var asyncTag = '[object AsyncFunction]';\n  var funcTag = '[object Function]';\n  var genTag = '[object GeneratorFunction]';\n  var proxyTag = '[object Proxy]';\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    } // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n\n\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  } // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n\n\n  var breakLoop = {};\n  /**\n   * This method returns `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.3.0\n   * @category Util\n   * @example\n   *\n   * _.times(2, _.noop);\n   * // => [undefined, undefined]\n   */\n\n  function noop() {// No operation performed.\n  }\n\n  function once(fn) {\n    return function () {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\n  var getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n  };\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n\n\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n\n    return result;\n  }\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n\n\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag = '[object Arguments]';\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$3 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n  /** Built-in value references. */\n\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n\n  var isArray = Array.isArray;\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n\n  function stubFalse() {\n    return false;\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  /** Built-in value references. */\n\n  var Buffer = moduleExports ? root.Buffer : undefined;\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n\n  var isBuffer = nativeIsBuffer || stubFalse;\n  /** Used as references for various `Number` constants. */\n\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n  /** Used to detect unsigned integer values. */\n\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  /** `Object#toString` result references. */\n\n\n  var argsTag$1 = '[object Arguments]';\n  var arrayTag = '[object Array]';\n  var boolTag = '[object Boolean]';\n  var dateTag = '[object Date]';\n  var errorTag = '[object Error]';\n  var funcTag$1 = '[object Function]';\n  var mapTag = '[object Map]';\n  var numberTag = '[object Number]';\n  var objectTag = '[object Object]';\n  var regexpTag = '[object RegExp]';\n  var setTag = '[object Set]';\n  var stringTag = '[object String]';\n  var weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]';\n  var dataViewTag = '[object DataView]';\n  var float32Tag = '[object Float32Array]';\n  var float64Tag = '[object Float64Array]';\n  var int8Tag = '[object Int8Array]';\n  var int16Tag = '[object Int16Array]';\n  var int32Tag = '[object Int32Array]';\n  var uint8Tag = '[object Uint8Array]';\n  var uint8ClampedTag = '[object Uint8ClampedArray]';\n  var uint16Tag = '[object Uint16Array]';\n  var uint32Tag = '[object Uint32Array]';\n  /** Used to identify `toStringTag` values of typed arrays. */\n\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n\n\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  /** Detect free variable `exports`. */\n\n\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n  /** Detect the popular CommonJS extension `module.exports`. */\n\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n  /** Detect free variable `process` from Node.js. */\n\n  var freeProcess = moduleExports$1 && freeGlobal.process;\n  /** Used to access faster Node.js helpers. */\n\n  var nodeUtil = function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n      if (types) {\n        return types;\n      } // Legacy `process.binding('util')` for Node.js < 10.\n\n\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n  /* Node.js helper references. */\n\n\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  /** Used for built-in method references. */\n\n  var objectProto$2 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /** Used for built-in method references. */\n\n\n  var objectProto$5 = Object.prototype;\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;\n    return value === proto;\n  }\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n\n\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeKeys = overArg(Object.keys, Object);\n  /** Used for built-in method references. */\n\n  var objectProto$4 = Object.prototype;\n  /** Used to check objects for own properties. */\n\n  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n\n    var result = [];\n\n    for (var key in Object(object)) {\n      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n\n\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n\n  function createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      return i < len ? {\n        value: obj[key],\n        key: key\n      } : null;\n    };\n  }\n\n  function iterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n\n  function onlyOnce(fn) {\n    return function () {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n\n  function _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n      callback = once(callback || noop);\n\n      if (limit <= 0 || !obj) {\n        return callback(null);\n      }\n\n      var nextElem = iterator(obj);\n      var done = false;\n      var running = 0;\n      var looping = false;\n\n      function iterateeCallback(err, value) {\n        running -= 1;\n\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n\n      function replenish() {\n        looping = true;\n\n        while (running < limit && !done) {\n          var elem = nextElem();\n\n          if (elem === null) {\n            done = true;\n\n            if (running <= 0) {\n              callback(null);\n            }\n\n            return;\n          }\n\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n\n        looping = false;\n      }\n\n      replenish();\n    };\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  function eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n\n  function doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n      return fn(iterable, limit, iteratee, callback);\n    };\n  } // eachOf implementation optimized for array-likes\n\n\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n\n    if (length === 0) {\n      callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n  var eachOfGeneric = doLimit(eachOfLimit, Infinity);\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @example\n   *\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n   * var configs = {};\n   *\n   * async.forEachOf(obj, function (value, key, callback) {\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n   *         if (err) return callback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }, function (err) {\n   *     if (err) console.error(err.message);\n   *     // configs is now a map of JSON data\n   *     doSomethingWith(configs);\n   * });\n   */\n\n  var eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  };\n\n  function doParallel(fn) {\n    return function (obj, iteratee, callback) {\n      return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n  }\n\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n      var index = counter++;\n\n      _iteratee(value, function (err, v) {\n        results[index] = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\n   * Produces a new collection of values by mapping each value in `coll` through\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\n   * and a callback for when it has finished processing. Each of these callback\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n   * `iteratee` passes an error to its callback, the main `callback` (for the\n   * `map` function) is immediately called with the error.\n   *\n   * Note, that since this function applies the `iteratee` to each item in\n   * parallel, there is no guarantee that the `iteratee` functions will complete\n   * in order. However, the results array will be in the same order as the\n   * original `coll`.\n   *\n   * If `map` is passed an Object, the results will be an Array.  The results\n   * will roughly be in the order of the original Objects' keys (but this can\n   * vary across JavaScript engines).\n   *\n   * @name map\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an Array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @example\n   *\n   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n   *     // results is now an array of stats for each file\n   * });\n   */\n\n\n  var map = doParallel(_asyncMap);\n  /**\n   * Applies the provided arguments to each function in the array, calling\n   * `callback` after all functions have completed. If you only provide the first\n   * argument, `fns`, then it will return a function which lets you pass in the\n   * arguments as if it were a single function call. If more arguments are\n   * provided, `callback` is required while `args` is still optional.\n   *\n   * @name applyEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n   * to all call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {Function} - If only the first argument, `fns`, is provided, it will\n   * return a function which lets you pass in the arguments as if it were a single\n   * function call. The signature is `(..args, callback)`. If invoked with any\n   * arguments, `callback` is required.\n   * @example\n   *\n   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n   *\n   * // partial application example:\n   * async.each(\n   *     buckets,\n   *     async.applyEach([enableSearch, updateSchema]),\n   *     callback\n   * );\n   */\n\n  var applyEach = applyEach$1(map);\n\n  function doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n      return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n  }\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name mapLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   */\n\n\n  var mapLimit = doParallelLimit(_asyncMap);\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n   *\n   * @name mapSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   */\n\n  var mapSeries = doLimit(mapLimit, 1);\n  /**\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n   *\n   * @name applyEachSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n   * @category Control Flow\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n   * call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {Function} - If only the first argument is provided, it will return\n   * a function which lets you pass in the arguments as if it were a single\n   * function call.\n   */\n\n  var applyEachSeries = applyEach$1(mapSeries);\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n\n\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n\n      return object;\n    };\n  }\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n\n\n  var baseFor = createBaseFor();\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n\n\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n\n\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  /**\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n   * their requirements. Each function can optionally depend on other functions\n   * being completed first, and each function is run as soon as its requirements\n   * are satisfied.\n   *\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n   * will stop. Further tasks will not execute (so any other functions depending\n   * on it will not run), and the main `callback` is immediately called with the\n   * error.\n   *\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\n   * have completed so far as the first argument, if they have dependencies. If a\n   * task function has no dependencies, it will only be passed a callback.\n   *\n   * @name auto\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Object} tasks - An object. Each of its properties is either a\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n   * in the array. The object's key of a property serves as the name of the task\n   * defined by that property, i.e. can be used when specifying requirements for\n   * other tasks. The function receives one or two arguments:\n   * * a `results` object, containing the results of the previously executed\n   *   functions, only passed if the task has any dependencies,\n   * * a `callback(err, result)` function, which must be called when finished,\n   *   passing an `error` (which can be `null`) and the result of the function's\n   *   execution.\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\n   * determining the maximum number of tasks that can be run in parallel. By\n   * default, as many as possible.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback. Results are always returned; however, if an\n   * error occurs, no further `tasks` will be performed, and the results object\n   * will only contain partial results. Invoked with (err, results).\n   * @returns undefined\n   * @example\n   *\n   * async.auto({\n   *     // this function will just be passed a callback\n   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n   *     showData: ['readData', function(results, cb) {\n   *         // results.readData is the file's contents\n   *         // ...\n   *     }]\n   * }, callback);\n   *\n   * async.auto({\n   *     get_data: function(callback) {\n   *         console.log('in get_data');\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         console.log('in make_folder');\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         console.log('in write_file', JSON.stringify(results));\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         console.log('in email_link', JSON.stringify(results));\n   *         // once the file is written let's email a link to it...\n   *         // results.write_file contains the filename returned by write_file.\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('results = ', results);\n   * });\n   */\n\n\n  var auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n\n    if (!numTasks) {\n      return callback(null);\n    }\n\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = []; // for cycle detection:\n\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n\n    var uncheckedDependencies = {};\n    baseForOwn(tasks, function (task, key) {\n      if (!isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n\n      uncheckedDependencies[key] = remainingDependencies;\n      arrayEach(dependencies, function (dependencyName) {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n\n        addListener(dependencyName, function () {\n          remainingDependencies--;\n\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n      readyTasks.push(function () {\n        runTask(key, task);\n      });\n    }\n\n    function processQueue() {\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n\n      taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      arrayEach(taskListeners, function (fn) {\n        fn();\n      });\n      processQueue();\n    }\n\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce(function (err, result) {\n        runningTasks--;\n\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        if (err) {\n          var safeResults = {};\n          baseForOwn(results, function (val, rkey) {\n            safeResults[rkey] = val;\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        arrayEach(getDependents(currentTask), function (dependent) {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n\n    function getDependents(taskName) {\n      var result = [];\n      baseForOwn(tasks, function (task, key) {\n        if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n  };\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n\n\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n\n    return result;\n  }\n  /** `Object#toString` result references. */\n\n\n  var symbolTag = '[object Symbol]';\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n  /** Used as references for various `Number` constants. */\n\n\n  var INFINITY = 1 / 0;\n  /** Used to convert symbols to primitives and strings. */\n\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\n  var symbolToString = symbolProto ? symbolProto.toString : undefined;\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n  /**\n   * The base implementation of `_.slice` without an iteratee call guard.\n   *\n   * @private\n   * @param {Array} array The array to slice.\n   * @param {number} [start=0] The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the slice of `array`.\n   */\n\n\n  function baseSlice(array, start, end) {\n    var index = -1,\n        length = array.length;\n\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n\n    end = end > length ? length : end;\n\n    if (end < 0) {\n      end += length;\n    }\n\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n\n    return result;\n  }\n  /**\n   * Casts `array` to a slice if it's needed.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {number} start The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the cast slice.\n   */\n\n\n  function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : baseSlice(array, start, end);\n  }\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n\n\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n\n\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n\n    return index;\n  }\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n\n  function asciiToArray(string) {\n    return string.split('');\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n  var rsVarRange = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsZWJ = '\\\\u200d';\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n  /** Used to compose unicode character classes. */\n\n\n  var rsAstralRange$1 = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\n  var rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n  /** Used to compose unicode capture groups. */\n\n  var rsAstral = '[' + rsAstralRange$1 + ']';\n  var rsCombo = '[' + rsComboRange$1 + ']';\n  var rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\n  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\n  var rsNonAstral = '[^' + rsAstralRange$1 + ']';\n  var rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\n  var rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\n  var rsZWJ$1 = '\\\\u200d';\n  /** Used to compose unicode regexes. */\n\n  var reOptMod = rsModifier + '?';\n  var rsOptVar = '[' + rsVarRange$1 + ']?';\n  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\n  var rsSeq = rsOptVar + reOptMod + rsOptJoin;\n  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n\n\n  function stringToArray(string) {\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n  }\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n\n\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n  /** Used to match leading and trailing whitespace. */\n\n\n  var reTrim = /^\\s+|\\s+$/g;\n  /**\n   * Removes leading and trailing whitespace or specified characters from `string`.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to trim.\n   * @param {string} [chars=whitespace] The characters to trim.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {string} Returns the trimmed string.\n   * @example\n   *\n   * _.trim('  abc  ');\n   * // => 'abc'\n   *\n   * _.trim('-_-abc-_-', '_-');\n   * // => 'abc'\n   *\n   * _.map(['  foo  ', '  bar  '], _.trim);\n   * // => ['foo', 'bar']\n   */\n\n  function trim(string, chars, guard) {\n    string = toString(string);\n\n    if (string && (guard || chars === undefined)) {\n      return string.replace(reTrim, '');\n    }\n\n    if (!string || !(chars = baseToString(chars))) {\n      return string;\n    }\n\n    var strSymbols = stringToArray(string),\n        chrSymbols = stringToArray(chars),\n        start = charsStartIndex(strSymbols, chrSymbols),\n        end = charsEndIndex(strSymbols, chrSymbols) + 1;\n    return castSlice(strSymbols, start, end).join('');\n  }\n\n  var FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n  function parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n      return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n  }\n  /**\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n   * tasks are specified as parameters to the function, after the usual callback\n   * parameter, with the parameter names matching the names of the tasks it\n   * depends on. This can provide even more readable task graphs which can be\n   * easier to maintain.\n   *\n   * If a final callback is specified, the task results are similarly injected,\n   * specified as named parameters after the initial error parameter.\n   *\n   * The autoInject function is purely syntactic sugar and its semantics are\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n   *\n   * @name autoInject\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.auto]{@link module:ControlFlow.auto}\n   * @category Control Flow\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n   * the form 'func([dependencies...], callback). The object's key of a property\n   * serves as the name of the task defined by that property, i.e. can be used\n   * when specifying requirements for other tasks.\n   * * The `callback` parameter is a `callback(err, result)` which must be called\n   *   when finished, passing an `error` (which can be `null`) and the result of\n   *   the function's execution. The remaining parameters name other tasks on\n   *   which the task is dependent, and the results from those tasks are the\n   *   arguments of those parameters.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback, and a `results` object with any completed\n   * task results, similar to `auto`.\n   * @example\n   *\n   * //  The example from `auto` can be rewritten as follows:\n   * async.autoInject({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: function(get_data, make_folder, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     },\n   *     email_link: function(write_file, callback) {\n   *         // once the file is written let's email a link to it...\n   *         // write_file contains the filename returned by write_file.\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   *\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\n   * // will not work with plain functions, since the parameter names will be\n   * // collapsed to a single letter identifier.  To work around this, you can\n   * // explicitly specify the names of the parameters your task function needs\n   * // in an array, similar to Angular.js dependency injection.\n   *\n   * // This still has an advantage over plain `auto`, since the results a task\n   * // depends on are still spread into arguments.\n   * async.autoInject({\n   *     //...\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(write_file, callback) {\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }]\n   *     //...\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   */\n\n\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    baseForOwn(tasks, function (taskFn, key) {\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n\n      if (isArray(taskFn)) {\n        params = taskFn.slice(0, -1);\n        taskFn = taskFn[taskFn.length - 1];\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        } // remove callback param\n\n\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n\n      function newTask(results, taskCb) {\n        var newArgs = arrayMap(params, function (name) {\n          return results[name];\n        });\n        newArgs.push(taskCb);\n        wrapAsync(taskFn).apply(null, newArgs);\n      }\n    });\n    auto(newTasks, callback);\n  } // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n\n\n  function DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n\n  DLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  };\n\n  DLL.prototype.empty = function () {\n    while (this.head) this.shift();\n\n    return this;\n  };\n\n  DLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  };\n\n  DLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  };\n\n  DLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n  };\n\n  DLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n  };\n\n  DLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n\n    for (var idx = 0; idx < this.length; idx++) {\n      arr[idx] = curr.data;\n      curr = curr.next;\n    }\n\n    return arr;\n  };\n\n  DLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n\n    while (!!curr) {\n      var next = curr.next;\n\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n\n      curr = next;\n    }\n\n    return this;\n  };\n\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n\n    var numRunning = 0;\n    var workersList = [];\n    var processingScheduled = false;\n\n    function _insert(data, insertAtFront, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          callback: callback || noop\n        };\n\n        if (insertAtFront) {\n          q._tasks.unshift(item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(function () {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n    }\n\n    function _next(tasks) {\n      return function (err) {\n        numRunning -= 1;\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = baseIndexOf(workersList, task, 0);\n\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n\n          task.callback.apply(task, arguments);\n\n          if (err != null) {\n            q.error(err, task.data);\n          }\n        }\n\n        if (numRunning <= q.concurrency - q.buffer) {\n          q.unsaturated();\n        }\n\n        if (q.idle()) {\n          q.drain();\n        }\n\n        q.process();\n      };\n    }\n\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      concurrency: concurrency,\n      payload: payload,\n      saturated: noop,\n      unsaturated: noop,\n      buffer: concurrency / 4,\n      empty: noop,\n      drain: noop,\n      error: noop,\n      started: false,\n      paused: false,\n      push: function (data, callback) {\n        _insert(data, false, callback);\n      },\n      kill: function () {\n        q.drain = noop;\n\n        q._tasks.empty();\n      },\n      unshift: function (data, callback) {\n        _insert(data, true, callback);\n      },\n      remove: function (testFn) {\n        q._tasks.remove(testFn);\n      },\n      process: function () {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n\n        isProcessing = true;\n\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n              data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n\n          numRunning += 1;\n\n          if (q._tasks.length === 0) {\n            q.empty();\n          }\n\n          if (numRunning === q.concurrency) {\n            q.saturated();\n          }\n\n          var cb = onlyOnce(_next(tasks));\n\n          _worker(data, cb);\n        }\n\n        isProcessing = false;\n      },\n      length: function () {\n        return q._tasks.length;\n      },\n      running: function () {\n        return numRunning;\n      },\n      workersList: function () {\n        return workersList;\n      },\n      idle: function () {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause: function () {\n        q.paused = true;\n      },\n      resume: function () {\n        if (q.paused === false) {\n          return;\n        }\n\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    return q;\n  }\n  /**\n   * A cargo of tasks for the worker function to complete. Cargo inherits all of\n   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n   * @typedef {Object} CargoObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - A function returning the number of items\n   * waiting to be processed. Invoke like `cargo.length()`.\n   * @property {number} payload - An `integer` for determining how many tasks\n   * should be process per round. This property can be changed after a `cargo` is\n   * created to alter the payload on-the-fly.\n   * @property {Function} push - Adds `task` to the `queue`. The callback is\n   * called once the `worker` has finished processing the task. Instead of a\n   * single task, an array of `tasks` can be submitted. The respective callback is\n   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n   * @property {Function} saturated - A callback that is called when the\n   * `queue.length()` hits the concurrency and further tasks will be queued.\n   * @property {Function} empty - A callback that is called when the last item\n   * from the `queue` is given to a `worker`.\n   * @property {Function} drain - A callback that is called when the last item\n   * from the `queue` has returned from the `worker`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke like `cargo.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n   */\n\n  /**\n   * Creates a `cargo` object with the specified payload. Tasks added to the\n   * cargo will be processed altogether (up to the `payload` limit). If the\n   * `worker` is in progress, the task is queued until it becomes available. Once\n   * the `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, cargo passes an array of tasks to a single worker, repeating\n   * when the worker is finished.\n   *\n   * @name cargo\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargo and inner queue.\n   * @example\n   *\n   * // create a cargo object with payload 2\n   * var cargo = async.cargo(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2);\n   *\n   * // add some items\n   * cargo.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargo.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * cargo.push({name: 'baz'}, function(err) {\n   *     console.log('finished processing baz');\n   * });\n   */\n\n\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  var eachOfSeries = doLimit(eachOfLimit, 1);\n  /**\n   * Reduces `coll` into a single value using an async `iteratee` to return each\n   * successive step. `memo` is the initial state of the reduction. This function\n   * only operates in series.\n   *\n   * For performance reasons, it may make sense to split a call to this function\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n   * results. This function is for situations where each step in the reduction\n   * needs to be async; if you can get the data before reducing it, then it's\n   * probably a good idea to do so.\n   *\n   * @name reduce\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias inject\n   * @alias foldl\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee complete with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @example\n   *\n   * async.reduce([1,2,3], 0, function(memo, item, callback) {\n   *     // pointless async:\n   *     process.nextTick(function() {\n   *         callback(null, memo + item)\n   *     });\n   * }, function(err, result) {\n   *     // result is now equal to the last value of memo, which is 6\n   * });\n   */\n\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfSeries(coll, function (x, i, callback) {\n      _iteratee(memo, x, function (err, v) {\n        memo = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, memo);\n    });\n  }\n  /**\n   * Version of the compose function that is more natural to read. Each function\n   * consumes the return value of the previous function. It is the equivalent of\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name seq\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.compose]{@link module:ControlFlow.compose}\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} a function that composes the `functions` in order\n   * @example\n   *\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\n   * // Part of an app, that fetches cats of the logged user.\n   * // This example uses `seq` function to avoid overnesting and error\n   * // handling clutter.\n   * app.get('/cats', function(request, response) {\n   *     var User = request.models.User;\n   *     async.seq(\n   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n   *         function(user, fn) {\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n   *         }\n   *     )(req.session.user_id, function (err, cats) {\n   *         if (err) {\n   *             console.error(err);\n   *             response.json({ status: 'error', message: err.message });\n   *         } else {\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n   *         }\n   *     });\n   * });\n   */\n\n\n  function\n    /*...functions*/\n  seq() {\n    var _functions = arrayMap(arguments, wrapAsync);\n\n    return function\n      /*...args*/\n    () {\n      var args = slice(arguments);\n      var that = this;\n      var cb = args[args.length - 1];\n\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = noop;\n      }\n\n      reduce(_functions, args, function (newargs, fn, cb) {\n        fn.apply(that, newargs.concat(function (err\n        /*, ...nextargs*/\n        ) {\n          var nextargs = slice(arguments, 1);\n          cb(err, nextargs);\n        }));\n      }, function (err, results) {\n        cb.apply(that, [err].concat(results));\n      });\n    };\n  }\n  /**\n   * Creates a function which is a composition of the passed asynchronous\n   * functions. Each function consumes the return value of the function that\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name compose\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} an asynchronous function that is the composed\n   * asynchronous `functions`\n   * @example\n   *\n   * function add1(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n + 1);\n   *     }, 10);\n   * }\n   *\n   * function mul3(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n * 3);\n   *     }, 10);\n   * }\n   *\n   * var add1mul3 = async.compose(mul3, add1);\n   * add1mul3(4, function (err, result) {\n   *     // result now equals 15\n   * });\n   */\n\n\n  var compose = function\n    /*...args*/\n  () {\n    return seq.apply(null, slice(arguments).reverse());\n  };\n\n  var _concat = Array.prototype.concat;\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name concatLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   */\n\n  var concatLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err\n      /*, ...args*/\n      ) {\n        if (err) return callback(err);\n        return callback(null, slice(arguments, 1));\n      });\n    }, function (err, mapResults) {\n      var result = [];\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = _concat.apply(result, mapResults[i]);\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n   * the concatenated list. The `iteratee`s are called in parallel, and the\n   * results are concatenated as they return. There is no guarantee that the\n   * results array will be returned in the original order of `coll` passed to the\n   * `iteratee` function.\n   *\n   * @name concat\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback(err)] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @example\n   *\n   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n   *     // files is now a list of filenames that exist in the 3 directories\n   * });\n   */\n\n\n  var concat = doLimit(concatLimit, Infinity);\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n   *\n   * @name concatSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n   * The iteratee should complete with an array an array of results.\n   * Invoked with (item, callback).\n   * @param {Function} [callback(err)] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   */\n\n  var concatSeries = doLimit(concatLimit, 1);\n  /**\n   * Returns a function that when called, calls-back with the values provided.\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n   * [`auto`]{@link module:ControlFlow.auto}.\n   *\n   * @name constant\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\n   * callback with.\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\n   * invokes the callback with the previous given arguments.\n   * @example\n   *\n   * async.waterfall([\n   *     async.constant(42),\n   *     function (value, next) {\n   *         // value === 42\n   *     },\n   *     //...\n   * ], callback);\n   *\n   * async.waterfall([\n   *     async.constant(filename, \"utf8\"),\n   *     fs.readFile,\n   *     function (fileData, next) {\n   *         //...\n   *     }\n   *     //...\n   * ], callback);\n   *\n   * async.auto({\n   *     hostname: async.constant(\"https://server.net/\"),\n   *     port: findFreePort,\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n   *         startServer(options, cb);\n   *     }],\n   *     //...\n   * }, callback);\n   */\n\n  var constant = function\n    /*...values*/\n  () {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function\n      /*...ignoredArgs, callback*/\n    () {\n      var callback = arguments[arguments.length - 1];\n      return callback.apply(this, args);\n    };\n  };\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n\n\n  function identity(value) {\n    return value;\n  }\n\n  function _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n      cb = cb || noop;\n      var testPassed = false;\n      var testResult;\n      eachfn(arr, function (value, _, callback) {\n        iteratee(value, function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            callback(null, breakLoop);\n          } else {\n            callback();\n          }\n        });\n      }, function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, testPassed ? testResult : getResult(false));\n        }\n      });\n    };\n  }\n\n  function _findGetResult(v, x) {\n    return x;\n  }\n  /**\n   * Returns the first value in `coll` that passes an async truth test. The\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\n   * `true` will fire the detect `callback` with that result. That means the\n   * result might not be the first item in the original `coll` (in terms of order)\n   * that passes the test.\n  \n   * If order within the original `coll` is important, then look at\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\n   *\n   * @name detect\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias find\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @example\n   *\n   * async.detect(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // result now equals the first file in the list that exists\n   * });\n   */\n\n\n  var detect = doParallel(_createTester(identity, _findGetResult));\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name detectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findLimit\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   */\n\n  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n   *\n   * @name detectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findSeries\n   * @category Collections\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   */\n\n  var detectSeries = doLimit(detectLimit, 1);\n\n  function consoleFunc(name) {\n    return function (fn\n    /*, ...args*/\n    ) {\n      var args = slice(arguments, 1);\n      args.push(function (err\n      /*, ...args*/\n      ) {\n        var args = slice(arguments, 1);\n\n        if (typeof console === 'object') {\n          if (err) {\n            if (console.error) {\n              console.error(err);\n            }\n          } else if (console[name]) {\n            arrayEach(args, function (x) {\n              console[name](x);\n            });\n          }\n        }\n      });\n      wrapAsync(fn).apply(null, args);\n    };\n  }\n  /**\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\n   * `console` using `console.dir` to display the properties of the resulting object.\n   * Only works in Node.js or in browsers that support `console.dir` and\n   * `console.error` (such as FF and Chrome).\n   * If multiple arguments are returned from the async function,\n   * `console.dir` is called on each argument in order.\n   *\n   * @name dir\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, {hello: name});\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.dir(hello, 'world');\n   * {hello: 'world'}\n   */\n\n\n  var dir = consoleFunc('dir');\n  /**\n   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n   * the order of operations, the arguments `test` and `fn` are switched.\n   *\n   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n   * @name doDuring\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.during]{@link module:ControlFlow.during}\n   * @category Control Flow\n   * @param {AsyncFunction} fn - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `fn`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `fn` has stopped. `callback`\n   * will be passed an error if one occurred, otherwise `null`.\n   */\n\n  function doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      args.push(check);\n\n      _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    check(null, true);\n  }\n  /**\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n   * the order of operations, the arguments `test` and `iteratee` are switched.\n   *\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n   *\n   * @name doWhilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\n   * passes. Invoked with (callback).\n   * @param {Function} test - synchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with any non-error callback results of\n   * `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped.\n   * `callback` will be passed an error and any arguments passed to the final\n   * `iteratee`'s callback. Invoked with (err, [results]);\n   */\n\n\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      if (test.apply(this, args)) return _iteratee(next);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n   * argument ordering differs from `until`.\n   *\n   * @name doUntil\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} test - synchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with any non-error callback results of\n   * `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   */\n\n\n  function doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function () {\n      return !test.apply(this, arguments);\n    }, callback);\n  }\n  /**\n   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n   * is passed a callback in the form of `function (err, truth)`. If error is\n   * passed to `test` or `fn`, the main callback is immediately called with the\n   * value of the error.\n   *\n   * @name during\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `fn`. Invoked with (callback).\n   * @param {AsyncFunction} fn - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `fn` has stopped. `callback`\n   * will be passed an error, if one occurred, otherwise `null`.\n   * @example\n   *\n   * var count = 0;\n   *\n   * async.during(\n   *     function (callback) {\n   *         return callback(null, count < 5);\n   *     },\n   *     function (callback) {\n   *         count++;\n   *         setTimeout(callback, 1000);\n   *     },\n   *     function (err) {\n   *         // 5 seconds have passed\n   *     }\n   * );\n   */\n\n\n  function during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _fn = wrapAsync(fn);\n\n    var _test = wrapAsync(test);\n\n    function next(err) {\n      if (err) return callback(err);\n\n      _test(check);\n    }\n\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n\n      _fn(next);\n    }\n\n    _test(check);\n  }\n\n  function _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n      return iteratee(value, callback);\n    };\n  }\n  /**\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\n   * The `iteratee` is called with an item from the list, and a callback for when\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\n   * main `callback` (for the `each` function) is immediately called with the\n   * error.\n   *\n   * Note, that since this function applies `iteratee` to each item in parallel,\n   * there is no guarantee that the iteratee functions will complete in order.\n   *\n   * @name each\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEach\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to\n   * each item in `coll`. Invoked with (item, callback).\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOf`.\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @example\n   *\n   * // assuming openFiles is an array of file names and saveFile is a function\n   * // to save the modified contents of that file:\n   *\n   * async.each(openFiles, saveFile, function(err){\n   *   // if any of the saves produced an error, err would equal that error\n   * });\n   *\n   * // assuming openFiles is an array of file names\n   * async.each(openFiles, function(file, callback) {\n   *\n   *     // Perform operation on file here.\n   *     console.log('Processing file ' + file);\n   *\n   *     if( file.length > 32 ) {\n   *       console.log('This file name is too long');\n   *       callback('File name too long');\n   *     } else {\n   *       // Do work to process file here\n   *       console.log('File processed');\n   *       callback();\n   *     }\n   * }, function(err) {\n   *     // if any of the file processing produced an error, err would equal that error\n   *     if( err ) {\n   *       // One of the iterations produced an error.\n   *       // All processing will now stop.\n   *       console.log('A file failed to process');\n   *     } else {\n   *       console.log('All files have been processed successfully');\n   *     }\n   * });\n   */\n\n\n  function eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name eachLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfLimit`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n   *\n   * @name eachSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfSeries`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   */\n\n\n  var eachSeries = doLimit(eachLimit$1, 1);\n  /**\n   * Wrap an async function and ensure it calls its callback on a later tick of\n   * the event loop.  If the function already calls its callback on a next tick,\n   * no extra deferral is added. This is useful for preventing stack overflows\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\n   *\n   * @name ensureAsync\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\n   * callback as its last argument.\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n   * signature as the function passed in.\n   * @example\n   *\n   * function sometimesAsync(arg, callback) {\n   *     if (cache[arg]) {\n   *         return callback(null, cache[arg]); // this would be synchronous!!\n   *     } else {\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\n   *     }\n   * }\n   *\n   * // this has a risk of stack overflows if many results are cached in a row\n   * async.mapSeries(args, sometimesAsync, done);\n   *\n   * // this will defer sometimesAsync's callback if necessary,\n   * // preventing stack overflows\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n   */\n\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n      var sync = true;\n      args.push(function () {\n        var innerArgs = arguments;\n\n        if (sync) {\n          setImmediate$1(function () {\n            callback.apply(null, innerArgs);\n          });\n        } else {\n          callback.apply(null, innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    });\n  }\n\n  function notId(v) {\n    return !v;\n  }\n  /**\n   * Returns `true` if every element in `coll` satisfies an async test. If any\n   * iteratee call returns `false`, the main `callback` is immediately called.\n   *\n   * @name every\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias all\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @example\n   *\n   * async.every(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // if result is true then every file exists\n   * });\n   */\n\n\n  var every = doParallel(_createTester(notId, notId));\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name everyLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   */\n\n  var everyLimit = doParallelLimit(_createTester(notId, notId));\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n   *\n   * @name everySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in series.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   */\n\n  var everySeries = doLimit(everyLimit, 1);\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        truthValues[index] = !!v;\n        callback(err);\n      });\n    }, function (err) {\n      if (err) return callback(err);\n      var results = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n\n      callback(null, results);\n    });\n  }\n\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        if (err) {\n          callback(err);\n        } else {\n          if (v) {\n            results.push({\n              index: index,\n              value: x\n            });\n          }\n\n          callback();\n        }\n      });\n    }, function (err) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, arrayMap(results.sort(function (a, b) {\n          return a.index - b.index;\n        }), baseProperty('value')));\n      }\n    });\n  }\n\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n  }\n  /**\n   * Returns a new array of all the values in `coll` which pass an async truth\n   * test. This operation is performed in parallel, but the results array will be\n   * in the same order as the original.\n   *\n   * @name filter\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias select\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @example\n   *\n   * async.filter(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, results) {\n   *     // results now equals an array of the existing files\n   * });\n   */\n\n\n  var filter = doParallel(_filter);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name filterLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n  var filterLimit = doParallelLimit(_filter);\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n   *\n   * @name filterSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectSeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results)\n   */\n\n  var filterSeries = doLimit(filterLimit, 1);\n  /**\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\n   * to call itself again, in series, indefinitely.\n  \n   * If an error is passed to the callback then `errback` is called with the\n   * error, and execution stops, otherwise it will never be called.\n   *\n   * @name forever\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\n   * Invoked with (next).\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\n   * this function will be called, and execution stops. Invoked with (err).\n   * @example\n   *\n   * async.forever(\n   *     function(next) {\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\n   *         // it will result in this function being called again.\n   *     },\n   *     function(err) {\n   *         // if next is called with a value in its first parameter, it will appear\n   *         // in here as 'err', and execution will stop.\n   *     }\n   * );\n   */\n\n  function forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n      if (err) return done(err);\n      task(next);\n    }\n\n    next();\n  }\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name groupByLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   */\n\n\n  var groupByLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err, key) {\n        if (err) return callback(err);\n        return callback(null, {\n          key: key,\n          val: val\n        });\n      });\n    }, function (err, mapResults) {\n      var result = {}; // from MDN, handle object having an `hasOwnProperty` prop\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var key = mapResults[i].key;\n          var val = mapResults[i].val;\n\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n\n      return callback(err, result);\n    });\n  };\n  /**\n   * Returns a new object, where each value corresponds to an array of items, from\n   * `coll`, that returned the corresponding key. That is, the keys of the object\n   * correspond to the values passed to the `iteratee` callback.\n   *\n   * Note: Since this function applies the `iteratee` to each item in parallel,\n   * there is no guarantee that the `iteratee` functions will complete in order.\n   * However, the values for each key in the `result` will be in the same order as\n   * the original `coll`. For Objects, the values will roughly be in the order of\n   * the original Objects' keys (but this can vary across JavaScript engines).\n   *\n   * @name groupBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @example\n   *\n   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n   *     db.findById(userId, function(err, user) {\n   *         if (err) return callback(err);\n   *         return callback(null, user.age);\n   *     });\n   * }, function(err, result) {\n   *     // result is object containing the userIds grouped by age\n   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n   * });\n   */\n\n\n  var groupBy = doLimit(groupByLimit, Infinity);\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n   *\n   * @name groupBySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   */\n\n  var groupBySeries = doLimit(groupByLimit, 1);\n  /**\n   * Logs the result of an `async` function to the `console`. Only works in\n   * Node.js or in browsers that support `console.log` and `console.error` (such\n   * as FF and Chrome). If multiple arguments are returned from the async\n   * function, `console.log` is called on each argument in order.\n   *\n   * @name log\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, 'hello ' + name);\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.log(hello, 'world');\n   * 'hello world'\n   */\n\n  var log = consoleFunc('log');\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name mapValuesLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   */\n\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOfLimit(obj, limit, function (val, key, next) {\n      _iteratee(val, key, function (err, result) {\n        if (err) return next(err);\n        newObj[key] = result;\n        next();\n      });\n    }, function (err) {\n      callback(err, newObj);\n    });\n  }\n  /**\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n   *\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\n   * callback for when it has finished processing. Each of these callbacks takes\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n   * passes an error to its callback, the main `callback` (for the `mapValues`\n   * function) is immediately called with the error.\n   *\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\n   * be roughly in the order they complete, (but this is very engine-specific)\n   *\n   * @name mapValues\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @example\n   *\n   * async.mapValues({\n   *     f1: 'file1',\n   *     f2: 'file2',\n   *     f3: 'file3'\n   * }, function (file, key, callback) {\n   *   fs.stat(file, callback);\n   * }, function(err, result) {\n   *     // result is now a map of stats for each file, e.g.\n   *     // {\n   *     //     f1: [stats for file1],\n   *     //     f2: [stats for file2],\n   *     //     f3: [stats for file3]\n   *     // }\n   * });\n   */\n\n\n  var mapValues = doLimit(mapValuesLimit, Infinity);\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n   *\n   * @name mapValuesSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   */\n\n  var mapValuesSeries = doLimit(mapValuesLimit, 1);\n\n  function has(obj, key) {\n    return key in obj;\n  }\n  /**\n   * Caches the results of an async function. When creating a hash to store\n   * function results against, the callback is omitted from the hash and an\n   * optional hash function can be used.\n   *\n   * If no hash function is specified, the first argument is used as a hash key,\n   * which may work reasonably if it is a string or a data type that converts to a\n   * distinct string. Note that objects and arrays will not behave reasonably.\n   * Neither will cases where the other arguments are significant. In such cases,\n   * specify your own hash function.\n   *\n   * The cache of results is exposed as the `memo` property of the function\n   * returned by `memoize`.\n   *\n   * @name memoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n   * @param {Function} hasher - An optional function for generating a custom hash\n   * for storing results. It has all the arguments applied to it apart from the\n   * callback, and must be synchronous.\n   * @returns {AsyncFunction} a memoized version of `fn`\n   * @example\n   *\n   * var slow_fn = function(name, callback) {\n   *     // do something\n   *     callback(null, result);\n   * };\n   * var fn = async.memoize(slow_fn);\n   *\n   * // fn can now be used as if it were slow_fn\n   * fn('some name', function() {\n   *     // callback\n   * });\n   */\n\n\n  function memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n\n    var _fn = wrapAsync(fn);\n\n    var memoized = initialParams(function memoized(args, callback) {\n      var key = hasher.apply(null, args);\n\n      if (has(memo, key)) {\n        setImmediate$1(function () {\n          callback.apply(null, memo[key]);\n        });\n      } else if (has(queues, key)) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n\n        _fn.apply(null, args.concat(function\n          /*args*/\n        () {\n          var args = slice(arguments);\n          memo[key] = args;\n          var q = queues[key];\n          delete queues[key];\n\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i].apply(null, args);\n          }\n        }));\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n  /**\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\n   * priority events may precede the execution of `callback`.\n   *\n   * This is used internally for browser-compatibility purposes.\n   *\n   * @name nextTick\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\n   * @category Util\n   * @param {Function} callback - The function to call on a later loop around\n   * the event loop. Invoked with (args...).\n   * @param {...*} args... - any number of additional arguments to pass to the\n   * callback on the next tick.\n   * @example\n   *\n   * var call_order = [];\n   * async.nextTick(function() {\n   *     call_order.push('two');\n   *     // call_order now equals ['one','two']\n   * });\n   * call_order.push('one');\n   *\n   * async.setImmediate(function (a, b, c) {\n   *     // a, b, and c equal 1, 2, and 3\n   * }, 1, 2, 3);\n   */\n\n\n  var _defer$1;\n\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n\n  var nextTick = wrap(_defer$1);\n\n  function _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, function (task, key, callback) {\n      wrapAsync(task)(function (err, result) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n\n        results[key] = result;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   *\n   * @example\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // the results array will equal ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equals to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n  }\n  /**\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name parallelLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   */\n\n\n  function parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n  }\n  /**\n   * A queue of tasks for the worker function to complete.\n   * @typedef {Object} QueueObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - a function returning the number of items\n   * waiting to be processed. Invoke with `queue.length()`.\n   * @property {boolean} started - a boolean indicating whether or not any\n   * items have been pushed and processed by the queue.\n   * @property {Function} running - a function returning the number of items\n   * currently being processed. Invoke with `queue.running()`.\n   * @property {Function} workersList - a function returning the array of items\n   * currently being processed. Invoke with `queue.workersList()`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n   * @property {number} concurrency - an integer for determining how many `worker`\n   * functions should be run in parallel. This property can be changed after a\n   * `queue` is created to alter the concurrency on-the-fly.\n   * @property {Function} push - add a new task to the `queue`. Calls `callback`\n   * once the `worker` has finished processing the task. Instead of a single task,\n   * a `tasks` array can be submitted. The respective callback is used for every\n   * task in the list. Invoke with `queue.push(task, [callback])`,\n   * @property {Function} unshift - add a new task to the front of the `queue`.\n   * Invoke with `queue.unshift(task, [callback])`.\n   * @property {Function} remove - remove items from the queue that match a test\n   * function.  The test function will be passed an object with a `data` property,\n   * and a `priority` property, if this is a\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n   * `function ({data, priority}) {}` and returns a Boolean.\n   * @property {Function} saturated - a callback that is called when the number of\n   * running workers hits the `concurrency` limit, and further tasks will be\n   * queued.\n   * @property {Function} unsaturated - a callback that is called when the number\n   * of running workers is less than the `concurrency` & `buffer` limits, and\n   * further tasks will not be queued.\n   * @property {number} buffer - A minimum threshold buffer in order to say that\n   * the `queue` is `unsaturated`.\n   * @property {Function} empty - a callback that is called when the last item\n   * from the `queue` is given to a `worker`.\n   * @property {Function} drain - a callback that is called when the last item\n   * from the `queue` has returned from the `worker`.\n   * @property {Function} error - a callback that is called when a task errors.\n   * Has the signature `function(error, task)`.\n   * @property {boolean} paused - a boolean for determining whether the queue is\n   * in a paused state.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke with `queue.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n   */\n\n  /**\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\n   * `worker`s are in progress, the task is queued until one becomes available.\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\n   *\n   * @name queue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`. Invoked with (task, callback).\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the queue.\n   * @example\n   *\n   * // create a queue object with concurrency 2\n   * var q = async.queue(function(task, callback) {\n   *     console.log('hello ' + task.name);\n   *     callback();\n   * }, 2);\n   *\n   * // assign a callback\n   * q.drain = function() {\n   *     console.log('all items have been processed');\n   * };\n   *\n   * // add some items to the queue\n   * q.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * q.push({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   *\n   * // add some items to the queue (batch-wise)\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n   *     console.log('finished processing item');\n   * });\n   *\n   * // add some items to the front of the queue\n   * q.unshift({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   */\n\n\n  var queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n\n    return queue(function (items, cb) {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  };\n  /**\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n   * completed in ascending priority order.\n   *\n   * @name priorityQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`.\n   * Invoked with (task, callback).\n   * @param {number} concurrency - An `integer` for determining how many `worker`\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\n   * `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n   * differences between `queue` and `priorityQueue` objects:\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\n   * * The `unshift` method was removed.\n   */\n\n\n  var priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency); // Override push to accept second parameter representing priority\n\n    q.push = function (data, priority, callback) {\n      if (callback == null) callback = noop;\n\n      if (typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n\n      q.started = true;\n\n      if (!isArray(data)) {\n        data = [data];\n      }\n\n      if (data.length === 0) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n\n      priority = priority || 0;\n      var nextNode = q._tasks.head;\n\n      while (nextNode && priority >= nextNode.priority) {\n        nextNode = nextNode.next;\n      }\n\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          priority: priority,\n          callback: callback\n        };\n\n        if (nextNode) {\n          q._tasks.insertBefore(nextNode, item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n\n      setImmediate$1(q.process);\n    }; // Remove unshift function\n\n\n    delete q.unshift;\n    return q;\n  };\n  /**\n   * Runs the `tasks` array of functions in parallel, without waiting until the\n   * previous function has completed. Once any of the `tasks` complete or pass an\n   * error to its callback, the main `callback` is immediately called. It's\n   * equivalent to `Promise.race()`.\n   *\n   * @name race\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n   * to run. Each function can complete with an optional `result` value.\n   * @param {Function} callback - A callback to run once any of the functions have\n   * completed. This function gets an error or result from the first function that\n   * completed. Invoked with (err, result).\n   * @returns undefined\n   * @example\n   *\n   * async.race([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // main callback\n   * function(err, result) {\n   *     // the result will be equal to 'two' as it finishes earlier\n   * });\n   */\n\n\n  function race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n  /**\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n   *\n   * @name reduceRight\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reduce]{@link module:Collections.reduce}\n   * @alias foldr\n   * @category Collection\n   * @param {Array} array - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee complete with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   */\n\n\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n  }\n  /**\n   * Wraps the async function in another function that always completes with a\n   * result object, even when it errors.\n   *\n   * The result object has either the property `error` or `value`.\n   *\n   * @name reflect\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function you want to wrap\n   * @returns {Function} - A function that always passes null to it's callback as\n   * the error. The second argument to the callback will be an `object` with\n   * either an `error` or a `value` property.\n   * @example\n   *\n   * async.parallel([\n   *     async.reflect(function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff but error ...\n   *         callback('bad stuff happened');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     })\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = 'bad stuff happened'\n   *     // results[2].value = 'two'\n   * });\n   */\n\n\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push(function callback(error, cbArg) {\n        if (error) {\n          reflectCallback(null, {\n            error: error\n          });\n        } else {\n          var value;\n\n          if (arguments.length <= 2) {\n            value = cbArg;\n          } else {\n            value = slice(arguments, 1);\n          }\n\n          reflectCallback(null, {\n            value: value\n          });\n        }\n      });\n      return _fn.apply(this, args);\n    });\n  }\n  /**\n   * A helper function that wraps an array or an object of functions with `reflect`.\n   *\n   * @name reflectAll\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.reflect]{@link module:Utils.reflect}\n   * @category Util\n   * @param {Array|Object|Iterable} tasks - The collection of\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n   * @returns {Array} Returns an array of async functions, each wrapped in\n   * `async.reflect`\n   * @example\n   *\n   * let tasks = [\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         // do some more stuff but error ...\n   *         callback(new Error('bad stuff happened'));\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ];\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = Error('bad stuff happened')\n   *     // results[2].value = 'two'\n   * });\n   *\n   * // an example using an object instead of an array\n   * let tasks = {\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         callback('two');\n   *     },\n   *     three: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'three');\n   *         }, 100);\n   *     }\n   * };\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results.one.value = 'one'\n   *     // results.two.error = 'two'\n   *     // results.three.value = 'three'\n   * });\n   */\n\n\n  function reflectAll(tasks) {\n    var results;\n\n    if (isArray(tasks)) {\n      results = arrayMap(tasks, reflect);\n    } else {\n      results = {};\n      baseForOwn(tasks, function (task, key) {\n        results[key] = reflect.call(this, task);\n      });\n    }\n\n    return results;\n  }\n\n  function reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n      iteratee(value, function (err, v) {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n  /**\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n   *\n   * @name reject\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @example\n   *\n   * async.reject(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, results) {\n   *     // results now equals an array of missing files\n   *     createFiles(results);\n   * });\n   */\n\n\n  var reject = doParallel(reject$1);\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name rejectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n  var rejectLimit = doParallelLimit(reject$1);\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n   *\n   * @name rejectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   */\n\n  var rejectSeries = doLimit(rejectLimit, 1);\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n  /**\n   * Attempts to get a successful response from `task` no more than `times` times\n   * before returning an error. If the task is successful, the `callback` will be\n   * passed the result of the successful task. If all attempts fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name retry\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n   * object with `times` and `interval` or a number.\n   * * `times` - The number of attempts to make before giving up.  The default\n   *   is `5`.\n   * * `interval` - The time to wait between retries, in milliseconds.  The\n   *   default is `0`. The interval may also be specified as a function of the\n   *   retry count (see example).\n   * * `errorFilter` - An optional synchronous function that is invoked on\n   *   erroneous result. If it returns `true` the retry attempts will continue;\n   *   if the function returns `false` the retry flow is aborted with the current\n   *   attempt's error and result being returned to the final callback.\n   *   Invoked with (err).\n   * * If `opts` is a number, the number specifies the number of times to retry,\n   *   with the default interval of `0`.\n   * @param {AsyncFunction} task - An async function to retry.\n   * Invoked with (callback).\n   * @param {Function} [callback] - An optional callback which is called when the\n   * task has succeeded, or after the final failed attempt. It receives the `err`\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\n   * with (err, results).\n   *\n   * @example\n   *\n   * // The `retry` function can be used as a stand-alone control flow by passing\n   * // a callback, as shown below:\n   *\n   * // try calling apiMethod 3 times\n   * async.retry(3, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 10 times with exponential backoff\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n   * async.retry({\n   *   times: 10,\n   *   interval: function(retryCount) {\n   *     return 50 * Math.pow(2, retryCount);\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod the default 5 times no delay between each retry\n   * async.retry(apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod only when error condition satisfies, all other\n   * // errors will abort the retry control flow and return to final callback\n   * async.retry({\n   *   errorFilter: function(err) {\n   *     return err.message === 'Temporary error'; // only retry on a specific error\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // to retry individual methods that are not as reliable within other\n   * // control flow functions, use the `retryable` wrapper:\n   * async.auto({\n   *     users: api.getUsers.bind(api),\n   *     payments: async.retryable(3, api.getPayments.bind(api))\n   * }, function(err, results) {\n   *     // do something with the results\n   * });\n   *\n   */\n\n\n  function retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n      if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n        acc.errorFilter = t.errorFilter;\n      } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n      } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n      }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || noop;\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n\n    function retryAttempt() {\n      _task(function (err) {\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt));\n        } else {\n          callback.apply(null, arguments);\n        }\n      });\n    }\n\n    retryAttempt();\n  }\n  /**\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n   * wraps a task and makes it retryable, rather than immediately calling it\n   * with retries.\n   *\n   * @name retryable\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.retry]{@link module:ControlFlow.retry}\n   * @category Control Flow\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n   * options, exactly the same as from `retry`\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\n   * This function will be passed any arguments passed to the returned wrapper.\n   * Invoked with (...args, callback).\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\n   * retry on an error, based on the parameters specified in `opts`.\n   * This function will accept the same parameters as `task`.\n   * @example\n   *\n   * async.auto({\n   *     dep1: async.retryable(3, getFromFlakyService),\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n   *         maybeProcessData(results.dep1, cb);\n   *     })]\n   * }, callback);\n   */\n\n\n  var retryable = function (opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n\n    var _task = wrapAsync(task);\n\n    return initialParams(function (args, callback) {\n      function taskFn(cb) {\n        _task.apply(null, args.concat(cb));\n      }\n\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n  };\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @example\n   * async.series([\n   *     function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     },\n   *     function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // results is now equal to ['one', 'two']\n   * });\n   *\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback){\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equal to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n  }\n  /**\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\n   * If any iteratee call returns `true`, the main `callback` is immediately\n   * called.\n   *\n   * @name some\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias any\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @example\n   *\n   * async.some(['file1','file2','file3'], function(filePath, callback) {\n   *     fs.access(filePath, function(err) {\n   *         callback(null, !err)\n   *     });\n   * }, function(err, result) {\n   *     // if result is true then at least one of the files exists\n   * });\n   */\n\n\n  var some = doParallel(_createTester(Boolean, identity));\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name someLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anyLimit\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   */\n\n  var someLimit = doParallelLimit(_createTester(Boolean, identity));\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n   *\n   * @name someSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anySeries\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in series.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   */\n\n  var someSeries = doLimit(someLimit, 1);\n  /**\n   * Sorts a list by the results of running each `coll` value through an async\n   * `iteratee`.\n   *\n   * @name sortBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a value to use as the sort criteria as\n   * its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} callback - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is the items\n   * from the original `coll` sorted by the values returned by the `iteratee`\n   * calls. Invoked with (err, results).\n   * @example\n   *\n   * async.sortBy(['file1','file2','file3'], function(file, callback) {\n   *     fs.stat(file, function(err, stats) {\n   *         callback(err, stats.mtime);\n   *     });\n   * }, function(err, results) {\n   *     // results is now the original array of files sorted by\n   *     // modified date\n   * });\n   *\n   * // By modifying the callback parameter the\n   * // sorting order can be influenced:\n   *\n   * // ascending order\n   * async.sortBy([1,9,3,5], function(x, callback) {\n   *     callback(null, x);\n   * }, function(err,result) {\n   *     // result callback\n   * });\n   *\n   * // descending order\n   * async.sortBy([1,9,3,5], function(x, callback) {\n   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n   * }, function(err,result) {\n   *     // result callback\n   * });\n   */\n\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    map(coll, function (x, callback) {\n      _iteratee(x, function (err, criteria) {\n        if (err) return callback(err);\n        callback(null, {\n          value: x,\n          criteria: criteria\n        });\n      });\n    }, function (err, results) {\n      if (err) return callback(err);\n      callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n  /**\n   * Sets a time limit on an asynchronous function. If the function does not call\n   * its callback within the specified milliseconds, it will be called with a\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n   *\n   * @name timeout\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\n   * @param {number} milliseconds - The specified time limit.\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n   * to timeout Error for more information..\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n   * of the control flow functions.\n   * Invoke this function with the same parameters as you would `asyncFunc`.\n   * @example\n   *\n   * function myFunction(foo, callback) {\n   *     doAsyncTask(foo, function(err, data) {\n   *         // handle errors\n   *         if (err) return callback(err);\n   *\n   *         // do some stuff ...\n   *\n   *         // return processed data\n   *         return callback(null, data);\n   *     });\n   * }\n   *\n   * var wrapped = async.timeout(myFunction, 1000);\n   *\n   * // call `wrapped` as you would `myFunction`\n   * wrapped({ bar: 'bar' }, function(err, data) {\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\n   *     // and `data` will have their expected values\n   *\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\n   * });\n   */\n\n\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams(function (args, callback) {\n      var timedOut = false;\n      var timer;\n\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n\n        if (info) {\n          error.info = info;\n        }\n\n        timedOut = true;\n        callback(error);\n      }\n\n      args.push(function () {\n        if (!timedOut) {\n          callback.apply(null, arguments);\n          clearTimeout(timer);\n        }\n      }); // setup timer and call original function\n\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn.apply(null, args);\n    });\n  }\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n\n\n  var nativeCeil = Math.ceil;\n  var nativeMax = Math.max;\n  /**\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\n   * coerce arguments.\n   *\n   * @private\n   * @param {number} start The start of the range.\n   * @param {number} end The end of the range.\n   * @param {number} step The value to increment or decrement by.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Array} Returns the range of numbers.\n   */\n\n  function baseRange(start, end, step, fromRight) {\n    var index = -1,\n        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n        result = Array(length);\n\n    while (length--) {\n      result[fromRight ? length : ++index] = start;\n      start += step;\n    }\n\n    return result;\n  }\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name timesLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} count - The number of times to run the function.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n   */\n\n\n  function timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n  }\n  /**\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\n   * manner you would use with [map]{@link module:Collections.map}.\n   *\n   * @name times\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @example\n   *\n   * // Pretend this is some complicated async factory\n   * var createUser = function(id, callback) {\n   *     callback(null, {\n   *         id: 'user' + id\n   *     });\n   * };\n   *\n   * // generate 5 users\n   * async.times(5, function(n, next) {\n   *     createUser(n, function(err, user) {\n   *         next(err, user);\n   *     });\n   * }, function(err, users) {\n   *     // we should now have 5 users\n   * });\n   */\n\n\n  var times = doLimit(timeLimit, Infinity);\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n   *\n   * @name timesSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   */\n\n  var timesSeries = doLimit(timeLimit, 1);\n  /**\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n   * element in series, each step potentially mutating an `accumulator` value.\n   * The type of the accumulator defaults to the type of collection passed in.\n   *\n   * @name transform\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n   * it will default to an empty Object or Array, depending on the type of `coll`\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * collection that potentially modifies the accumulator.\n   * Invoked with (accumulator, item, key, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the transformed accumulator.\n   * Invoked with (err, result).\n   * @example\n   *\n   * async.transform([1,2,3], function(acc, item, index, callback) {\n   *     // pointless async:\n   *     process.nextTick(function() {\n   *         acc.push(item * 2)\n   *         callback(null)\n   *     });\n   * }, function(err, result) {\n   *     // result is now equal to [2, 4, 6]\n   * });\n   *\n   * @example\n   *\n   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n   *     setImmediate(function () {\n   *         obj[key] = val * 2;\n   *         callback();\n   *     })\n   * }, function (err, result) {\n   *     // result is equal to {a: 2, b: 4, c: 6}\n   * })\n   */\n\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = isArray(coll) ? [] : {};\n    }\n\n    callback = once(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function (v, k, cb) {\n      _iteratee(accumulator, v, k, cb);\n    }, function (err) {\n      callback(err, accumulator);\n    });\n  }\n  /**\n   * It runs each task in series but stops whenever any of the functions were\n   * successful. If one of the tasks were successful, the `callback` will be\n   * passed the result of the successful task. If all tasks fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name tryEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to\n   * run, each function is passed a `callback(err, result)` it must call on\n   * completion with an error `err` (which can be `null`) and an optional `result`\n   * value.\n   * @param {Function} [callback] - An optional callback which is called when one\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\n   * (err, results).\n   * @example\n   * async.tryEach([\n   *     function getDataFromFirstWebsite(callback) {\n   *         // Try getting the data from the first website\n   *         callback(err, data);\n   *     },\n   *     function getDataFromSecondWebsite(callback) {\n   *         // First website failed,\n   *         // Try getting the data from the backup website\n   *         callback(err, data);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     Now do something with the data.\n   * });\n   *\n   */\n\n\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function (task, callback) {\n      wrapAsync(task)(function (err, res\n      /*, ...args*/\n      ) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        } else {\n          result = res;\n        }\n\n        error = err;\n        callback(!err);\n      });\n    }, function () {\n      callback(error, result);\n    });\n  }\n  /**\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n   * unmemoized form. Handy for testing.\n   *\n   * @name unmemoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.memoize]{@link module:Utils.memoize}\n   * @category Util\n   * @param {AsyncFunction} fn - the memoized function\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\n   */\n\n\n  function unmemoize(fn) {\n    return function () {\n      return (fn.unmemoized || fn).apply(null, arguments);\n    };\n  }\n  /**\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs.\n   *\n   * @name whilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Function} test - synchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns undefined\n   * @example\n   *\n   * var count = 0;\n   * async.whilst(\n   *     function() { return count < 5; },\n   *     function(callback) {\n   *         count++;\n   *         setTimeout(function() {\n   *             callback(null, count);\n   *         }, 1000);\n   *     },\n   *     function (err, n) {\n   *         // 5 seconds have passed, n = 5\n   *     }\n   * );\n   */\n\n\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var _iteratee = wrapAsync(iteratee);\n\n    if (!test()) return callback(null);\n\n    var next = function (err\n    /*, ...args*/\n    ) {\n      if (err) return callback(err);\n      if (test()) return _iteratee(next);\n      var args = slice(arguments, 1);\n      callback.apply(null, [null].concat(args));\n    };\n\n    _iteratee(next);\n  }\n  /**\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs. `callback` will be passed an error and any\n   * arguments passed to the final `iteratee`'s callback.\n   *\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n   *\n   * @name until\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {Function} test - synchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with ().\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   */\n\n\n  function until(test, iteratee, callback) {\n    whilst(function () {\n      return !test.apply(this, arguments);\n    }, iteratee, callback);\n  }\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns undefined\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n\n\n  var waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      args.push(onlyOnce(next));\n      task.apply(null, args);\n    }\n\n    function next(err\n    /*, ...args*/\n    ) {\n      if (err || taskIndex === tasks.length) {\n        return callback.apply(null, arguments);\n      }\n\n      nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n  };\n  /**\n   * An \"async function\" in the context of Async is an asynchronous function with\n   * a variable number of parameters, with the final parameter being a callback.\n   * (`function (arg1, arg2, ..., callback) {}`)\n   * The final callback is of the form `callback(err, results...)`, which must be\n   * called once the function is completed.  The callback should be called with a\n   * Error as its first argument to signal that an error occurred.\n   * Otherwise, if no error occurred, it should be called with `null` as the first\n   * argument, and any additional `result` arguments that may apply, to signal\n   * successful completion.\n   * The callback must be called exactly once, ideally on a later tick of the\n   * JavaScript event loop.\n   *\n   * This type of function is also referred to as a \"Node-style async function\",\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n   * library are themselves CPS/Node-style async functions, or functions that\n   * return CPS/Node-style async functions.\n   *\n   * Wherever we accept a Node-style async function, we also directly accept an\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n   * In this case, the `async` function will not be passed a final callback\n   * argument, and any thrown error will be used as the `err` argument of the\n   * implicit callback, and the return value will be used as the `result` value.\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n   * argument, and a `resolved` value becomes the `result`.)\n   *\n   * Note, due to JavaScript limitations, we can only detect native `async`\n   * functions and not transpilied implementations.\n   * Your environment must have `async`/`await` support for this to work.\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n   * because the `async function` will be compiled to an ordinary function that\n   * returns a promise.\n   *\n   * @typedef {Function} AsyncFunction\n   * @static\n   */\n\n  /**\n   * Async is a utility module which provides straight-forward, powerful functions\n   * for working with asynchronous JavaScript. Although originally designed for\n   * use with [Node.js](http://nodejs.org) and installable via\n   * `npm install --save async`, it can also be used directly in the browser.\n   * @module async\n   * @see AsyncFunction\n   */\n\n  /**\n   * A collection of `async` functions for manipulating collections, such as\n   * arrays and objects.\n   * @module Collections\n   */\n\n  /**\n   * A collection of `async` functions for controlling the flow through a script.\n   * @module ControlFlow\n   */\n\n  /**\n   * A collection of `async` utility functions.\n   * @module Utils\n   */\n\n\n  var index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n  };\n  exports['default'] = index;\n  exports.apply = apply;\n  exports.applyEach = applyEach;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.compose = compose;\n  exports.concat = concat;\n  exports.concatLimit = concatLimit;\n  exports.concatSeries = concatSeries;\n  exports.constant = constant;\n  exports.detect = detect;\n  exports.detectLimit = detectLimit;\n  exports.detectSeries = detectSeries;\n  exports.dir = dir;\n  exports.doDuring = doDuring;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst;\n  exports.during = during;\n  exports.each = eachLimit;\n  exports.eachLimit = eachLimit$1;\n  exports.eachOf = eachOf;\n  exports.eachOfLimit = eachOfLimit;\n  exports.eachOfSeries = eachOfSeries;\n  exports.eachSeries = eachSeries;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every;\n  exports.everyLimit = everyLimit;\n  exports.everySeries = everySeries;\n  exports.filter = filter;\n  exports.filterLimit = filterLimit;\n  exports.filterSeries = filterSeries;\n  exports.forever = forever;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map;\n  exports.mapLimit = mapLimit;\n  exports.mapSeries = mapSeries;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallelLimit;\n  exports.parallelLimit = parallelLimit$1;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race;\n  exports.reduce = reduce;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject;\n  exports.rejectLimit = rejectLimit;\n  exports.rejectSeries = rejectSeries;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some;\n  exports.someLimit = someLimit;\n  exports.someSeries = someSeries;\n  exports.sortBy = sortBy;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timeLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall;\n  exports.whilst = whilst;\n  exports.all = every;\n  exports.allLimit = everyLimit;\n  exports.allSeries = everySeries;\n  exports.any = some;\n  exports.anyLimit = someLimit;\n  exports.anySeries = someSeries;\n  exports.find = detect;\n  exports.findLimit = detectLimit;\n  exports.findSeries = detectSeries;\n  exports.forEach = eachLimit;\n  exports.forEachSeries = eachSeries;\n  exports.forEachLimit = eachLimit$1;\n  exports.forEachOf = eachOf;\n  exports.forEachOfSeries = eachOfSeries;\n  exports.forEachOfLimit = eachOfLimit;\n  exports.inject = reduce;\n  exports.foldl = reduce;\n  exports.foldr = reduceRight;\n  exports.select = filter;\n  exports.selectLimit = filterLimit;\n  exports.selectSeries = filterSeries;\n  exports.wrapSync = asyncify;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","async","slice","arrayLike","start","newLen","Math","max","length","newArr","Array","idx","apply","fn","args","arguments","callArgs","concat","initialParams","callback","pop","call","isObject","value","type","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer","setImmediate$1","asyncify","func","result","e","then","invokeCallback","err","message","Error","error","rethrow","supportsSymbol","Symbol","isAsync","toStringTag","wrapAsync","asyncFn","applyEach$1","eachfn","fns","go","that","cb","freeGlobal","Object","freeSelf","self","root","Function","Symbol$1","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag$1","undefined","getRawTag","isOwn","tag","unmasked","objectProto$1","nativeObjectToString$1","objectToString","nullTag","undefinedTag","symToStringTag","baseGetTag","asyncTag","funcTag","genTag","proxyTag","isFunction","MAX_SAFE_INTEGER","isLength","isArrayLike","breakLoop","noop","once","callFn","iteratorSymbol","iterator","getIterator","coll","baseTimes","n","iteratee","index","isObjectLike","argsTag","baseIsArguments","objectProto$3","hasOwnProperty$2","propertyIsEnumerable","isArguments","isArray","stubFalse","freeExports","nodeType","freeModule","moduleExports","Buffer","nativeIsBuffer","isBuffer","MAX_SAFE_INTEGER$1","reIsUint","isIndex","test","argsTag$1","arrayTag","boolTag","dateTag","errorTag","funcTag$1","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","baseUnary","freeExports$1","freeModule$1","moduleExports$1","freeProcess","nodeUtil","types","require","binding","nodeIsTypedArray","isTypedArray","objectProto$2","hasOwnProperty$1","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","key","push","objectProto$5","isPrototype","Ctor","constructor","proto","overArg","transform","arg","nativeKeys","keys","objectProto$4","hasOwnProperty$3","baseKeys","object","createArrayIterator","i","len","next","createES2015Iterator","item","done","createObjectIterator","obj","okeys","onlyOnce","_eachOfLimit","limit","nextElem","running","looping","iterateeCallback","replenish","elem","eachOfLimit","doLimit","iterable","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","doParallel","_asyncMap","arr","results","counter","_iteratee","_","v","map","applyEach","doParallelLimit","mapLimit","mapSeries","applyEachSeries","arrayEach","array","createBaseFor","fromRight","keysFunc","props","baseFor","baseForOwn","baseFindIndex","predicate","fromIndex","baseIsNaN","strictIndexOf","baseIndexOf","auto","tasks","concurrency","keys$$1","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","task","enqueueTask","dependencies","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","val","rkey","taskFn","currentTask","getDependents","dependent","arrayMap","symbolTag","isSymbol","INFINITY","symbolProto","symbolToString","baseToString","baseSlice","end","castSlice","charsEndIndex","strSymbols","chrSymbols","charsStartIndex","asciiToArray","string","split","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","rsAstralRange$1","rsComboMarksRange$1","reComboHalfMarksRange$1","rsComboSymbolsRange$1","rsComboRange$1","rsVarRange$1","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ$1","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeToArray","match","stringToArray","reTrim","trim","chars","guard","replace","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","parseParams","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","head","tail","setInitial","dll","node","removeLink","prev","empty","insertAfter","newNode","insertBefore","unshift","toArray","curr","data","remove","testFn","queue","worker","payload","_worker","numRunning","workersList","processingScheduled","_insert","insertAtFront","q","started","idle","drain","l","_tasks","_next","splice","buffer","unsaturated","isProcessing","saturated","paused","kill","min","pause","resume","cargo","eachOfSeries","reduce","memo","x","seq","_functions","newargs","nextargs","compose","reverse","_concat","concatLimit","mapResults","concatSeries","constant","values","identity","_createTester","check","getResult","testPassed","testResult","_findGetResult","detect","detectLimit","detectSeries","consoleFunc","console","dir","doDuring","_fn","_test","truth","doWhilst","doUntil","during","_withoutIndex","eachLimit","eachLimit$1","eachSeries","ensureAsync","sync","innerArgs","notId","every","everyLimit","everySeries","baseProperty","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter","filterLimit","filterSeries","forever","errback","groupByLimit","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValues","mapValuesSeries","has","memoize","hasher","queues","memoized","unmemoized","_defer$1","_parallel","parallelLimit","parallelLimit$1","queue$1","items","priorityQueue","priority","nextNode","race","TypeError","reduceRight","reversed","reflect","reflectOn","reflectCallback","cbArg","reflectAll","reject$1","reject","rejectLimit","rejectSeries","constant$1","retry","opts","DEFAULT_TIMES","DEFAULT_INTERVAL","options","times","intervalFunc","parseTimes","acc","t","interval","errorFilter","_task","attempt","retryAttempt","retryable","series","some","Boolean","someLimit","someSeries","sortBy","criteria","comparator","left","right","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","nativeCeil","ceil","nativeMax","baseRange","step","timeLimit","count","timesSeries","accumulator","k","tryEach","res","unmemoize","whilst","until","waterfall","taskIndex","nextTask","each","parallel","timesLimit","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","forEach","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","defineProperty"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/eventstore/node_modules/async/dist/async.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction slice(arrayLike, start) {\n    start = start|0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n    for(var idx = 0; idx < newLen; idx++)  {\n        newArr[idx] = arrayLike[start + idx];\n    }\n    return newArr;\n}\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply = function(fn/*, ...args*/) {\n    var args = slice(arguments, 1);\n    return function(/*callArgs*/) {\n        var callArgs = slice(arguments);\n        return fn.apply(null, args.concat(callArgs));\n    };\n};\n\nvar initialParams = function (fn) {\n    return function (/*...args, callback*/) {\n        var args = slice(arguments);\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    };\n};\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        defer(function () {\n            fn.apply(null, args);\n        });\n    };\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function(value) {\n                invokeCallback(callback, null, value);\n            }, function(err) {\n                invokeCallback(callback, err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (e) {\n        setImmediate$1(rethrow, e);\n    }\n}\n\nfunction rethrow(error) {\n    throw error;\n}\n\nvar supportsSymbol = typeof Symbol === 'function';\n\nfunction isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nfunction applyEach$1(eachfn) {\n    return function(fns/*, ...args*/) {\n        var args = slice(arguments, 1);\n        var go = initialParams(function(args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                wrapAsync(fn).apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key: key} : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function() {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        _iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(function(err, result) {\n            runningTasks--;\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function(val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg){\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            wrapAsync(taskFn).apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function(node) {\n    if (node.prev) node.prev.next = node.next;\n    else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;\n    else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = function () {\n    while(this.head) this.shift();\n    return this;\n};\n\nDLL.prototype.insertAfter = function(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;\n    else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;\n    else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function(node) {\n    if (this.head) this.insertBefore(this.head, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.push = function(node) {\n    if (this.tail) this.insertAfter(this.tail, node);\n    else setInitial(this, node);\n};\n\nDLL.prototype.shift = function() {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function() {\n    return this.tail && this.removeLink(this.tail);\n};\n\nDLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for(var idx = 0; idx < this.length; idx++) {\n        arr[idx] = curr.data;\n        curr = curr.next;\n    }\n    return arr;\n};\n\nDLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while(!!curr) {\n        var next = curr.next;\n        if (testFn(curr)) {\n            this.removeLink(curr);\n        }\n        curr = next;\n    }\n    return this;\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(function() {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    }\n\n    function _next(tasks) {\n        return function(err){\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = baseIndexOf(workersList, task, 0);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback.apply(task, arguments);\n\n                if (err != null) {\n                    q.error(err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        };\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated:noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        remove: function (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n\n                if (numRunning === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return numRunning;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOfSeries(coll, function(x, i, callback) {\n        _iteratee(memo, x, function(err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function(err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(/*...functions*/) {\n    var _functions = arrayMap(arguments, wrapAsync);\n    return function(/*...args*/) {\n        var args = slice(arguments);\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(_functions, args, function(newargs, fn, cb) {\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\n                var nextargs = slice(arguments, 1);\n                cb(err, nextargs);\n            }));\n        },\n        function(err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = function(/*...args*/) {\n    return seq.apply(null, slice(arguments).reverse());\n};\n\nvar _concat = Array.prototype.concat;\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err /*, ...args*/) {\n            if (err) return callback(err);\n            return callback(null, slice(arguments, 1));\n        });\n    }, function(err, mapResults) {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = _concat.apply(result, mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doLimit(concatLimit, Infinity);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doLimit(concatLimit, 1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = function(/*...values*/) {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function (/*...ignoredArgs, callback*/) {\n        var callback = arguments[arguments.length - 1];\n        return callback.apply(this, args);\n    };\n};\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nfunction _createTester(check, getResult) {\n    return function(eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function(value, _, callback) {\n            iteratee(value, function(err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function(err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return function (fn/*, ...args*/) {\n        var args = slice(arguments, 1);\n        args.push(function (err/*, ...args*/) {\n            var args = slice(arguments, 1);\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        });\n        wrapAsync(fn).apply(null, args);\n    };\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occurred, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        args.push(check);\n        _test.apply(this, args);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    check(null, true);\n\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        var args = slice(arguments, 1);\n        if (test.apply(this, args)) return _iteratee(next);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with any non-error callback results of\n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function() {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {AsyncFunction} fn - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occurred, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n\n    function next(err) {\n        if (err) return callback(err);\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        _fn(next);\n    }\n\n    _test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupByLimit = function(coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function(val, callback) {\n        _iteratee(val, function(err, key) {\n            if (err) return callback(err);\n            return callback(null, {key: key, val: val});\n        });\n    }, function(err, mapResults) {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var key = mapResults[i].key;\n                var val = mapResults[i].val;\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n};\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nvar groupBy = doLimit(groupByLimit, Infinity);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n */\nvar groupBySeries = doLimit(groupByLimit, 1);\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    eachOfLimit(obj, limit, function(val, key, next) {\n        _iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function() {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn.apply(null, args.concat(function(/*args*/) {\n                var args = slice(arguments);\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            }));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        wrapAsync(task)(function (err, result) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            }\n            results[key] = result;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue(function (items, cb) {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function() {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(function callback(error, cbArg) {\n            if (error) {\n                reflectCallback(null, { error: error });\n            } else {\n                var value;\n                if (arguments.length <= 2) {\n                    value = cbArg;\n                } else {\n                    value = slice(arguments, 1);\n                }\n                reflectCallback(null, { value: value });\n            }\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function(task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function(value, cb) {\n        iteratee(value, function(err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task(function(err) {\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    var _task = wrapAsync(task);\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            _task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    map(coll, function (x, callback) {\n        _iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, {value: x, criteria: criteria});\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams(function (args, callback) {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push(function () {\n            if (!timedOut) {\n                callback.apply(null, arguments);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn.apply(null, args);\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf(coll, function(v, k, cb) {\n        _iteratee(accumulator, v, k, cb);\n    }, function(err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function(task, callback) {\n        wrapAsync(task)(function (err, res/*, ...args*/) {\n            if (arguments.length > 2) {\n                result = slice(arguments, 1);\n            } else {\n                result = res;\n            }\n            error = err;\n            callback(!err);\n        });\n    }, function () {\n        callback(error, result);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    if (!test()) return callback(null);\n    var next = function(err/*, ...args*/) {\n        if (err) return callback(err);\n        if (test()) return _iteratee(next);\n        var args = slice(arguments, 1);\n        callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n}\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, iteratee, callback) {\n    whilst(function() {\n        return !test.apply(this, arguments);\n    }, iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        args.push(onlyOnce(next));\n        task.apply(null, args);\n    }\n\n    function next(err/*, ...args*/) {\n        if (err || taskIndex === tasks.length) {\n            return callback.apply(null, arguments);\n        }\n        nextTask(slice(arguments, 1));\n    }\n\n    nextTask([]);\n};\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction\n */\n\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\n\nvar index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.apply = apply;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatLimit = concatLimit;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.groupBy = groupBy;\nexports.groupByLimit = groupByLimit;\nexports.groupBySeries = groupBySeries;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.tryEach = tryEach;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"mappings":"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,EAAMiL,OAAN,CAAR;IACH,CARK,CAAN;EASH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIK,GAAG,GAAGR,UAAU,CAACC,SAAD,CAApB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIQ,SAAS,GAAG5K,WAAW,CAAC2K,GAAD,CAA3B;;EAEA,SAASE,eAAT,CAAyBrN,EAAzB,EAA6B;IACzB,OAAO,UAAUsL,GAAV,EAAeI,KAAf,EAAsBjG,QAAtB,EAAgCnF,QAAhC,EAA0C;MAC7C,OAAON,EAAE,CAACyL,YAAY,CAACC,KAAD,CAAb,EAAsBJ,GAAtB,EAA2BhJ,SAAS,CAACmD,QAAD,CAApC,EAAgDnF,QAAhD,CAAT;IACH,CAFD;EAGH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIgN,QAAQ,GAAGD,eAAe,CAACT,SAAD,CAA9B;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIW,SAAS,GAAGrB,OAAO,CAACoB,QAAD,EAAW,CAAX,CAAvB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIE,eAAe,GAAGhL,WAAW,CAAC+K,SAAD,CAAjC;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,SAASE,SAAT,CAA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IAAIc,UAAU,KAAKK,CAAC,CAACjI,WAArB,EAAkC;YAC9BiI,CAAC,CAACW,SAAF;UACH;;UAED,IAAIxU,EAAE,GAAG2I,QAAQ,CAACwL,KAAK,CAACxI,KAAD,CAAN,CAAjB;;UACA4H,OAAO,CAACN,IAAD,EAAOjT,EAAP,CAAP;QACH;;QACDuU,YAAY,GAAG,KAAf;MACH,CAzDG;MA0DJzX,MAAM,EAAE,YAAY;QAChB,OAAO+W,CAAC,CAACK,MAAF,CAASpX,MAAhB;MACH,CA5DG;MA6DJiM,OAAO,EAAE,YAAY;QACjB,OAAOyK,UAAP;MACH,CA/DG;MAgEJC,WAAW,EAAE,YAAY;QACrB,OAAOA,WAAP;MACH,CAlEG;MAmEJM,IAAI,EAAE,YAAW;QACb,OAAOF,CAAC,CAACK,MAAF,CAASpX,MAAT,GAAkB0W,UAAlB,KAAiC,CAAxC;MACH,CArEG;MAsEJoB,KAAK,EAAE,YAAY;QACff,CAAC,CAACY,MAAF,GAAW,IAAX;MACH,CAxEG;MAyEJI,MAAM,EAAE,YAAY;QAChB,IAAIhB,CAAC,CAACY,MAAF,KAAa,KAAjB,EAAwB;UAAE;QAAS;;QACnCZ,CAAC,CAACY,MAAF,GAAW,KAAX;QACAhW,cAAc,CAACoV,CAAC,CAAC3V,OAAH,CAAd;MACH;IA7EG,CAAR;IA+EA,OAAO2V,CAAP;EACH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASiB,KAAT,CAAezB,MAAf,EAAuBC,OAAvB,EAAgC;IAC5B,OAAOF,KAAK,CAA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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAImW,MAAM,GAAGxO,UAAU,CAACuO,OAAD,CAAvB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIE,WAAW,GAAG/N,eAAe,CAAC6N,OAAD,CAAjC;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIG,YAAY,GAAGnP,OAAO,CAACkP,WAAD,EAAc,CAAd,CAA1B;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,SAASE,OAAT,CAAiBtb,EAAjB,EAAqBub,OAArB,EAA8B;IAC1B,IAAInQ,IAAI,GAAGI,QAAQ,CAAC+P,OAAO,IAAIvW,IAAZ,CAAnB;IACA,IAAImK,IAAI,GAAG7M,SAAS,CAAC8X,WAAW,CAACpa,EAAD,CAAZ,CAApB;;IAEA,SAASiL,IAAT,CAAcpJ,GAAd,EAAmB;MACf,IAAIA,GAAJ,EAAS,OAAOuJ,IAAI,CAACvJ,GAAD,CAAX;MACTsN,IAAI,CAAClE,IAAD,CAAJ;IACH;;IACDA,IAAI;EACP;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIuQ,YAAY,GAAG,UAASlW,IAAT,EAAeoG,KAAf,EAAsBjG,QAAtB,EAAgCnF,QAAhC,EAA0C;IACzDA,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;;IACA,IAAIgI,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;IACA6H,QAAQ,CAAChI,IAAD,EAAOoG,KAAP,EAAc,UAAS0E,GAAT,EAAc9P,QAAd,EAAwB;MAC1C0M,SAAS,CAACoD,GAAD,EAAM,UAASvO,GAAT,EAAciI,GAAd,EAAmB;QAC9B,IAAIjI,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;QACT,OAAOvB,QAAQ,CAAC,IAAD,EAAO;UAACwJ,GAAG,EAAEA,GAAN;UAAWsG,GAAG,EAAEA;QAAhB,CAAP,CAAf;MACH,CAHQ,CAAT;IAIH,CALO,EAKL,UAASvO,GAAT,EAAc2W,UAAd,EAA0B;MACzB,IAAI/W,MAAM,GAAG,EAAb,CADyB,CAEzB;;MACA,IAAI8B,cAAc,GAAGR,MAAM,CAACO,SAAP,CAAiBC,cAAtC;;MAEA,KAAK,IAAIwH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyN,UAAU,CAAC7Y,MAA/B,EAAuCoL,CAAC,EAAxC,EAA4C;QACxC,IAAIyN,UAAU,CAACzN,CAAD,CAAd,EAAmB;UACf,IAAIjB,GAAG,GAAG0O,UAAU,CAACzN,CAAD,CAAV,CAAcjB,GAAxB;UACA,IAAIsG,GAAG,GAAGoI,UAAU,CAACzN,CAAD,CAAV,CAAcqF,GAAxB;;UAEA,IAAI7M,cAAc,CAAC/C,IAAf,CAAoBiB,MAApB,EAA4BqI,GAA5B,CAAJ,EAAsC;YAClCrI,MAAM,CAACqI,GAAD,CAAN,CAAYC,IAAZ,CAAiBqG,GAAjB;UACH,CAFD,MAEO;YACH3O,MAAM,CAACqI,GAAD,CAAN,GAAc,CAACsG,GAAD,CAAd;UACH;QACJ;MACJ;;MAED,OAAO9P,QAAQ,CAACuB,GAAD,EAAMJ,MAAN,CAAf;IACH,CAxBO,CAAR;EAyBH,CA5BD;EA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIga,OAAO,GAAGvP,OAAO,CAACsP,YAAD,EAAehP,QAAf,CAArB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIkP,aAAa,GAAGxP,OAAO,CAACsP,YAAD,EAAe,CAAf,CAA3B;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIG,GAAG,GAAGrC,WAAW,CAAC,KAAD,CAArB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,SAASsC,cAAT,CAAwBtQ,GAAxB,EAA6BI,KAA7B,EAAoCjG,QAApC,EAA8CnF,QAA9C,EAAwD;IACpDA,QAAQ,GAAG2E,IAAI,CAAC3E,QAAQ,IAAI0E,IAAb,CAAf;IACA,IAAI6W,MAAM,GAAG,EAAb;;IACA,IAAI7O,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;IACAwG,WAAW,CAACX,GAAD,EAAMI,KAAN,EAAa,UAAS0E,GAAT,EAActG,GAAd,EAAmBmB,IAAnB,EAAyB;MAC7C+B,SAAS,CAACoD,GAAD,EAAMtG,GAAN,EAAW,UAAUjI,GAAV,EAAeJ,MAAf,EAAuB;QACvC,IAAII,GAAJ,EAAS,OAAOoJ,IAAI,CAACpJ,GAAD,CAAX;QACTga,MAAM,CAAC/R,GAAD,CAAN,GAAcrI,MAAd;QACAwJ,IAAI;MACP,CAJQ,CAAT;IAKH,CANU,EAMR,UAAUpJ,GAAV,EAAe;MACdvB,QAAQ,CAACuB,GAAD,EAAMga,MAAN,CAAR;IACH,CARU,CAAX;EASH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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AqBxJ,QAArB,EAA+B;MACzCgC,SAAS,CAAC6M,IAAD,CAAT,CAAgB,UAAUtN,GAAV,EAAeJ,MAAf,EAAuB;QACnC,IAAIvB,SAAS,CAACP,MAAV,GAAmB,CAAvB,EAA0B;UACtB8B,MAAM,GAAGpC,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAd;QACH;;QACD4M,OAAO,CAAChD,GAAD,CAAP,GAAerI,MAAf;QACAnB,QAAQ,CAACuB,GAAD,CAAR;MACH,CAND;IAOH,CARK,EAQH,UAAUA,GAAV,EAAe;MACdvB,QAAQ,CAACuB,GAAD,EAAMiL,OAAN,CAAR;IACH,CAVK,CAAN;EAWH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAAS0P,aAAT,CAAuBhO,KAAvB,EAA8BlO,QAA9B,EAAwC;IACpCic,SAAS,CAAC9P,MAAD,EAAS+B,KAAT,EAAgBlO,QAAhB,CAAT;EACH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASmc,eAAT,CAAyBjO,KAAzB,EAAgC9C,KAAhC,EAAuCpL,QAAvC,EAAiD;IAC7Cic,SAAS,CAAC9Q,YAAY,CAACC,KAAD,CAAb,EAAsB8C,KAAtB,EAA6BlO,QAA7B,CAAT;EACH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIoc,OAAO,GAAG,UAAUxG,MAAV,EAAkBzH,WAAlB,EAA+B;IACzC,IAAI2H,OAAO,GAAG9T,SAAS,CAAC4T,MAAD,CAAvB;;IACA,OAAOD,KAAK,CAAC,UAAU0G,KAAV,EAAiB9Z,EAAjB,EAAqB;MAC9BuT,OAAO,CAACuG,KAAK,CAAC,CAAD,CAAN,EAAW9Z,EAAX,CAAP;IACH,CAFW,EAET4L,WAFS,EAEI,CAFJ,CAAZ;EAGH,CALD;EAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAImO,aAAa,GAAG,UAAS1G,MAAT,EAAiBzH,WAAjB,EAA8B;IAC9C;IACA,IAAIiI,CAAC,GAAGgG,OAAO,CAACxG,MAAD,EAASzH,WAAT,CAAf,CAF8C,CAI9C;;IACAiI,CAAC,CAAC3M,IAAF,GAAS,UAAS+L,IAAT,EAAe+G,QAAf,EAAyBvc,QAAzB,EAAmC;MACxC,IAAIA,QAAQ,IAAI,IAAhB,EAAsBA,QAAQ,GAAG0E,IAAX;;MACtB,IAAI,OAAO1E,QAAP,KAAoB,UAAxB,EAAoC;QAChC,MAAM,IAAIyB,KAAJ,CAAU,kCAAV,CAAN;MACH;;MACD2U,CAAC,CAACC,OAAF,GAAY,IAAZ;;MACA,IAAI,CAACzQ,OAAO,CAAC4P,IAAD,CAAZ,EAAoB;QAChBA,IAAI,GAAG,CAACA,IAAD,CAAP;MACH;;MACD,IAAIA,IAAI,CAACnW,MAAL,KAAgB,CAApB,EAAuB;QACnB;QACA,OAAO2B,cAAc,CAAC,YAAW;UAC7BoV,CAAC,CAACG,KAAF;QACH,CAFoB,CAArB;MAGH;;MAEDgG,QAAQ,GAAGA,QAAQ,IAAI,CAAvB;MACA,IAAIC,QAAQ,GAAGpG,CAAC,CAACK,MAAF,CAAS/B,IAAxB;;MACA,OAAO8H,QAAQ,IAAID,QAAQ,IAAIC,QAAQ,CAACD,QAAxC,EAAkD;QAC9CC,QAAQ,GAAGA,QAAQ,CAAC7R,IAApB;MACH;;MAED,KAAK,IAAIF,CAAC,GAAG,CAAR,EAAW+L,CAAC,GAAGhB,IAAI,CAACnW,MAAzB,EAAiCoL,CAAC,GAAG+L,CAArC,EAAwC/L,CAAC,EAAzC,EAA6C;QACzC,IAAII,IAAI,GAAG;UACP2K,IAAI,EAAEA,IAAI,CAAC/K,CAAD,CADH;UAEP8R,QAAQ,EAAEA,QAFH;UAGPvc,QAAQ,EAAEA;QAHH,CAAX;;QAMA,IAAIwc,QAAJ,EAAc;UACVpG,CAAC,CAACK,MAAF,CAASrB,YAAT,CAAsBoH,QAAtB,EAAgC3R,IAAhC;QACH,CAFD,MAEO;UACHuL,CAAC,CAACK,MAAF,CAAShN,IAAT,CAAcoB,IAAd;QACH;MACJ;;MACD7J,cAAc,CAACoV,CAAC,CAAC3V,OAAH,CAAd;IACH,CApCD,CAL8C,CA2C9C;;;IACA,OAAO2V,CAAC,CAACf,OAAT;IAEA,OAAOe,CAAP;EACH,CA/CD;EAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASqG,IAAT,CAAcvO,KAAd,EAAqBlO,QAArB,EAA+B;IAC3BA,QAAQ,GAAG2E,IAAI,CAAC3E,QAAQ,IAAI0E,IAAb,CAAf;IACA,IAAI,CAACkB,OAAO,CAACsI,KAAD,CAAZ,EAAqB,OAAOlO,QAAQ,CAAC,IAAI0c,SAAJ,CAAc,sDAAd,CAAD,CAAf;IACrB,IAAI,CAACxO,KAAK,CAAC7O,MAAX,EAAmB,OAAOW,QAAQ,EAAf;;IACnB,KAAK,IAAIyK,CAAC,GAAG,CAAR,EAAW+L,CAAC,GAAGtI,KAAK,CAAC7O,MAA1B,EAAkCoL,CAAC,GAAG+L,CAAtC,EAAyC/L,CAAC,EAA1C,EAA8C;MAC1CzI,SAAS,CAACkM,KAAK,CAACzD,CAAD,CAAN,CAAT,CAAoBzK,QAApB;IACH;EACJ;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAAS2c,WAAT,CAAsBvP,KAAtB,EAA6BoK,IAA7B,EAAmCrS,QAAnC,EAA6CnF,QAA7C,EAAuD;IACnD,IAAI4c,QAAQ,GAAG7d,KAAK,CAACqO,KAAD,CAAL,CAAa2K,OAAb,EAAf;IACAR,MAAM,CAACqF,QAAD,EAAWpF,IAAX,EAAiBrS,QAAjB,EAA2BnF,QAA3B,CAAN;EACH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAAS6c,OAAT,CAAiBnd,EAAjB,EAAqB;IACjB,IAAI0Z,GAAG,GAAGpX,SAAS,CAACtC,EAAD,CAAnB;;IACA,OAAOK,aAAa,CAAC,SAAS+c,SAAT,CAAmBnd,IAAnB,EAAyBod,eAAzB,EAA0C;MAC3Dpd,IAAI,CAAC8J,IAAL,CAAU,SAASzJ,QAAT,CAAkB0B,KAAlB,EAAyBsb,KAAzB,EAAgC;QACtC,IAAItb,KAAJ,EAAW;UACPqb,eAAe,CAAC,IAAD,EAAO;YAAErb,KAAK,EAAEA;UAAT,CAAP,CAAf;QACH,CAFD,MAEO;UACH,IAAItB,KAAJ;;UACA,IAAIR,SAAS,CAACP,MAAV,IAAoB,CAAxB,EAA2B;YACvBe,KAAK,GAAG4c,KAAR;UACH,CAFD,MAEO;YACH5c,KAAK,GAAGrB,KAAK,CAACa,SAAD,EAAY,CAAZ,CAAb;UACH;;UACDmd,eAAe,CAAC,IAAD,EAAO;YAAE3c,KAAK,EAAEA;UAAT,CAAP,CAAf;QACH;MACJ,CAZD;MAcA,OAAOgZ,GAAG,CAAC3Z,KAAJ,CAAU,IAAV,EAAgBE,IAAhB,CAAP;IACH,CAhBmB,CAApB;EAiBH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASsd,UAAT,CAAoB/O,KAApB,EAA2B;IACvB,IAAI1B,OAAJ;;IACA,IAAI5G,OAAO,CAACsI,KAAD,CAAX,EAAoB;MAChB1B,OAAO,GAAG4D,QAAQ,CAAClC,KAAD,EAAQ2O,OAAR,CAAlB;IACH,CAFD,MAEO;MACHrQ,OAAO,GAAG,EAAV;MACAkB,UAAU,CAACQ,KAAD,EAAQ,UAASW,IAAT,EAAerF,GAAf,EAAoB;QAClCgD,OAAO,CAAChD,GAAD,CAAP,GAAeqT,OAAO,CAAC3c,IAAR,CAAa,IAAb,EAAmB2O,IAAnB,CAAf;MACH,CAFS,CAAV;IAGH;;IACD,OAAOrC,OAAP;EACH;;EAED,SAAS0Q,QAAT,CAAkB/a,MAAlB,EAA0BoK,GAA1B,EAA+BpH,QAA/B,EAAyCnF,QAAzC,EAAmD;IAC/C4a,OAAO,CAACzY,MAAD,EAASoK,GAAT,EAAc,UAASnM,KAAT,EAAgBmC,EAAhB,EAAoB;MACrC4C,QAAQ,CAAC/E,KAAD,EAAQ,UAASmB,GAAT,EAAcqL,CAAd,EAAiB;QAC7BrK,EAAE,CAAChB,GAAD,EAAM,CAACqL,CAAP,CAAF;MACH,CAFO,CAAR;IAGH,CAJM,EAIJ5M,QAJI,CAAP;EAKH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAImd,MAAM,GAAG9Q,UAAU,CAAC6Q,QAAD,CAAvB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIE,WAAW,GAAGrQ,eAAe,CAACmQ,QAAD,CAAjC;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIG,YAAY,GAAGzR,OAAO,CAACwR,WAAD,EAAc,CAAd,CAA1B;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,SAASE,UAAT,CAAoBld,KAApB,EAA2B;IACzB,OAAO,YAAW;MAChB,OAAOA,KAAP;IACD,CAFD;EAGD;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASmd,KAAT,CAAeC,IAAf,EAAqB3O,IAArB,EAA2B7O,QAA3B,EAAqC;IACjC,IAAIyd,aAAa,GAAG,CAApB;IACA,IAAIC,gBAAgB,GAAG,CAAvB;IAEA,IAAIC,OAAO,GAAG;MACVC,KAAK,EAAEH,aADG;MAEVI,YAAY,EAAEP,UAAU,CAACI,gBAAD;IAFd,CAAd;;IAKA,SAASI,UAAT,CAAoBC,GAApB,EAAyBC,CAAzB,EAA4B;MACxB,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;QACvBD,GAAG,CAACH,KAAJ,GAAY,CAACI,CAAC,CAACJ,KAAH,IAAYH,aAAxB;QAEAM,GAAG,CAACF,YAAJ,GAAmB,OAAOG,CAAC,CAACC,QAAT,KAAsB,UAAtB,GACfD,CAAC,CAACC,QADa,GAEfX,UAAU,CAAC,CAACU,CAAC,CAACC,QAAH,IAAeP,gBAAhB,CAFd;QAIAK,GAAG,CAACG,WAAJ,GAAkBF,CAAC,CAACE,WAApB;MACH,CARD,MAQO,IAAI,OAAOF,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAA1C,EAAoD;QACvDD,GAAG,CAACH,KAAJ,GAAY,CAACI,CAAD,IAAMP,aAAlB;MACH,CAFM,MAEA;QACH,MAAM,IAAIhc,KAAJ,CAAU,mCAAV,CAAN;MACH;IACJ;;IAED,IAAI7B,SAAS,CAACP,MAAV,GAAmB,CAAnB,IAAwB,OAAOme,IAAP,KAAgB,UAA5C,EAAwD;MACpDxd,QAAQ,GAAG6O,IAAI,IAAInK,IAAnB;MACAmK,IAAI,GAAG2O,IAAP;IACH,CAHD,MAGO;MACHM,UAAU,CAACH,OAAD,EAAUH,IAAV,CAAV;MACAxd,QAAQ,GAAGA,QAAQ,IAAI0E,IAAvB;IACH;;IAED,IAAI,OAAOmK,IAAP,KAAgB,UAApB,EAAgC;MAC5B,MAAM,IAAIpN,KAAJ,CAAU,mCAAV,CAAN;IACH;;IAED,IAAI0c,KAAK,GAAGnc,SAAS,CAAC6M,IAAD,CAArB;;IAEA,IAAIuP,OAAO,GAAG,CAAd;;IACA,SAASC,YAAT,GAAwB;MACpBF,KAAK,CAAC,UAAS5c,GAAT,EAAc;QAChB,IAAIA,GAAG,IAAI6c,OAAO,KAAKT,OAAO,CAACC,KAA3B,KACC,OAAOD,OAAO,CAACO,WAAf,IAA8B,UAA9B,IACGP,OAAO,CAACO,WAAR,CAAoB3c,GAApB,CAFJ,CAAJ,EAEmC;UAC/BX,UAAU,CAACyd,YAAD,EAAeV,OAAO,CAACE,YAAR,CAAqBO,OAArB,CAAf,CAAV;QACH,CAJD,MAIO;UACHpe,QAAQ,CAACP,KAAT,CAAe,IAAf,EAAqBG,SAArB;QACH;MACJ,CARI,CAAL;IASH;;IAEDye,YAAY;EACf;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIC,SAAS,GAAG,UAAUd,IAAV,EAAgB3O,IAAhB,EAAsB;IAClC,IAAI,CAACA,IAAL,EAAW;MACPA,IAAI,GAAG2O,IAAP;MACAA,IAAI,GAAG,IAAP;IACH;;IACD,IAAIW,KAAK,GAAGnc,SAAS,CAAC6M,IAAD,CAArB;;IACA,OAAO9O,aAAa,CAAC,UAAUJ,IAAV,EAAgBK,QAAhB,EAA0B;MAC3C,SAASgQ,MAAT,CAAgBzN,EAAhB,EAAoB;QAChB4b,KAAK,CAAC1e,KAAN,CAAY,IAAZ,EAAkBE,IAAI,CAACG,MAAL,CAAYyC,EAAZ,CAAlB;MACH;;MAED,IAAIib,IAAJ,EAAUD,KAAK,CAACC,IAAD,EAAOxN,MAAP,EAAehQ,QAAf,CAAL,CAAV,KACKud,KAAK,CAACvN,MAAD,EAAShQ,QAAT,CAAL;IAER,CARmB,CAApB;EASH,CAfD;EAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,SAASue,MAAT,CAAgBrQ,KAAhB,EAAuBlO,QAAvB,EAAiC;IAC7Bic,SAAS,CAAC3E,YAAD,EAAepJ,KAAf,EAAsBlO,QAAtB,CAAT;EACH;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACA,IAAIwe,IAAI,GAAGnS,UAAU,CAACkM,aAAa,CAACkG,OAAD,EAAUnG,QAAV,CAAd,CAArB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIoG,SAAS,GAAG3R,eAAe,CAACwL,aAAa,CAACkG,OAAD,EAAUnG,QAAV,CAAd,CAA/B;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,IAAIqG,UAAU,GAAG/S,OAAO,CAAC8S,SAAD,EAAY,CAAZ,CAAxB;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACA,SAASE,MAAT,CAAiB5Z,IAAjB,EAAuBG,QAAvB,EAAiCnF,QAAjC,EAA2C;IACvC,IAAI0M,SAAS,GAAG1K,SAAS,CAACmD,QAAD,CAAzB;;IACA0H,GAAG,CAAC7H,IAAD,EAAO,UAAUyS,CAAV,EAAazX,QAAb,EAAuB;MAC7B0M,SAAS,CAAC+K,CAAD,EAAI,UAAUlW,GAAV,EAAesd,QAAf,EAAyB;QAClC,IAAItd,GAAJ,EAAS,OAAOvB,QAAQ,CAACuB,GAAD,CAAf;QACTvB,QAAQ,CAAC,IAAD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"},"metadata":{},"sourceType":"script"}