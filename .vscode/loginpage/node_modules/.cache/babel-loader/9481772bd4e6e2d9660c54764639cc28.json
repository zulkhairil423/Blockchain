{"ast":null,"code":"var Utils = require(\"../util\"),\n    Constants = Utils.Constants;\n/* The entries in the end of central directory */\n\n\nmodule.exports = function () {\n  var _volumeEntries = 0,\n      _totalEntries = 0,\n      _size = 0,\n      _offset = 0,\n      _commentLength = 0;\n  return {\n    get diskEntries() {\n      return _volumeEntries;\n    },\n\n    set diskEntries(\n    /*Number*/\n    val) {\n      _volumeEntries = _totalEntries = val;\n    },\n\n    get totalEntries() {\n      return _totalEntries;\n    },\n\n    set totalEntries(\n    /*Number*/\n    val) {\n      _totalEntries = _volumeEntries = val;\n    },\n\n    get size() {\n      return _size;\n    },\n\n    set size(\n    /*Number*/\n    val) {\n      _size = val;\n    },\n\n    get offset() {\n      return _offset;\n    },\n\n    set offset(\n    /*Number*/\n    val) {\n      _offset = val;\n    },\n\n    get commentLength() {\n      return _commentLength;\n    },\n\n    set commentLength(\n    /*Number*/\n    val) {\n      _commentLength = val;\n    },\n\n    get mainHeaderSize() {\n      return Constants.ENDHDR + _commentLength;\n    },\n\n    loadFromBinary: function (\n    /*Buffer*/\n    data) {\n      // data should be 22 bytes and start with \"PK 05 06\"\n      // or be 56+ bytes and start with \"PK 06 06\" for Zip64\n      if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) && (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\n        throw new Error(Utils.Errors.INVALID_END);\n      }\n\n      if (data.readUInt32LE(0) === Constants.ENDSIG) {\n        // number of entries on this volume\n        _volumeEntries = data.readUInt16LE(Constants.ENDSUB); // total number of entries\n\n        _totalEntries = data.readUInt16LE(Constants.ENDTOT); // central directory size in bytes\n\n        _size = data.readUInt32LE(Constants.ENDSIZ); // offset of first CEN header\n\n        _offset = data.readUInt32LE(Constants.ENDOFF); // zip file comment length\n\n        _commentLength = data.readUInt16LE(Constants.ENDCOM);\n      } else {\n        // number of entries on this volume\n        _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB); // total number of entries\n\n        _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT); // central directory size in bytes\n\n        _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ); // offset of first CEN header\n\n        _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\n        _commentLength = 0;\n      }\n    },\n    toBinary: function () {\n      var b = Buffer.alloc(Constants.ENDHDR + _commentLength); // \"PK 05 06\" signature\n\n      b.writeUInt32LE(Constants.ENDSIG, 0);\n      b.writeUInt32LE(0, 4); // number of entries on this volume\n\n      b.writeUInt16LE(_volumeEntries, Constants.ENDSUB); // total number of entries\n\n      b.writeUInt16LE(_totalEntries, Constants.ENDTOT); // central directory size in bytes\n\n      b.writeUInt32LE(_size, Constants.ENDSIZ); // offset of first CEN header\n\n      b.writeUInt32LE(_offset, Constants.ENDOFF); // zip file comment length\n\n      b.writeUInt16LE(_commentLength, Constants.ENDCOM); // fill comment memory with spaces so no garbage is left there\n\n      b.fill(\" \", Constants.ENDHDR);\n      return b;\n    },\n    toString: function () {\n      return '{\\n' + '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" + '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" + '\\t\"size\" : ' + _size + \" bytes,\\n\" + '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" + '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" + '}';\n    }\n  };\n};","map":{"version":3,"names":["Utils","require","Constants","module","exports","_volumeEntries","_totalEntries","_size","_offset","_commentLength","diskEntries","val","totalEntries","size","offset","commentLength","mainHeaderSize","ENDHDR","loadFromBinary","data","length","readUInt32LE","ENDSIG","ZIP64HDR","ZIP64SIG","Error","Errors","INVALID_END","readUInt16LE","ENDSUB","ENDTOT","ENDSIZ","ENDOFF","ENDCOM","readBigUInt64LE","ZIP64SUB","ZIP64TOT","ZIP64SIZ","ZIP64OFF","toBinary","b","Buffer","alloc","writeUInt32LE","writeUInt16LE","fill","toString","toUpperCase"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/adm-zip/headers/mainHeader.js"],"sourcesContent":["var Utils = require(\"../util\"),\r\n    Constants = Utils.Constants;\r\n\r\n/* The entries in the end of central directory */\r\nmodule.exports = function () {\r\n    var _volumeEntries = 0,\r\n        _totalEntries = 0,\r\n        _size = 0,\r\n        _offset = 0,\r\n        _commentLength = 0;\r\n\r\n    return {\r\n        get diskEntries () { return _volumeEntries },\r\n        set diskEntries (/*Number*/val) { _volumeEntries = _totalEntries = val; },\r\n\r\n        get totalEntries () { return _totalEntries },\r\n        set totalEntries (/*Number*/val) { _totalEntries = _volumeEntries = val; },\r\n\r\n        get size () { return _size },\r\n        set size (/*Number*/val) { _size = val; },\r\n\r\n        get offset () { return _offset },\r\n        set offset (/*Number*/val) { _offset = val; },\r\n\r\n        get commentLength () { return _commentLength },\r\n        set commentLength (/*Number*/val) { _commentLength = val; },\r\n\r\n        get mainHeaderSize () {\r\n            return Constants.ENDHDR + _commentLength;\r\n        },\r\n\r\n        loadFromBinary : function(/*Buffer*/data) {\r\n            // data should be 22 bytes and start with \"PK 05 06\"\r\n            // or be 56+ bytes and start with \"PK 06 06\" for Zip64\r\n            if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) &&\r\n                (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\r\n\r\n                throw new Error(Utils.Errors.INVALID_END);\r\n            }\r\n\r\n            if (data.readUInt32LE(0) === Constants.ENDSIG) {\r\n                // number of entries on this volume\r\n                _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\r\n                // total number of entries\r\n                _totalEntries = data.readUInt16LE(Constants.ENDTOT);\r\n                // central directory size in bytes\r\n                _size = data.readUInt32LE(Constants.ENDSIZ);\r\n                // offset of first CEN header\r\n                _offset = data.readUInt32LE(Constants.ENDOFF);\r\n                // zip file comment length\r\n                _commentLength = data.readUInt16LE(Constants.ENDCOM);\r\n            } else {\r\n                // number of entries on this volume\r\n                _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\r\n                // total number of entries\r\n                _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\r\n                // central directory size in bytes\r\n                _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ);\r\n                // offset of first CEN header\r\n                _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\r\n\r\n                _commentLength = 0;\r\n            }\r\n\r\n        },\r\n\r\n        toBinary : function() {\r\n           var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\r\n            // \"PK 05 06\" signature\r\n            b.writeUInt32LE(Constants.ENDSIG, 0);\r\n            b.writeUInt32LE(0, 4);\r\n            // number of entries on this volume\r\n            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\r\n            // total number of entries\r\n            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\r\n            // central directory size in bytes\r\n            b.writeUInt32LE(_size, Constants.ENDSIZ);\r\n            // offset of first CEN header\r\n            b.writeUInt32LE(_offset, Constants.ENDOFF);\r\n            // zip file comment length\r\n            b.writeUInt16LE(_commentLength, Constants.ENDCOM);\r\n            // fill comment memory with spaces so no garbage is left there\r\n            b.fill(\" \", Constants.ENDHDR);\r\n\r\n            return b;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" +\r\n                '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" +\r\n                '\\t\"size\" : ' + _size + \" bytes,\\n\" +\r\n                '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" +\r\n                '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" +\r\n            '}';\r\n        }\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}