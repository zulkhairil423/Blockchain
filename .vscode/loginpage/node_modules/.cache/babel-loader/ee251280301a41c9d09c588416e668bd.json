{"ast":null,"code":"'use strict';\n\nconst {\n  Blob\n} = require('buffer');\n\nconst {\n  types\n} = require('util');\n\nconst {\n  kState\n} = require('./symbols');\n\nconst {\n  isBlobLike\n} = require('./util');\n\nconst {\n  webidl\n} = require('./webidl');\n\nclass File extends Blob {\n  constructor(fileBits, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required');\n    }\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits);\n    fileName = webidl.converters.USVString(fileName);\n    options = webidl.converters.FilePropertyBag(options); // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n    // 2. Let n be the fileName argument to the constructor.\n\n    const n = fileName; // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    // Note: Blob handles both of these steps for us\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n\n    const d = options.lastModified; // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), {\n      type: options.type\n    });\n    this[kState] = {\n      name: n,\n      lastModified: d\n    };\n  }\n\n  get name() {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].name;\n  }\n\n  get lastModified() {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n}\n\nclass FileLike {\n  constructor(blobLike, fileName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // TODO: argument idl type check\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName; // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n\n    const t = options.type; //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n\n    const d = options.lastModified ?? Date.now(); // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    };\n  }\n\n  stream() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.stream(...arguments);\n  }\n\n  arrayBuffer() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.arrayBuffer(...arguments);\n  }\n\n  slice() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.slice(...arguments);\n  }\n\n  text() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.text(...arguments);\n  }\n\n  get size() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.size;\n  }\n\n  get type() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].blobLike.type;\n  }\n\n  get name() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].name;\n  }\n\n  get lastModified() {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation');\n    }\n\n    return this[kState].lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n\n}\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob);\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, {\n        strict: false\n      });\n    }\n\n    return webidl.converters.BufferSource(V, opts);\n  } else {\n    return webidl.converters.USVString(V, opts);\n  }\n};\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(webidl.converters.BlobPart); // https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\n\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([{\n  key: 'lastModified',\n  converter: webidl.converters['long long'],\n\n  get defaultValue() {\n    return Date.now();\n  }\n\n}, {\n  key: 'type',\n  converter: webidl.converters.DOMString,\n  defaultValue: ''\n}, {\n  key: 'endings',\n  converter: value => {\n    value = webidl.converters.DOMString(value);\n    value = value.toLowerCase();\n\n    if (value !== 'native') {\n      value = 'transparent';\n    }\n\n    return value;\n  },\n  defaultValue: 'transparent'\n}]);\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\n\nfunction processBlobParts(parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []; // 2. For each element in parts:\n\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element; // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s);\n      } // 3. Append the result of UTF-8 encoding s to bytes.\n\n\n      bytes.push(new TextEncoder().encode(s));\n    } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) {\n        // ArrayBuffer\n        bytes.push(new Uint8Array(element));\n      } else {\n        bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element);\n    }\n  } // 3. Return bytes.\n\n\n  return bytes;\n}\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\n\n\nfunction convertLineEndingsNative(s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'; // 2. If the underlying platformâ€™s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n';\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding);\n} // If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\n\n\nfunction isFileLike(object) {\n  return object instanceof File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';\n}\n\nmodule.exports = {\n  File,\n  FileLike,\n  isFileLike\n};","map":{"version":3,"names":["Blob","require","types","kState","isBlobLike","webidl","File","constructor","fileBits","fileName","options","arguments","length","TypeError","converters","USVString","FilePropertyBag","n","d","lastModified","processBlobParts","type","name","Symbol","toStringTag","FileLike","blobLike","t","Date","now","stream","arrayBuffer","slice","text","size","interfaceConverter","BlobPart","V","opts","util","Type","strict","BufferSource","sequenceConverter","dictionaryConverter","key","converter","defaultValue","DOMString","value","toLowerCase","parts","bytes","element","s","endings","convertLineEndingsNative","push","TextEncoder","encode","isAnyArrayBuffer","isTypedArray","buffer","Uint8Array","byteOffset","byteLength","nativeLineEnding","process","platform","replace","isFileLike","object","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/undici/lib/fetch/file.js"],"sourcesContent":["'use strict'\n\nconst { Blob } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required')\n    }\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    // Note: Blob handles both of these steps for us\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: options.type })\n    this[kState] = {\n      name: n,\n      lastModified: d\n    }\n  }\n\n  get name () {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    if (!(this instanceof File)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return this.constructor.name\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    if (!(this instanceof FileLike)) {\n      throw new TypeError('Illegal invocation')\n    }\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    return webidl.converters.BufferSource(V, opts)\n  } else {\n    return webidl.converters.USVString(V, opts)\n  }\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(new TextEncoder().encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platformâ€™s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return object instanceof File || (\n    object &&\n    (typeof object.stream === 'function' ||\n     typeof object.arrayBuffer === 'function') &&\n     object[Symbol.toStringTag] === 'File'\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}