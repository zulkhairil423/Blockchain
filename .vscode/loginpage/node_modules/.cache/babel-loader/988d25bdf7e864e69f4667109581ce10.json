{"ast":null,"code":"var util = require('util'),\n    EventEmitter = require('events').EventEmitter,\n    prequire = require('parent-require'),\n    _ = require('lodash'),\n    uuid = require('uuid').v4;\n/**\n * Store constructor\n * @param {Object} options The options can have information like host, port, etc. [optional]\n */\n\n\nfunction Store(options) {\n  options = options || {};\n  EventEmitter.call(this);\n}\n\nutil.inherits(Store, EventEmitter);\n\nfunction implementError(callback) {\n  var err = new Error('Please implement this function!');\n  if (callback) callback(err);\n  throw err;\n}\n\nfunction silentWarning(callback) {\n  console.warn('Snapshot cleaning is not implemented for this kind of store');\n  callback();\n}\n\n_.extend(Store.prototype, {\n  /**\n   * Initiate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err, queue){}`\n   */\n  connect: implementError,\n\n  /**\n   * Terminate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err){}`\n   */\n  disconnect: implementError,\n\n  /**\n   * Use this function to obtain a new id.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, id){}` id is of type String.\n   */\n  getNewId: function (callback) {\n    var id = uuid().toString();\n    if (callback) callback(null, id);\n  },\n\n  /**\n   * Use this function to an array containing the next position numbers\n   * @param  {number} positins Number of positions to provide.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, positions){}` positions is either undefined if option is not enabled/supported or array with positions\n   */\n  getNextPositions: function (positions, callback) {\n    callback(null);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   skip     how many events should be skipped?\n   * @param {Number}   limit    how many events do you want in the result?\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   revMin   revision start point\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object}   query    the query object\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, snapshot){}`\n   */\n  getSnapshot: function (query, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   snap     the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addSnapshot: function (snap, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   query    the query object\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  cleanSnapshots: function (query, callback) {\n    silentWarning(callback);\n  },\n\n  /**\n   * stores the passed events\n   * @param {Array}    evts     the events\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addEvents: function (evts, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {String}   id       the event id\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (id, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * NEVER USE THIS FUNCTION!!! ONLY FOR TESTS!\n   * clears the complete store...\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  clear: function (callback) {\n    implementError(callback);\n  }\n});\n\nStore.use = function (toRequire) {\n  var required;\n\n  try {\n    required = require(toRequire);\n  } catch (e) {\n    // workaround when `npm link`'ed for development\n    required = prequire(toRequire);\n  }\n\n  return required;\n};\n\nmodule.exports = Store;","map":{"version":3,"names":["util","require","EventEmitter","prequire","_","uuid","v4","Store","options","call","inherits","implementError","callback","err","Error","silentWarning","console","warn","extend","prototype","connect","disconnect","getNewId","id","toString","getNextPositions","positions","getEvents","query","skip","limit","getEventsSince","commitStamp","getEventsByRevision","revMin","revMax","getSnapshot","addSnapshot","snap","cleanSnapshots","addEvents","evts","getLastEvent","getUndispatchedEvents","setEventToDispatched","clear","use","toRequire","required","e","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/eventstore/lib/base.js"],"sourcesContent":["var util = require('util'),\n  EventEmitter = require('events').EventEmitter,\n  prequire = require('parent-require'),\n  _ = require('lodash'),\n  uuid = require('uuid').v4;\n\n/**\n * Store constructor\n * @param {Object} options The options can have information like host, port, etc. [optional]\n */\nfunction Store(options) {\n  options = options || {};\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Store, EventEmitter);\n\nfunction implementError (callback) {\n  var err = new Error('Please implement this function!');\n  if (callback) callback(err);\n  throw err;\n}\n\nfunction silentWarning(callback) {\n  console.warn('Snapshot cleaning is not implemented for this kind of store');\n  callback();\n}\n\n_.extend(Store.prototype, {\n\n  /**\n   * Initiate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err, queue){}`\n   */\n  connect: implementError,\n\n  /**\n   * Terminate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err){}`\n   */\n  disconnect: implementError,\n\n  /**\n   * Use this function to obtain a new id.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, id){}` id is of type String.\n   */\n  getNewId: function (callback) {\n    var id = uuid().toString();\n    if (callback) callback(null, id);\n  },\n\n  /**\n   * Use this function to an array containing the next position numbers\n   * @param  {number} positins Number of positions to provide.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, positions){}` positions is either undefined if option is not enabled/supported or array with positions\n   */\n  getNextPositions: function(positions, callback) {\n    callback(null);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   skip     how many events should be skipped?\n   * @param {Number}   limit    how many events do you want in the result?\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   revMin   revision start point\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object}   query    the query object\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, snapshot){}`\n   */\n  getSnapshot: function (query, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   snap     the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addSnapshot: function(snap, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   query    the query object\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  cleanSnapshots: function(query, callback) {\n    silentWarning(callback);\n  },\n\n  /**\n   * stores the passed events\n   * @param {Array}    evts     the events\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addEvents: function (evts, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {String}   id       the event id\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (id, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * NEVER USE THIS FUNCTION!!! ONLY FOR TESTS!\n   * clears the complete store...\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  clear: function (callback) {\n    implementError(callback);\n  }\n});\n\nStore.use = function (toRequire) {\n  var required;\n  try {\n    required = require(toRequire);\n  } catch (e) {\n    // workaround when `npm link`'ed for development\n    required = prequire(toRequire);\n  }\n  return required;\n};\n\nmodule.exports = Store;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}