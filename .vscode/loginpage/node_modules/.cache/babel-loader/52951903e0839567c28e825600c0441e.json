{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffLines = diffLines;\nexports.diffTrimmedLines = diffTrimmedLines;\nexports.lineDiff = void 0;\n/*istanbul ignore end*/\n\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/\n;\n/*istanbul ignore start*/\n\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*istanbul ignore end*/\n\n\nvar lineDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n/*istanbul ignore start*/\n\nexports.lineDiff = lineDiff;\n/*istanbul ignore end*/\n\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\n\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  generateOptions\n  /*istanbul ignore end*/\n  )(callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAAA;AAAAA;AAAA;AAAA;;AACA;AAAA;AAAAC;AAAA;AAAA;;;;;;;;;;;;AAEO,IAAMC,QAAQ,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAjB;;;;;;AACPD,QAAQ,CAACE,QAATF,GAAoB,UAASG,KAAT,EAAgB;EAClC,IAAIC,QAAQ,GAAG,EAAf;EAAA,IACIC,gBAAgB,GAAGF,KAAK,CAACG,KAANH,CAAY,WAAZA,CADvB,CADkC,CAIlC;;EACA,IAAI,CAACE,gBAAgB,CAACA,gBAAgB,CAACE,MAAjBF,GAA0B,CAA3B,CAArB,EAAoD;IAClDA,gBAAgB,CAACG,GAAjBH;EANgC,EASlC;;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACE,MAArC,EAA6CE,CAAC,EAA9C,EAAkD;IAChD,IAAIC,IAAI,GAAGL,gBAAgB,CAACI,CAAD,CAA3B;;IAEA,IAAIA,CAAC,GAAG,CAAJA,IAAS,CAAC,KAAKE,OAAL,CAAaC,cAA3B,EAA2C;MACzCR,QAAQ,CAACA,QAAQ,CAACG,MAATH,GAAkB,CAAnB,CAARA,IAAiCM,IAAjCN;IADF,OAEO;MACL,IAAI,KAAKO,OAAL,CAAaE,gBAAjB,EAAmC;QACjCH,IAAI,GAAGA,IAAI,CAACI,IAALJ,EAAPA;MACD;;MACDN,QAAQ,CAACW,IAATX,CAAcM,IAAdN;IACD;EACF;;EAED,OAAOA,QAAP;AAvBF;;AA0BO,SAASY,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;EAAE,OAAOnB,QAAQ,CAACoB,IAATpB,CAAciB,MAAdjB,EAAsBkB,MAAtBlB,EAA8BmB,QAA9BnB,CAAP;AAAiD;;AAChG,SAASqB,gBAAT,CAA0BJ,MAA1B,EAAkCC,MAAlC,EAA0CC,QAA1C,EAAoD;EACzD,IAAIR,OAAO;EAAG;EAAA;EAAA;;EAAAW;EAAAA;EAAAA;EAAAA;EAAAA;EAAAA;EAAA;EAAA,EAAgBH,QAAhB,EAA0B;IAACN,gBAAgB,EAAE;EAAnB,CAA1B,CAAd;EACA,OAAOb,QAAQ,CAACoB,IAATpB,CAAciB,MAAdjB,EAAsBkB,MAAtBlB,EAA8BW,OAA9BX,CAAP;AACD","names":["_base","_params","lineDiff","Diff","tokenize","value","retLines","linesAndNewlines","split","length","pop","i","line","options","newlineIsToken","ignoreWhitespace","trim","push","diffLines","oldStr","newStr","callback","diff","diffTrimmedLines","generateOptions"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\diff\\src\\diff\\line.js"],"sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\nexport const lineDiff = new Diff();\nlineDiff.tokenize = function(value) {\n  let retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n  // Ignore the final empty token that occurs if the string ends with a new line\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  }\n\n  // Merge the content and line separators into single tokens\n  for (let i = 0; i < linesAndNewlines.length; i++) {\n    let line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nexport function diffLines(oldStr, newStr, callback) { return lineDiff.diff(oldStr, newStr, callback); }\nexport function diffTrimmedLines(oldStr, newStr, callback) {\n  let options = generateOptions(callback, {ignoreWhitespace: true});\n  return lineDiff.diff(oldStr, newStr, options);\n}\n"]},"metadata":{},"sourceType":"script"}