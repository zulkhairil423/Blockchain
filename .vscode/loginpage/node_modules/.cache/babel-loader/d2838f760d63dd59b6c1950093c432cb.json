{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { URL } from 'url';\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\n\nexport function isSentryRequest(url) {\n  var _a;\n\n  var dsn = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\n\nexport function extractUrl(requestOptions) {\n  var protocol = requestOptions.protocol || '';\n  var hostname = requestOptions.hostname || requestOptions.host || ''; // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n\n  var port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : \":\" + requestOptions.port;\n  var path = requestOptions.path ? requestOptions.path : '/';\n  return protocol + \"//\" + hostname + port + path;\n}\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\n\nexport function cleanSpanDescription(description, requestOptions, request) {\n  var _a, _b, _c; // nothing to clean\n\n\n  if (!description) {\n    return description;\n  } // eslint-disable-next-line prefer-const\n\n\n  var _d = __read(description.split(' '), 2),\n      method = _d[0],\n      requestUrl = _d[1]; // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n\n\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (_b = (_a = request) === null || _a === void 0 ? void 0 : _a.agent) === null || _b === void 0 ? void 0 : _b.protocol; // worst comes to worst, this is undefined and nothing changes\n\n    requestUrl = extractUrl(requestOptions);\n  } // internal routes can end up starting with a triple slash rather than a single one\n\n\n  if ((_c = requestUrl) === null || _c === void 0 ? void 0 : _c.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return method + \" \" + requestUrl;\n}\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\n\nexport function urlToOptions(url) {\n  var options = {\n    protocol: url.protocol,\n    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: \"\" + (url.pathname || '') + (url.search || ''),\n    href: url.href\n  };\n\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n\n  if (url.username || url.password) {\n    options.auth = url.username + \":\" + url.password;\n  }\n\n  return options;\n}\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\n\nexport function normalizeRequestArgs(requestArgs) {\n  var callback, requestOptions; // pop off the callback, if there is one\n\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop();\n  } // create a RequestOptions object of whatever's at index 0\n\n\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  } // if the options were given separately from the URL, fold them in\n\n\n  if (requestArgs.length === 2) {\n    requestOptions = __assign(__assign({}, requestOptions), requestArgs[1]);\n  } // return args in standardized form\n\n\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}","map":{"version":3,"mappings":"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","names":["getCurrentHub","URL","isSentryRequest","url","dsn","getClient","_a","getDsn","includes","host","extractUrl","requestOptions","protocol","hostname","port","path","cleanSpanDescription","description","request","method","requestUrl","agent","_b","_c","startsWith","slice","urlToOptions","options","hash","search","pathname","href","Number","username","password","auth","normalizeRequestArgs","requestArgs","callback","length","pop"],"sources":["C:\\Users\\LeonyX\\Documents\\Blockchain\\.vscode\\loginpage\\node_modules\\@sentry\\node\\src\\integrations\\utils\\http.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport * as http from 'http';\nimport { URL } from 'url';\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nexport function isSentryRequest(url: string): boolean {\n  const dsn = getCurrentHub()\n    .getClient()\n    ?.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nexport function extractUrl(requestOptions: RequestOptions): string {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nexport function cleanSpanDescription(\n  description: string | undefined,\n  requestOptions: RequestOptions,\n  request: http.ClientRequest,\n): string | undefined {\n  // nothing to clean\n  if (!description) {\n    return description;\n  }\n\n  // eslint-disable-next-line prefer-const\n  let [method, requestUrl] = description.split(' ');\n\n  // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (request as any)?.agent?.protocol; // worst comes to worst, this is undefined and nothing changes\n    requestUrl = extractUrl(requestOptions);\n  }\n\n  // internal routes can end up starting with a triple slash rather than a single one\n  if (requestUrl?.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return `${method} ${requestUrl}`;\n}\n\n// the node types are missing a few properties which node's `urlToOptions` function spits out\nexport type RequestOptions = http.RequestOptions & { hash?: string; search?: string; pathname?: string; href?: string };\ntype RequestCallback = (response: http.IncomingMessage) => void;\nexport type RequestMethodArgs =\n  | [RequestOptions | string | URL, RequestCallback?]\n  | [string | URL, RequestOptions, RequestCallback?];\nexport type RequestMethod = (...args: RequestMethodArgs) => http.ClientRequest;\n\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nexport function urlToOptions(url: URL): RequestOptions {\n  const options: RequestOptions = {\n    protocol: url.protocol,\n    hostname:\n      typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: `${url.pathname || ''}${url.search || ''}`,\n    href: url.href,\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`;\n  }\n  return options;\n}\n\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nexport function normalizeRequestArgs(\n  requestArgs: RequestMethodArgs,\n): [RequestOptions] | [RequestOptions, RequestCallback] {\n  let callback, requestOptions;\n\n  // pop off the callback, if there is one\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop() as RequestCallback;\n  }\n\n  // create a RequestOptions object of whatever's at index 0\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  }\n\n  // if the options were given separately from the URL, fold them in\n  if (requestArgs.length === 2) {\n    requestOptions = { ...requestOptions, ...requestArgs[1] };\n  }\n\n  // return args in standardized form\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}