{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\n\nconst hmac_1 = require(\"@noble/hashes/hmac\");\n\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\n\nconst sha256_1 = require(\"@noble/hashes/sha256\");\n\nconst sha512_1 = require(\"@noble/hashes/sha512\");\n\nconst _assert_1 = require(\"@noble/hashes/_assert\");\n\nconst utils_1 = require(\"@noble/hashes/utils\");\n\nconst secp = require(\"@noble/secp256k1\");\n\nconst base_1 = require(\"@scure/base\");\n\nsecp.utils.hmacSha256Sync = function (key) {\n  const h = hmac_1.hmac.create(sha256_1.sha256, key);\n\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  messages.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst base58c = (0, base_1.base58check)(sha256_1.sha256);\n\nfunction bytesToNumber(bytes) {\n  return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\n\nfunction numberToBytes(num) {\n  return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\nconst BITCOIN_VERSIONS = {\n  private: 0x0488ade4,\n  public: 0x0488b21e\n};\nexports.HARDENED_OFFSET = 0x80000000;\n\nconst hash160 = data => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\n\nconst fromU32 = data => (0, utils_1.createView)(data).getUint32(0, false);\n\nconst toU32 = n => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n\n  const buf = new Uint8Array(4);\n  (0, utils_1.createView)(buf).setUint32(0, n, false);\n  return buf;\n};\n\nclass HDKey {\n  constructor(opt) {\n    this.depth = 0;\n    this.index = 0;\n    this.chainCode = null;\n    this.parentFingerprint = 0;\n\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n\n      this.privKey = typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  get fingerprint() {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n\n    return fromU32(this.pubHash);\n  }\n\n  get identifier() {\n    return this.pubHash;\n  }\n\n  get pubKeyHash() {\n    return this.pubHash;\n  }\n\n  get privateKey() {\n    return this.privKeyBytes || null;\n  }\n\n  get publicKey() {\n    return this.pubKey || null;\n  }\n\n  get privateExtendedKey() {\n    const priv = this.privateKey;\n\n    if (!priv) {\n      throw new Error('No private key');\n    }\n\n    return base58c.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n  }\n\n  get publicExtendedKey() {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n\n    return base58c.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  static fromMasterSeed(seed) {\n    let versions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BITCOIN_VERSIONS;\n\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n    }\n\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32)\n    });\n  }\n\n  static fromExtendedKey(base58key) {\n    let versions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BITCOIN_VERSIONS;\n    const keyBuffer = base58c.decode(base58key);\n    const keyView = (0, utils_1.createView)(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45)\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n\n    if (isPriv) {\n      return new HDKey({ ...opt,\n        privateKey: key.slice(1)\n      });\n    } else {\n      return new HDKey({ ...opt,\n        publicKey: key\n      });\n    }\n  }\n\n  static fromJSON(json) {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n\n  derive(path) {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    let child = this;\n\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n\n      if (!m || m.length !== 3) {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n\n      let idx = +m[1];\n\n      if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n\n      if (m[2] === \"'\") {\n        idx += exports.HARDENED_OFFSET;\n      }\n\n      child = child.deriveChild(idx);\n    }\n\n    return child;\n  }\n\n  deriveChild(index) {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n\n    let data = toU32(index);\n\n    if (index >= exports.HARDENED_OFFSET) {\n      const priv = this.privateKey;\n\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n\n      data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n    } else {\n      data = (0, utils_1.concatBytes)(this.pubKey, data);\n    }\n\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n\n    const opt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index\n    };\n\n    try {\n      if (this.privateKey) {\n        const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n\n        opt.privateKey = added;\n      } else {\n        opt.publicKey = secp.Point.fromHex(this.pubKey).add(secp.Point.fromPrivateKey(childTweak)).toRawBytes(true);\n      }\n\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  sign(hash) {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n\n    (0, _assert_1.bytes)(hash, 32);\n    return secp.signSync(hash, this.privKey, {\n      canonical: true,\n      der: false\n    });\n  }\n\n  verify(hash, signature) {\n    (0, _assert_1.bytes)(hash, 32);\n    (0, _assert_1.bytes)(signature, 64);\n\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n\n    let sig;\n\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  wipePrivateData() {\n    this.privKey = undefined;\n\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n\n    return this;\n  }\n\n  toJSON() {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey\n    };\n  }\n\n  serialize(version, key) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n\n    (0, _assert_1.bytes)(key, 33);\n    return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n  }\n\n}\n\nexports.HDKey = HDKey;","map":{"version":3,"names":["Object","defineProperty","exports","value","HDKey","HARDENED_OFFSET","hmac_1","require","ripemd160_1","sha256_1","sha512_1","_assert_1","utils_1","secp","base_1","utils","hmacSha256Sync","key","h","hmac","create","sha256","messages","forEach","msg","update","digest","base58c","base58check","bytesToNumber","bytes","BigInt","bytesToHex","numberToBytes","num","hexToBytes","toString","padStart","MASTER_SECRET","utf8ToBytes","BITCOIN_VERSIONS","private","public","hash160","data","ripemd160","fromU32","createView","getUint32","toU32","n","Number","isSafeInteger","Error","buf","Uint8Array","setUint32","constructor","opt","depth","index","chainCode","parentFingerprint","versions","publicKey","privateKey","isValidPrivateKey","privKey","privKeyBytes","pubKey","getPublicKey","Point","fromHex","toRawBytes","pubHash","fingerprint","identifier","pubKeyHash","privateExtendedKey","priv","encode","serialize","concatBytes","publicExtendedKey","fromMasterSeed","seed","length","I","sha512","slice","fromExtendedKey","base58key","keyBuffer","decode","keyView","version","isPriv","fromJSON","json","xpriv","derive","path","test","parts","replace","split","child","c","m","exec","idx","deriveChild","childTweak","added","mod","CURVE","add","fromPrivateKey","err","sign","hash","signSync","canonical","der","verify","signature","sig","Signature","fromCompact","error","wipePrivateData","undefined","fill","toJSON","xpub"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/@scure/bip32/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst secp = require(\"@noble/secp256k1\");\nconst base_1 = require(\"@scure/base\");\nsecp.utils.hmacSha256Sync = (key, ...messages) => {\n    const h = hmac_1.hmac.create(sha256_1.sha256, key);\n    messages.forEach((msg) => h.update(msg));\n    return h.digest();\n};\nconst base58c = (0, base_1.base58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n    return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\nfunction numberToBytes(num) {\n    return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\nconst BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = (data) => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = (data) => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n    }\n    const buf = new Uint8Array(4);\n    (0, utils_1.createView)(buf).setUint32(0, n, false);\n    return buf;\n};\nclass HDKey {\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.chainCode = null;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object') {\n            throw new Error('HDKey.constructor must not be called directly');\n        }\n        this.versions = opt.versions || BITCOIN_VERSIONS;\n        this.depth = opt.depth || 0;\n        this.chainCode = opt.chainCode;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index) {\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n            }\n        }\n        if (opt.publicKey && opt.privateKey) {\n            throw new Error('HDKey: publicKey and privateKey at same time.');\n        }\n        if (opt.privateKey) {\n            if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n                throw new Error('Invalid private key');\n            }\n            this.privKey =\n                typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n            this.privKeyBytes = numberToBytes(this.privKey);\n            this.pubKey = secp.getPublicKey(opt.privateKey, true);\n        }\n        else if (opt.publicKey) {\n            this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n        }\n        else {\n            throw new Error('HDKey: no public or private key provided');\n        }\n        this.pubHash = hash160(this.pubKey);\n    }\n    get fingerprint() {\n        if (!this.pubHash) {\n            throw new Error('No publicKey set!');\n        }\n        return fromU32(this.pubHash);\n    }\n    get identifier() {\n        return this.pubHash;\n    }\n    get pubKeyHash() {\n        return this.pubHash;\n    }\n    get privateKey() {\n        return this.privKeyBytes || null;\n    }\n    get publicKey() {\n        return this.pubKey || null;\n    }\n    get privateExtendedKey() {\n        const priv = this.privateKey;\n        if (!priv) {\n            throw new Error('No private key');\n        }\n        return base58c.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n    }\n    get publicExtendedKey() {\n        if (!this.pubKey) {\n            throw new Error('No public key');\n        }\n        return base58c.encode(this.serialize(this.versions.public, this.pubKey));\n    }\n    static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            versions,\n            chainCode: I.slice(32),\n            privateKey: I.slice(0, 32),\n        });\n    }\n    static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n        const keyBuffer = base58c.decode(base58key);\n        const keyView = (0, utils_1.createView)(keyBuffer);\n        const version = keyView.getUint32(0, false);\n        const opt = {\n            versions,\n            depth: keyBuffer[4],\n            parentFingerprint: keyView.getUint32(5, false),\n            index: keyView.getUint32(9, false),\n            chainCode: keyBuffer.slice(13, 45),\n        };\n        const key = keyBuffer.slice(45);\n        const isPriv = key[0] === 0;\n        if (version !== versions[isPriv ? 'private' : 'public']) {\n            throw new Error('Version mismatch');\n        }\n        if (isPriv) {\n            return new HDKey({ ...opt, privateKey: key.slice(1) });\n        }\n        else {\n            return new HDKey({ ...opt, publicKey: key });\n        }\n    }\n    static fromJSON(json) {\n        return HDKey.fromExtendedKey(json.xpriv);\n    }\n    derive(path) {\n        if (!/^[mM]'?/.test(path)) {\n            throw new Error('Path must start with \"m\" or \"M\"');\n        }\n        if (/^[mM]'?$/.test(path)) {\n            return this;\n        }\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            if (!m || m.length !== 3) {\n                throw new Error(`Invalid child index: ${c}`);\n            }\n            let idx = +m[1];\n            if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n                throw new Error('Invalid index');\n            }\n            if (m[2] === \"'\") {\n                idx += exports.HARDENED_OFFSET;\n            }\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (!this.pubKey || !this.chainCode) {\n            throw new Error('No publicKey or chainCode set');\n        }\n        let data = toU32(index);\n        if (index >= exports.HARDENED_OFFSET) {\n            const priv = this.privateKey;\n            if (!priv) {\n                throw new Error('Could not derive hardened child key');\n            }\n            data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n        }\n        else {\n            data = (0, utils_1.concatBytes)(this.pubKey, data);\n        }\n        const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n        const childTweak = bytesToNumber(I.slice(0, 32));\n        const chainCode = I.slice(32);\n        if (!secp.utils.isValidPrivateKey(childTweak)) {\n            throw new Error('Tweak bigger than curve order');\n        }\n        const opt = {\n            versions: this.versions,\n            chainCode,\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n        };\n        try {\n            if (this.privateKey) {\n                const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n                if (!secp.utils.isValidPrivateKey(added)) {\n                    throw new Error('The tweak was out of range or the resulted private key is invalid');\n                }\n                opt.privateKey = added;\n            }\n            else {\n                opt.publicKey = secp.Point.fromHex(this.pubKey)\n                    .add(secp.Point.fromPrivateKey(childTweak))\n                    .toRawBytes(true);\n            }\n            return new HDKey(opt);\n        }\n        catch (err) {\n            return this.deriveChild(index + 1);\n        }\n    }\n    sign(hash) {\n        if (!this.privateKey) {\n            throw new Error('No privateKey set!');\n        }\n        (0, _assert_1.bytes)(hash, 32);\n        return secp.signSync(hash, this.privKey, {\n            canonical: true,\n            der: false,\n        });\n    }\n    verify(hash, signature) {\n        (0, _assert_1.bytes)(hash, 32);\n        (0, _assert_1.bytes)(signature, 64);\n        if (!this.publicKey) {\n            throw new Error('No publicKey set!');\n        }\n        let sig;\n        try {\n            sig = secp.Signature.fromCompact(signature);\n        }\n        catch (error) {\n            return false;\n        }\n        return secp.verify(sig, hash, this.publicKey);\n    }\n    wipePrivateData() {\n        this.privKey = undefined;\n        if (this.privKeyBytes) {\n            this.privKeyBytes.fill(0);\n            this.privKeyBytes = undefined;\n        }\n        return this;\n    }\n    toJSON() {\n        return {\n            xpriv: this.privateExtendedKey,\n            xpub: this.publicExtendedKey,\n        };\n    }\n    serialize(version, key) {\n        if (!this.chainCode) {\n            throw new Error('No chainCode set');\n        }\n        (0, _assert_1.bytes)(key, 33);\n        return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n    }\n}\nexports.HDKey = HDKey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}