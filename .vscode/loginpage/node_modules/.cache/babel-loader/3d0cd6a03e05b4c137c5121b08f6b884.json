{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst fs = require('graceful-fs');\n\nconst pathExists = require('../path-exists').pathExists;\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\n\nfunction symlinkPaths(srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, err => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink');\n        return callback(err);\n      }\n\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      });\n    });\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err);\n\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        });\n      } else {\n        return fs.lstat(srcpath, err => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink');\n            return callback(err);\n          }\n\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          });\n        });\n      }\n    });\n  }\n}\n\nfunction symlinkPathsSync(srcpath, dstpath) {\n  let exists;\n\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath);\n    if (!exists) throw new Error('absolute srcpath does not exist');\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    };\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    exists = fs.existsSync(relativeToDst);\n\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      };\n    } else {\n      exists = fs.existsSync(srcpath);\n      if (!exists) throw new Error('relative srcpath does not exist');\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      };\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n};","map":{"version":3,"names":["path","require","fs","pathExists","symlinkPaths","srcpath","dstpath","callback","isAbsolute","lstat","err","message","replace","dstdir","dirname","relativeToDst","join","exists","relative","symlinkPathsSync","existsSync","Error","module","exports"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/hardhat/node_modules/fs-extra/lib/ensure/symlink-paths.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}