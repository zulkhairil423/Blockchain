{"ast":null,"code":"module.exports = function (\n/*Buffer*/\ninbuf) {\n  var zlib = require(\"zlib\");\n\n  var opts = {\n    chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024\n  };\n  return {\n    deflate: function () {\n      return zlib.deflateRawSync(inbuf, opts);\n    },\n    deflateAsync: function (\n    /*Function*/\n    callback) {\n      var tmp = zlib.createDeflateRaw(opts),\n          parts = [],\n          total = 0;\n      tmp.on('data', function (data) {\n        parts.push(data);\n        total += data.length;\n      });\n      tmp.on('end', function () {\n        var buf = Buffer.alloc(total),\n            written = 0;\n        buf.fill(0);\n\n        for (var i = 0; i < parts.length; i++) {\n          var part = parts[i];\n          part.copy(buf, written);\n          written += part.length;\n        }\n\n        callback && callback(buf);\n      });\n      tmp.end(inbuf);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","inbuf","zlib","require","opts","chunkSize","parseInt","length","deflate","deflateRawSync","deflateAsync","callback","tmp","createDeflateRaw","parts","total","on","data","push","buf","Buffer","alloc","written","fill","i","part","copy","end"],"sources":["C:/Users/LeonyX/Documents/Blockchain/.vscode/loginpage/node_modules/adm-zip/methods/deflater.js"],"sourcesContent":["module.exports = function (/*Buffer*/inbuf) {\r\n\r\n  var zlib = require(\"zlib\");\r\n  \r\n  var opts = {chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024};\r\n  \r\n  return {\r\n    deflate: function () {\r\n      return zlib.deflateRawSync(inbuf, opts);\r\n    },\r\n\r\n    deflateAsync: function (/*Function*/callback) {\r\n      var tmp = zlib.createDeflateRaw(opts), parts = [], total = 0;\r\n      tmp.on('data', function (data) {\r\n        parts.push(data);\r\n        total += data.length;\r\n      });\r\n      tmp.on('end', function () {\r\n        var buf = Buffer.alloc(total), written = 0;\r\n        buf.fill(0);\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          part.copy(buf, written);\r\n          written += part.length;\r\n        }\r\n        callback && callback(buf);\r\n      });\r\n      tmp.end(inbuf);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAAU;AAAUC,KAApB,EAA2B;EAE1C,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;EAEA,IAAIC,IAAI,GAAG;IAACC,SAAS,EAAE,CAACC,QAAQ,CAACL,KAAK,CAACM,MAAN,GAAe,IAAhB,CAAR,GAAgC,CAAjC,IAAsC;EAAlD,CAAX;EAEA,OAAO;IACLC,OAAO,EAAE,YAAY;MACnB,OAAON,IAAI,CAACO,cAAL,CAAoBR,KAApB,EAA2BG,IAA3B,CAAP;IACD,CAHI;IAKLM,YAAY,EAAE;IAAU;IAAYC,QAAtB,EAAgC;MAC5C,IAAIC,GAAG,GAAGV,IAAI,CAACW,gBAAL,CAAsBT,IAAtB,CAAV;MAAA,IAAuCU,KAAK,GAAG,EAA/C;MAAA,IAAmDC,KAAK,GAAG,CAA3D;MACAH,GAAG,CAACI,EAAJ,CAAO,MAAP,EAAe,UAAUC,IAAV,EAAgB;QAC7BH,KAAK,CAACI,IAAN,CAAWD,IAAX;QACAF,KAAK,IAAIE,IAAI,CAACV,MAAd;MACD,CAHD;MAIAK,GAAG,CAACI,EAAJ,CAAO,KAAP,EAAc,YAAY;QACxB,IAAIG,GAAG,GAAGC,MAAM,CAACC,KAAP,CAAaN,KAAb,CAAV;QAAA,IAA+BO,OAAO,GAAG,CAAzC;QACAH,GAAG,CAACI,IAAJ,CAAS,CAAT;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACP,MAA1B,EAAkCiB,CAAC,EAAnC,EAAuC;UACrC,IAAIC,IAAI,GAAGX,KAAK,CAACU,CAAD,CAAhB;UACAC,IAAI,CAACC,IAAL,CAAUP,GAAV,EAAeG,OAAf;UACAA,OAAO,IAAIG,IAAI,CAAClB,MAAhB;QACD;;QACDI,QAAQ,IAAIA,QAAQ,CAACQ,GAAD,CAApB;MACD,CATD;MAUAP,GAAG,CAACe,GAAJ,CAAQ1B,KAAR;IACD;EAtBI,CAAP;AAwBD,CA9BD"},"metadata":{},"sourceType":"script"}